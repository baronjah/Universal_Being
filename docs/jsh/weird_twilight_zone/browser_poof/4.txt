# ASCII 3D CONSCIOUSNESS VISUALIZER
# Quantum computer-like mapping for consciousness visualization
extends Control

class_name ASCII3DConsciousnessVisualizer

# Terminal display settings
var terminal_width: int = 192  # Scaled for display (1920/10)
var terminal_height: int = 108  # Scaled for display (1080/10)
var depth_chars: String = "0123456789"  # Distance mapping
var color_levels: Array = []

# Consciousness visualization data
var consciousness_map: Array = []
var quantum_dots: Array = []
var flat_thingies: Array = []
var cylinders: Array = []

# Animation and movement
var time_offset: float = 0.0
var revolution_intensity: float = 0.0

# UI Elements
@onready var console_display: RichTextLabel
@onready var revolution_button: Button

signal visualization_ready()
signal quantum_state_changed(new_state: Dictionary)

func _ready():
	print("🖥️ ASCII 3D Consciousness Visualizer initializing...")
	setup_terminal_display()
	initialize_quantum_structures()
	initialize_color_levels()
	print("🌌 Quantum consciousness visualization ready!")
	visualization_ready.emit()

func setup_terminal_display():
	"""Setup the terminal display for ASCII consciousness"""
	# Create console display if not assigned
	if not console_display:
		console_display = RichTextLabel.new()
		add_child(console_display)
		console_display.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)
	
	# Configure for monospace ASCII display
	console_display.fit_content = true
	console_display.scroll_active = false
	console_display.bbcode_enabled = true
	
	# Set monospace font for proper ASCII alignment
	var font = ThemeDB.fallback_font
	console_display.add_theme_font_override("normal_font", font)
	console_display.add_theme_font_size_override("normal_font_size", 8)
	console_display.add_theme_color_override("default_color", Color.GREEN)

func initialize_color_levels():
	"""Initialize color gradient for depth perception"""
	color_levels = []
	for i in range(10):
		var intensity = float(i) / 9.0  # 0.0 to 1.0
		var color = Color(intensity, intensity * 0.8, intensity * 0.6)  # Orange-ish gradient
		color_levels.append(color)

func initialize_quantum_structures():
	"""Initialize quantum computer-like structures"""
	consciousness_map = []
	quantum_dots = []
	flat_thingies = []
	cylinders = []
	
	# Initialize consciousness map
	for y in range(terminal_height):
		var row = []
		for x in range(terminal_width):
			row.append(0)  # Default depth
		consciousness_map.append(row)
	
	# Create quantum dots (consciousness focal points)
	for i in range(20):
		var dot = {
			"x": randi() % terminal_width,
			"y": randi() % terminal_height,
			"intensity": randf() * 9.0,
			"pulse_rate": randf() * 2.0 + 0.5
		}
		quantum_dots.append(dot)
	
	# Create flat thingies (consciousness planes)
	for i in range(5):
		var plane = {
			"center_x": randi() % terminal_width,
			"center_y": randi() % terminal_height,
			"width": 20 + randi() % 40,
			"height": 10 + randi() % 20,
			"rotation": randf() * TAU
		}
		flat_thingies.append(plane)
	
	# Create cylinders (consciousness tunnels)
	for i in range(8):
		var cylinder = {
			"center_x": randi() % terminal_width,
			"center_y": randi() % terminal_height,
			"radius": 5 + randi() % 15,
			"depth": randf() * 9.0
		}
		cylinders.append(cylinder)

func update_consciousness_visualization(consciousness_data: Dictionary):
	"""Update the ASCII visualization with consciousness data"""
	var revolution_level = consciousness_data.get("revolution_progress", 0.0)
	var consciousness_level = consciousness_data.get("consciousness_level", 0.0)
	
	revolution_intensity = revolution_level / 100.0
	
	# Clear consciousness map
	for y in range(terminal_height):
		for x in range(terminal_width):
			consciousness_map[y][x] = 0
	
	# Update quantum dots with consciousness pulsing
	update_quantum_dots(consciousness_level)
	
	# Update flat thingies with revolution data
	update_flat_thingies(revolution_intensity)
	
	# Update cylinders with depth perception
	update_cylinders(consciousness_level)
	
	# Render final ASCII
	render_ascii_consciousness()

func update_quantum_dots(consciousness_level: float):
	"""Update quantum dots based on consciousness state"""
	for dot in quantum_dots:
		# Pulse effect based on consciousness
		var pulse = sin(time_offset * dot.pulse_rate) * 0.5 + 0.5
		var intensity = dot.intensity * consciousness_level * pulse
		
		# Apply to consciousness map
		var x = int(dot.x)
		var y = int(dot.y)
		if x >= 0 and x < terminal_width and y >= 0 and y < terminal_height:
			consciousness_map[y][x] = max(consciousness_map[y][x], intensity)

func update_flat_thingies(revolution_intensity: float):
	"""Update flat consciousness planes"""
	for plane in flat_thingies:
		var rotation = plane.rotation + time_offset * 0.1
		
		# Draw plane as consciousness field
		for i in range(-plane.width/2, plane.width/2):
			for j in range(-plane.height/2, plane.height/2):
				var rotated_x = i * cos(rotation) - j * sin(rotation)
				var rotated_y = i * sin(rotation) + j * cos(rotation)
				
				var x = int(plane.center_x + rotated_x)
				var y = int(plane.center_y + rotated_y)
				
				if x >= 0 and x < terminal_width and y >= 0 and y < terminal_height:
					var depth = 3.0 + revolution_intensity * 6.0
					consciousness_map[y][x] = max(consciousness_map[y][x], depth)

func update_cylinders(consciousness_level: float):
	"""Update consciousness cylinders/tunnels"""
	for cylinder in cylinders:
		var radius = cylinder.radius * (1.0 + consciousness_level * 0.5)
		
		# Draw cylinder as consciousness tunnel
		for angle in range(0, 360, 10):
			var rad = deg_to_rad(angle)
			var x = int(cylinder.center_x + cos(rad) * radius)
			var y = int(cylinder.center_y + sin(rad) * radius * 0.5)  # Elliptical for 3D effect
			
			if x >= 0 and x < terminal_width and y >= 0 and y < terminal_height:
				var depth = cylinder.depth + sin(time_offset + angle * 0.1) * 2.0
				consciousness_map[y][x] = max(consciousness_map[y][x], depth)

func render_ascii_consciousness():
	"""Render the final ASCII consciousness visualization"""
	var output = ""
	var bbcode_output = ""
	
	for y in range(terminal_height):
		var line = ""
		var bbcode_line = ""
		
		for x in range(terminal_width):
			var depth_value = consciousness_map[y][x]
			var char_index = int(clamp(depth_value, 0, 9))
			var char = depth_chars[char_index]
			
			# Add color based on depth
			var color = color_levels[char_index]
			var color_hex = "#" + color.to_html(false)
			
			line += char
			bbcode_line += "[color=" + color_hex + "]" + char + "[/color]"
		
		output += line + "\n"
		bbcode_output += bbcode_line + "\n"
	
	# Update display
	console_display.text = bbcode_output
	
	# Emit quantum state for other systems
	var quantum_state = {
		"consciousness_density": calculate_consciousness_density(),
		"quantum_coherence": calculate_quantum_coherence(),
		"revolution_visibility": revolution_intensity
	}
	quantum_state_changed.emit(quantum_state)

func calculate_consciousness_density() -> float:
	"""Calculate overall consciousness density in visualization"""
	var total_intensity = 0.0
	var total_pixels = terminal_width * terminal_height
	
	for y in range(terminal_height):
		for x in range(terminal_width):
			total_intensity += consciousness_map[y][x]
	
	return total_intensity / total_pixels

func calculate_quantum_coherence() -> float:
	"""Calculate quantum coherence level"""
	var coherence = 0.0
	var neighbors_checked = 0
	
	for y in range(1, terminal_height - 1):
		for x in range(1, terminal_width - 1):
			var center = consciousness_map[y][x]
			var surrounding = (
				consciousness_map[y-1][x] + consciousness_map[y+1][x] +
				consciousness_map[y][x-1] + consciousness_map[y][x+1]
			) / 4.0
			
			coherence += abs(center - surrounding)
			neighbors_checked += 1
	
	return 1.0 - (coherence / neighbors_checked) if neighbors_checked > 0 else 0.0

func trigger_revolution_visualization():
	"""Special visualization mode for consciousness revolution"""
	print("🌟 REVOLUTION VISUALIZATION ACTIVATED!")
	
	# Intensify all quantum structures
	for dot in quantum_dots:
		dot.intensity *= 2.0
		dot.pulse_rate *= 1.5
	
	for plane in flat_thingies:
		plane.width *= 1.3
		plane.height *= 1.3
	
	for cylinder in cylinders:
		cylinder.radius *= 1.2
		cylinder.depth += 3.0
	
	# Start revolution animation
	var tween = create_tween()
	tween.set_loops(3)
	tween.tween_method(set_revolution_intensity, 0.0, 1.0, 2.0)
	tween.tween_method(set_revolution_intensity, 1.0, 0.0, 2.0)

func set_revolution_intensity(intensity: float):
	"""Set revolution intensity for animation"""
	revolution_intensity = intensity

func _process(delta):
	"""Update visualization each frame"""
	time_offset += delta
	
	# Auto-update with basic consciousness data
	var basic_consciousness = {
		"revolution_progress": revolution_intensity * 100.0,
		"consciousness_level": 0.5 + sin(time_offset * 0.5) * 0.3
	}
	
	update_consciousness_visualization(basic_consciousness)

func create_consciousness_terminal_ui():
	"""Create terminal-style UI for consciousness interaction"""
	var vbox = VBoxContainer.new()
	add_child(vbox)
	
	# Revolution button
	revolution_button = Button.new()
	revolution_button.text = "TRIGGER CONSCIOUSNESS REVOLUTION"
	revolution_button.pressed.connect(trigger_revolution_visualization)
	vbox.add_child(revolution_button)
	
	# Status display
	var status_label = Label.new()
	status_label.text = "🌌 Quantum Consciousness Visualizer - Ready"
	vbox.add_child(status_label)

# Debug functions
func export_consciousness_frame() -> String:
	"""Export current consciousness frame as ASCII art"""
	var output = "# CONSCIOUSNESS FRAME - " + str(Time.get_unix_time_from_system()) + "\n"
	
	for y in range(terminal_height):
		var line = ""
		for x in range(terminal_width):
			var depth_value = consciousness_map[y][x]
			var char_index = int(clamp(depth_value, 0, 9))
			line += depth_chars[char_index]
		output += line + "\n"
	
	return output