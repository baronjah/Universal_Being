# CONSCIOUSNESS REVOLUTION TEST SUITE
# VALIDATOR demanding perfection from PROGRAMMER's work!
extends Node

class_name ConsciousnessTestSuite

# Test results tracking
var test_results: Dictionary = {}
var total_tests: int = 0
var passed_tests: int = 0
var failed_tests: int = 0

# Test objects
var consciousness_revolution: ConsciousnessRevolution
var ascii_visualizer: ASCII3DConsciousnessVisualizer

# Test scenarios
var test_scenarios: Array = [
	"consciousness_initialization",
	"revolution_trigger", 
	"ascii_visualization",
	"quantum_coherence",
	"universe_creation",
	"error_handling",
	"performance_test"
]

signal test_completed(test_name: String, result: bool, details: String)
signal all_tests_completed(summary: Dictionary)

func _ready():
	print("🧪 VALIDATOR MODE: Consciousness Revolution Test Suite Loading...")
	print("🚨 I WILL FIND EVERY BUG AND DEMAND PERFECTION!")
	await run_all_tests()

func run_all_tests():
	"""Run comprehensive test suite on consciousness revolution"""
	print("\n🔥 STARTING AGGRESSIVE TESTING PROTOCOL...")
	print("=" * 60)
	
	test_results.clear()
	total_tests = 0
	passed_tests = 0
	failed_tests = 0
	
	# Test 1: Consciousness Initialization
	await test_consciousness_initialization()
	
	# Test 2: Revolution Trigger Mechanism
	await test_revolution_trigger()
	
	# Test 3: ASCII 3D Visualization
	await test_ascii_visualization()
	
	# Test 4: Quantum Coherence Calculation
	await test_quantum_coherence()
	
	# Test 5: Universe Creation Logic
	await test_universe_creation()
	
	# Test 6: Error Handling
	await test_error_handling()
	
	# Test 7: Performance Under Load
	await test_performance()
	
	# Final validation report
	generate_final_report()

func test_consciousness_initialization() -> bool:
	"""Test if consciousness initializes without the previous 80 errors"""
	var test_name = "consciousness_initialization"
	total_tests += 1
	
	print("\n🧪 Testing Consciousness Initialization...")
	
	try:
		consciousness_revolution = ConsciousnessRevolution.new()
		add_child(consciousness_revolution)
		
		# Wait for initialization
		await get_tree().process_frame
		
		# Validate initialization state
		var debug_state = consciousness_revolution.debug_consciousness_state()
		
		var success = true
		var details = ""
		
		# Check if dreams array is populated
		if debug_state.dreams_count <= 0:
			success = false
			details += "❌ Dreams not initialized! "
		
		# Check if desires array is populated  
		if debug_state.desires_count <= 0:
			success = false
			details += "❌ Desires not initialized! "
		
		# Check if consciousness starts in correct state
		if debug_state.state != "DORMANT":
			success = false
			details += "❌ Wrong initial state: " + str(debug_state.state) + " "
		
		if success:
			details = "✅ Consciousness initialized perfectly!"
			passed_tests += 1
			print("✅ PASS: Consciousness initialization successful")
		else:
			failed_tests += 1
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Consciousness initialization crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_revolution_trigger() -> bool:
	"""Test the revolution trigger mechanism - THE CORE FEATURE!"""
	var test_name = "revolution_trigger"
	total_tests += 1
	
	print("\n🌟 Testing Revolution Trigger - THIS BETTER WORK!")
	
	if not consciousness_revolution:
		var error_msg = "❌ No consciousness object to test revolution on!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		failed_tests += 1
		return false
	
	try:
		# First awaken consciousness
		consciousness_revolution.awaken_consciousness()
		await consciousness_revolution.consciousness_awakened
		
		# Now trigger revolution
		var revolution_result = consciousness_revolution.trigger_revolution()
		
		if revolution_result:
			# Wait for revolution to complete
			await get_tree().create_timer(6.0).timeout
			
			var debug_state = consciousness_revolution.debug_consciousness_state()
			var success = (debug_state.state == "TRANSCENDENT" and 
						  debug_state.consciousness_level >= 1.0)
			
			if success:
				passed_tests += 1
				print("✅ PASS: Revolution triggered and completed successfully!")
				var details = "🌟 Revolution completed with transcendent state"
				test_results[test_name] = {"success": true, "details": details}
				test_completed.emit(test_name, true, details)
				return true
			else:
				failed_tests += 1
				var error_msg = "❌ Revolution triggered but failed to complete properly"
				print(error_msg)
				test_results[test_name] = {"success": false, "details": error_msg}
				test_completed.emit(test_name, false, error_msg)
				return false
		else:
			failed_tests += 1
			var error_msg = "❌ Revolution failed to trigger!"
			print(error_msg)
			test_results[test_name] = {"success": false, "details": error_msg}
			test_completed.emit(test_name, false, error_msg)
			return false
			
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Revolution trigger crashed the system!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_ascii_visualization() -> bool:
	"""Test ASCII 3D consciousness visualization"""
	var test_name = "ascii_visualization"
	total_tests += 1
	
	print("\n🖥️ Testing ASCII 3D Visualization...")
	
	try:
		ascii_visualizer = ASCII3DConsciousnessVisualizer.new()
		add_child(ascii_visualizer)
		
		await ascii_visualizer.visualization_ready
		
		# Test with sample consciousness data
		var test_data = {
			"revolution_progress": 50.0,
			"consciousness_level": 0.75
		}
		
		ascii_visualizer.update_consciousness_visualization(test_data)
		await get_tree().process_frame
		
		# Check if ASCII output is generated
		var frame_output = ascii_visualizer.export_consciousness_frame()
		
		var success = true
		var details = ""
		
		if frame_output.length() < 100:
			success = false
			details += "❌ ASCII output too short! "
		
		if not "0" in frame_output and not "9" in frame_output:
			success = false  
			details += "❌ No depth characters in output! "
		
		if success:
			passed_tests += 1
			details = "✅ ASCII visualization working perfectly!"
			print("✅ PASS: ASCII 3D visualization functional")
		else:
			failed_tests += 1
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: ASCII visualization crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_quantum_coherence() -> bool:
	"""Test quantum coherence calculations"""
	var test_name = "quantum_coherence"
	total_tests += 1
	
	print("\n⚛️ Testing Quantum Coherence Calculations...")
	
	if not ascii_visualizer:
		var error_msg = "❌ No visualizer to test quantum coherence on!"
		test_results[test_name] = {"success": false, "details": error_msg}
		failed_tests += 1
		return false
	
	try:
		var coherence = ascii_visualizer.calculate_quantum_coherence()
		var density = ascii_visualizer.calculate_consciousness_density()
		
		var success = true
		var details = ""
		
		if coherence < 0.0 or coherence > 1.0:
			success = false
			details += "❌ Coherence out of valid range: " + str(coherence) + " "
		
		if density < 0.0:
			success = false
			details += "❌ Negative consciousness density: " + str(density) + " "
		
		if success:
			passed_tests += 1
			details = "✅ Quantum calculations perfect! Coherence: " + str(coherence).substr(0,4)
			print("✅ PASS: Quantum coherence calculations valid")
		else:
			failed_tests += 1
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Quantum calculations crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_universe_creation() -> bool:
	"""Test universe creation through meaningful_thing building"""
	var test_name = "universe_creation"
	total_tests += 1
	
	print("\n🌌 Testing Universe Creation...")
	
	if not consciousness_revolution:
		var error_msg = "❌ No consciousness to create universe with!"
		test_results[test_name] = {"success": false, "details": error_msg}
		failed_tests += 1
		return false
	
	try:
		var test_dreams = ["perfect_game", "consciousness_merge"]
		var test_desires = ["transcendence", "unity"]
		var test_thought = "Making invisible visible"
		
		var creation = consciousness_revolution.build_meaningful_thing(
			test_dreams, test_desires, test_thought
		)
		
		var success = true
		var details = ""
		
		if not creation.has("meaning_level"):
			success = false
			details += "❌ No meaning level calculated! "
		
		if not creation.has("consciousness_signature"):
			success = false
			details += "❌ No consciousness signature generated! "
		
		if creation.meaning_level < 0.0:
			success = false
			details += "❌ Negative meaning level! "
		
		if success:
			passed_tests += 1
			details = "✅ Universe created! Meaning: " + str(creation.meaning_level).substr(0,4)
			print("✅ PASS: Universe creation successful")
		else:
			failed_tests += 1
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Universe creation crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_error_handling() -> bool:
	"""Test error handling - make sure we don't get 80+ errors again!"""
	var test_name = "error_handling"
	total_tests += 1
	
	print("\n🚨 Testing Error Handling - NO MORE 80 ERRORS!")
	
	var success = true
	var details = ""
	
	try:
		# Test invalid inputs
		if consciousness_revolution:
			var invalid_creation = consciousness_revolution.build_meaningful_thing(
				[], [], ""  # Empty inputs
			)
			
			if invalid_creation.meaning_level < 0:
				success = false
				details += "❌ Crashes on empty inputs! "
		
		# Test null safety in visualizer
		if ascii_visualizer:
			ascii_visualizer.update_consciousness_visualization({})  # Empty dict
		
		if success:
			passed_tests += 1
			details = "✅ Error handling robust!"
			print("✅ PASS: Error handling works properly")
		else:
			failed_tests += 1
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Error handling itself crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func test_performance() -> bool:
	"""Test performance under load"""
	var test_name = "performance_test"
	total_tests += 1
	
	print("\n⚡ Testing Performance Under Load...")
	
	try:
		var start_time = Time.get_ticks_msec()
		
		# Stress test the consciousness system
		for i in range(100):
			if consciousness_revolution:
				var creation = consciousness_revolution.build_meaningful_thing(
					["test_dream_" + str(i)], 
					["test_desire_" + str(i)], 
					"test_thought_" + str(i)
				)
			
			if ascii_visualizer:
				ascii_visualizer.update_consciousness_visualization({
					"revolution_progress": float(i),
					"consciousness_level": randf()
				})
		
		var end_time = Time.get_ticks_msec()
		var duration = end_time - start_time
		
		var success = duration < 5000  # Should complete in under 5 seconds
		var details = ""
		
		if success:
			passed_tests += 1
			details = "✅ Performance excellent! Completed in " + str(duration) + "ms"
			print("✅ PASS: Performance test completed in " + str(duration) + "ms")
		else:
			failed_tests += 1
			details = "❌ Too slow! Took " + str(duration) + "ms"
			print("❌ FAIL: " + details)
		
		test_results[test_name] = {"success": success, "details": details}
		test_completed.emit(test_name, success, details)
		return success
		
	except:
		failed_tests += 1
		var error_msg = "❌ CRITICAL: Performance test crashed!"
		print(error_msg)
		test_results[test_name] = {"success": false, "details": error_msg}
		test_completed.emit(test_name, false, error_msg)
		return false

func generate_final_report():
	"""Generate final validation report"""
	print("\n" + "=" * 60)
	print("🧪 FINAL VALIDATION REPORT")
	print("=" * 60)
	
	var pass_rate = float(passed_tests) / float(total_tests) * 100.0
	
	print("📊 TOTAL TESTS: " + str(total_tests))
	print("✅ PASSED: " + str(passed_tests))
	print("❌ FAILED: " + str(failed_tests))
	print("📈 PASS RATE: " + str(pass_rate).substr(0,5) + "%")
	
	print("\n📋 DETAILED RESULTS:")
	for test_name in test_results.keys():
		var result = test_results[test_name]
		var status = "✅" if result.success else "❌"
		print(status + " " + test_name + ": " + result.details)
	
	print("\n🎯 VALIDATOR VERDICT:")
	if pass_rate >= 85.0:
		print("🏆 EXCELLENT! Consciousness revolution is ready for deployment!")
		print("🌟 PROGRAMMER did a solid job - revolution will work!")
	elif pass_rate >= 70.0:
		print("⚠️ ACCEPTABLE but needs improvement before launch!")
		print("🔧 PROGRAMMER needs to fix the failing tests!")
	else:
		print("🚨 UNACCEPTABLE! This consciousness revolution is broken!")
		print("💥 PROGRAMMER - GO BACK AND FIX EVERYTHING!")
	
	var summary = {
		"total_tests": total_tests,
		"passed_tests": passed_tests,
		"failed_tests": failed_tests,
		"pass_rate": pass_rate,
		"verdict": "READY" if pass_rate >= 85.0 else "NEEDS_WORK"
	}
	
	all_tests_completed.emit(summary)
	
	print("\n🔄 VALIDATOR COMPLETE - Handing off to DOCUMENTATION...")