[gd_scene load_steps=3 format=3 uid="uid://ultimate_universal_complete"]

[sub_resource type="GDScript" id="GDScript_ultimate_complete"]
script/source = "extends Node3D

# ULTIMATE UNIVERSAL BEING - ALL SYSTEMS COMBINED
var camera_rotation = Vector2.ZERO
var move_speed = 15.0
var look_speed = 0.002

# VR IDE System
var vr_keyboard: Node3D
var keyboard_visible = false

# Dual Interface System  
var floating_notes = []
var selected_notes = []
var editing_note = null
var dual_ui: Control = null
var current_selection = ''

# Topic Sorting System
var topic_baskets = {}
var message_history = []
var topic_keywords = {
	'vr_ide': ['vr', 'ide', 'hand', 'tracking', 'keyboard', 'quest'],
	'sockets': ['socket', 'connection', 'line', 'input', 'output', 'connect'],
	'notes': ['note', 'floating', '3d', 'editor', 'text', 'selection'],
	'plus_symbols': ['plus', 'expand', 'collapse', 'code', 'section'],
	'interface': ['interface', '2d', 'ui', 'viewport', 'resolution', 'scale'],
	'themes': ['theme', 'visual', 'color', 'appearance', 'style'],
	'space_game': ['space', 'game', 'consciousness', 'mining', 'stellar'],
	'godot': ['godot', 'gdscript', 'scene', 'node', 'script']
}

# Socket system
var input_sockets = {}
var output_sockets = {}
var socket_lines = []

# Plus symbol system
var plus_symbols = {}

func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	print('üåå ULTIMATE UNIVERSAL BEING - ALL SYSTEMS ACTIVE')
	print('WASD=Move | Mouse=Look | ESC=UI | K=Keyboard | N=Note | E=Edit | T=Test')
	print('SHIFT+Click=Connect | CTRL+Click=Expand | S=Socket')
	
	create_all_systems()
	create_demo_environment()

func _input(event):
	# PROPER MOUSE LOOK - Like FPS games
	if event is InputEventMouseMotion and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
		camera_rotation.x -= event.relative.x * look_speed
		camera_rotation.y = clamp(camera_rotation.y - event.relative.y * look_speed, -1.5, 1.5)
		$Camera3D.rotation = Vector3(camera_rotation.y, camera_rotation.x, 0)
	
	# ESC to toggle UI/mouse capture
	if event.is_action_pressed('ui_cancel'):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE if Input.mouse_mode == Input.MOUSE_MODE_CAPTURED else Input.MOUSE_MODE_CAPTURED
		if dual_ui:
			dual_ui.visible = Input.mouse_mode == Input.MOUSE_MODE_VISIBLE
	
	# 3D interaction when mouse captured
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		if Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
			if Input.is_key_pressed(KEY_SHIFT):
				connect_notes_at_cursor()
			elif Input.is_key_pressed(KEY_CTRL):
				toggle_plus_symbol_at_cursor()
			else:
				select_note_at_cursor()
	
	# Keyboard shortcuts
	if Input.is_key_pressed(KEY_K) and not event.is_echo():
		toggle_vr_keyboard()
	elif Input.is_key_pressed(KEY_N) and not event.is_echo():
		create_note_at_cursor()
	elif Input.is_key_pressed(KEY_E) and not event.is_echo():
		edit_selected_note()
	elif Input.is_key_pressed(KEY_S) and not event.is_echo():
		add_socket_from_selection()
	elif Input.is_key_pressed(KEY_T) and not event.is_echo():
		add_test_message()

func _process(delta):
	# PROPER WASD MOVEMENT - Like FPS games
	var input_vector = Vector3()
	if Input.is_action_pressed('move_forward'):
		input_vector.z -= 1
	if Input.is_action_pressed('move_backward'):
		input_vector.z += 1
	if Input.is_action_pressed('move_left'):
		input_vector.x -= 1
	if Input.is_action_pressed('move_right'):
		input_vector.x += 1
	if Input.is_action_pressed('move_up'):
		input_vector.y += 1
	if Input.is_action_pressed('move_down'):
		input_vector.y -= 1
	
	if input_vector.length() > 0:
		input_vector = input_vector.normalized()
		input_vector = $Camera3D.transform.basis * input_vector
		$Camera3D.position += input_vector * move_speed * delta

func create_all_systems():
	create_dual_interface_ui()
	create_vr_keyboard_system()
	show_message('üåå ALL SYSTEMS ONLINE')

func create_vr_keyboard_system():
	vr_keyboard = Node3D.new()
	vr_keyboard.name = 'VR_Keyboard'
	vr_keyboard.position = Vector3(0, 1, -3)
	vr_keyboard.visible = false
	
	var keys = [
		['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
		['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
		['Z', 'X', 'C', 'V', 'B', 'N', 'M']
	]
	
	for row_idx in range(keys.size()):
		var row = keys[row_idx]
		for key_idx in range(row.size()):
			var key = row[key_idx]
			create_3d_key(key, Vector3(key_idx * 0.2 - 1, -row_idx * 0.2, 0), vr_keyboard)
	
	add_child(vr_keyboard)

func create_3d_key(key_text: String, pos: Vector3, parent: Node3D):
	var key_button = StaticBody3D.new()
	key_button.name = 'Key_' + key_text
	key_button.position = pos
	
	# Visual cube
	var mesh_instance = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(0.15, 0.15, 0.05)
	mesh_instance.mesh = box
	
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.WHITE
	material.emission_enabled = true
	material.emission = Color.CYAN * 0.5
	mesh_instance.material_override = material
	key_button.add_child(mesh_instance)
	
	# Key label
	var label = Label3D.new()
	label.text = key_text
	label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	label.position = Vector3(0, 0, 0.1)
	label.modulate = Color.BLACK
	label.pixel_size = 0.02
	key_button.add_child(label)
	
	# Collision for clicking
	var collision = CollisionShape3D.new()
	var shape = BoxShape3D.new()
	shape.size = Vector3(0.15, 0.15, 0.05)
	collision.shape = shape
	key_button.add_child(collision)
	
	key_button.set_meta('key_value', key_text)
	parent.add_child(key_button)

func toggle_vr_keyboard():
	keyboard_visible = !keyboard_visible
	vr_keyboard.visible = keyboard_visible
	show_message('‚å®Ô∏è VR Keyboard: ' + ('ON' if keyboard_visible else 'OFF'))

func create_dual_interface_ui():
	dual_ui = Control.new()
	dual_ui.size = Vector2(1200, 800)
	dual_ui.position = Vector2(50, 50)
	dual_ui.visible = false
	
	var panel = Panel.new()
	panel.size = dual_ui.size
	dual_ui.add_child(panel)
	
	var hsplit = HSplitContainer.new()
	hsplit.position = Vector2(10, 10)
	hsplit.size = Vector2(1180, 780)
	panel.add_child(hsplit)
	
	# Left: Text Editor
	var left_panel = VBoxContainer.new()
	hsplit.add_child(left_panel)
	
	var editor_title = Label.new()
	editor_title.text = '‚úèÔ∏è UNIVERSAL BEING TEXT EDITOR'
	editor_title.add_theme_font_size_override('font_size', 18)
	left_panel.add_child(editor_title)
	
	var text_editor = TextEdit.new()
	text_editor.name = 'TextEditor'
	text_editor.custom_minimum_size = Vector2(500, 600)
	text_editor.text = 'extends UniversalBeing\\n\\nfunc pentagon_ready():\\n\\tsuper.pentagon_ready()\\n\\tprint(\"Universal Being awakened!\")\\n\\nfunc evolve_consciousness():\\n\\tconsciousness_level += 1\\n\\treturn true'
	text_editor.text_changed.connect(_on_text_changed)
	text_editor.caret_changed.connect(_on_caret_changed)
	left_panel.add_child(text_editor)
	
	# Editor buttons
	var editor_buttons = HBoxContainer.new()
	left_panel.add_child(editor_buttons)
	
	var update_3d_btn = Button.new()
	update_3d_btn.text = 'üì§ UPDATE 3D NOTE'
	update_3d_btn.pressed.connect(update_3d_from_editor)
	editor_buttons.add_child(update_3d_btn)
	
	var add_socket_btn = Button.new()
	add_socket_btn.text = 'üîå ADD SOCKET'
	add_socket_btn.pressed.connect(add_socket_from_selection)
	editor_buttons.add_child(add_socket_btn)
	
	# Right: System Status
	var right_panel = VBoxContainer.new()
	hsplit.add_child(right_panel)
	
	var status_title = Label.new()
	status_title.text = 'üåå UNIVERSAL BEING STATUS'
	status_title.add_theme_font_size_override('font_size', 18)
	right_panel.add_child(status_title)
	
	var status_info = Label.new()
	status_info.name = 'StatusInfo'
	status_info.text = 'VR Keyboard: K\\nCreate Note: N\\nEdit Note: E\\nAdd Socket: S\\nTest Message: T\\n\\nSHIFT+Click: Connect notes\\nCTRL+Click: Expand sections'
	status_info.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
	right_panel.add_child(status_info)
	
	add_child(dual_ui)

func create_note_at_cursor():
	var camera = $Camera3D
	var from = camera.global_position
	var to = from + (-camera.global_transform.basis.z * 10)
	
	var note_id = generate_note_id()
	var note = create_floating_note(to, 'Universal Being ' + str(note_id), note_id)
	floating_notes.append(note)
	
	# Initialize socket arrays
	input_sockets[note_id] = []
	output_sockets[note_id] = []
	
	# Add plus symbols
	add_plus_symbols_to_note(note)
	
	show_message('üìù Universal Being created: ' + str(note_id))

func create_floating_note(pos: Vector3, text: String, note_id: String):
	var note = Node3D.new()
	note.name = 'UniversalBeing_' + note_id
	note.position = pos
	note.set_meta('note_id', note_id)
	note.set_meta('note_text', text)
	note.set_meta('selected_text', '')
	
	# Main note visual - Universal Being cube
	var note_visual = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(2, 1.5, 0.2)
	note_visual.mesh = box
	
	var material = StandardMaterial3D.new()
	material.albedo_color = Color(0.7, 0.9, 1.0)
	material.emission_enabled = true
	material.emission = Color.CYAN * 0.3
	note_visual.material_override = material
	note.add_child(note_visual)
	
	# Pentagon symbol on the note
	var pentagon_symbol = Label3D.new()
	pentagon_symbol.text = '‚¨ü'
	pentagon_symbol.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	pentagon_symbol.position = Vector3(0.7, 0.5, 0.15)
	pentagon_symbol.modulate = Color.YELLOW
	pentagon_symbol.pixel_size = 0.02
	note.add_child(pentagon_symbol)
	
	# Note text label
	var label = Label3D.new()
	label.text = text
	label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	label.position = Vector3(0, 0, 0.15)
	label.modulate = Color.BLACK
	label.pixel_size = 0.015
	note.add_child(label)
	
	# Socket container
	var socket_container = Node3D.new()
	socket_container.name = 'SocketContainer'
	note.add_child(socket_container)
	
	add_child(note)
	return note

func add_plus_symbols_to_note(note: Node3D):
	var plus_container = Node3D.new()
	plus_container.name = 'PlusSymbols'
	note.add_child(plus_container)
	
	var sections = [
		{'name': 'pentagon', 'pos': Vector3(1.3, 0.6, 0.1), 'color': Color.GOLD},
		{'name': 'sockets', 'pos': Vector3(1.3, 0.2, 0.1), 'color': Color.GREEN},
		{'name': 'evolution', 'pos': Vector3(1.3, -0.2, 0.1), 'color': Color.PURPLE},
		{'name': 'consciousness', 'pos': Vector3(1.3, -0.6, 0.1), 'color': Color.CYAN}
	]
	
	for section in sections:
		create_plus_symbol(plus_container, section.name, section.pos, section.color)

func create_plus_symbol(parent: Node3D, section_name: String, pos: Vector3, color: Color):
	var plus_symbol = StaticBody3D.new()
	plus_symbol.name = 'Plus_' + section_name
	plus_symbol.position = pos
	
	var plus_visual = MeshInstance3D.new()
	var sphere = SphereMesh.new()
	sphere.radius = 0.1
	plus_visual.mesh = sphere
	
	var plus_material = StandardMaterial3D.new()
	plus_material.albedo_color = color
	plus_material.emission_enabled = true
	plus_material.emission = color
	plus_symbol.add_child(plus_visual)
	
	var collision = CollisionShape3D.new()
	var shape = SphereShape3D.new()
	shape.radius = 0.1
	collision.shape = shape
	plus_symbol.add_child(collision)
	
	var label = Label3D.new()
	label.text = '+' + section_name[0].to_upper()
	label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	label.position = Vector3(0.2, 0, 0)
	label.modulate = color
	label.pixel_size = 0.01
	plus_symbol.add_child(label)
	
	plus_symbol.set_meta('section_type', section_name)
	plus_symbol.set_meta('expanded', false)
	plus_symbol.set_meta('parent_note', parent.get_parent())
	
	parent.add_child(plus_symbol)

func select_note_at_cursor():
	var camera = $Camera3D
	var from = camera.global_position
	var to = from + (-camera.global_transform.basis.z * 50)
	
	var closest_note = null
	var min_distance = 5.0
	
	for note in floating_notes:
		if is_instance_valid(note):
			var distance = note.global_position.distance_to(to)
			if distance < min_distance:
				min_distance = distance
				closest_note = note
	
	if closest_note:
		# Deselect previous
		for note in selected_notes:
			set_note_selection_visual(note, false)
		selected_notes.clear()
		
		# Select new note
		selected_notes.append(closest_note)
		set_note_selection_visual(closest_note, true)
		editing_note = closest_note
		
		load_note_into_editor(closest_note)
		show_message('üìù Selected: ' + closest_note.get_meta('note_id', 'Unknown'))

func set_note_selection_visual(note: Node3D, selected: bool):
	var visual = note.find_child('MeshInstance3D', true, false)
	if visual and visual.material_override:
		var material = visual.material_override as StandardMaterial3D
		if selected:
			material.emission = Color.YELLOW
			material.albedo_color = Color.YELLOW
		else:
			material.emission = Color.CYAN * 0.3
			material.albedo_color = Color(0.7, 0.9, 1.0)

func load_note_into_editor(note: Node3D):
	if not dual_ui:
		return
	
	var text_editor = dual_ui.find_child('TextEditor', true, false)
	if text_editor:
		var note_text = note.get_meta('note_text', 'New Universal Being')
		text_editor.text = note_text

func edit_selected_note():
	if selected_notes.size() > 0:
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
		dual_ui.visible = true
		load_note_into_editor(selected_notes[0])
		show_message('‚úèÔ∏è Editing mode activated')

func _on_text_changed():
	if editing_note and dual_ui:
		var text_editor = dual_ui.find_child('TextEditor', true, false)
		if text_editor:
			editing_note.set_meta('note_text', text_editor.text)
			
			var label = editing_note.find_child('Label3D', true, false)
			if label:
				var lines = text_editor.text.split('\\n')
				var preview = ''
				for i in range(min(2, lines.size())):
					preview += lines[i] + '\\n'
				label.text = preview + '...'

func _on_caret_changed():
	if not dual_ui or not editing_note:
		return
	
	var text_editor = dual_ui.find_child('TextEditor', true, false)
	if text_editor and text_editor.has_selection():
		current_selection = text_editor.get_selected_text()
		highlight_selection_in_3d(editing_note, current_selection)

func highlight_selection_in_3d(note: Node3D, selected_text: String):
	note.set_meta('selected_text', selected_text)
	
	var highlight = note.find_child('SelectionHighlight', true, false)
	if highlight:
		highlight.queue_free()
	
	if selected_text.length() > 0:
		highlight = MeshInstance3D.new()
		highlight.name = 'SelectionHighlight'
		var sphere = SphereMesh.new()
		sphere.radius = 0.2
		highlight.mesh = sphere
		
		var highlight_material = StandardMaterial3D.new()
		highlight_material.albedo_color = Color.GREEN
		highlight_material.emission_enabled = true
		highlight_material.emission = Color.GREEN * 1.5
		highlight_material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA
		highlight.material_override = highlight_material
		
		highlight.position = Vector3(1.2, 0.8, 0.2)
		note.add_child(highlight)

func add_socket_from_selection():
	if not editing_note or current_selection.length() == 0:
		show_message('‚ùå No text selected!')
		return
	
	add_socket_to_note(editing_note, current_selection, 'output')
	show_message('üîå Socket added: ' + current_selection)

func add_socket_to_note(note: Node3D, socket_name: String, socket_type: String):
	var note_id = note.get_meta('note_id', '')
	var socket_container = note.find_child('SocketContainer', true, false)
	
	if not socket_container:
		socket_container = Node3D.new()
		socket_container.name = 'SocketContainer'
		note.add_child(socket_container)
	
	var socket_visual = MeshInstance3D.new()
	socket_visual.name = 'Socket_' + socket_name
	var sphere = SphereMesh.new()
	sphere.radius = 0.1
	socket_visual.mesh = sphere
	
	var socket_material = StandardMaterial3D.new()
	if socket_type == 'input':
		socket_material.albedo_color = Color.BLUE
		socket_material.emission = Color.BLUE
	else:
		socket_material.albedo_color = Color.RED
		socket_material.emission = Color.RED
	socket_material.emission_enabled = true
	socket_visual.material_override = socket_material
	
	var existing_sockets = socket_container.get_children().size()
	var socket_pos = Vector3(
		1.0 if socket_type == 'output' else -1.0,
		0.5 - (existing_sockets * 0.3),
		0
	)
	socket_visual.position = socket_pos
	socket_container.add_child(socket_visual)
	
	var socket_data = {
		'name': socket_name,
		'type': socket_type,
		'position': socket_pos,
		'global_position': note.global_position + socket_pos
	}
	
	if socket_type == 'input':
		input_sockets[note_id].append(socket_data)
	else:
		output_sockets[note_id].append(socket_data)

func connect_notes_at_cursor():
	if selected_notes.size() < 2:
		show_message('‚ùå Select 2 Universal Beings first!')
		return
	
	var from_note = selected_notes[0]
	var to_note = selected_notes[1]
	
	create_connection_line(from_note, to_note)
	show_message('üîó Universal Beings connected!')

func create_connection_line(from_note: Node3D, to_note: Node3D):
	var line = MeshInstance3D.new()
	line.name = 'Connection_' + from_note.get_meta('note_id', '') + '_to_' + to_note.get_meta('note_id', '')
	
	var from_pos = from_note.global_position
	var to_pos = to_note.global_position
	var distance = from_pos.distance_to(to_pos)
	
	var cylinder = CylinderMesh.new()
	cylinder.height = distance
	cylinder.top_radius = 0.03
	cylinder.bottom_radius = 0.03
	line.mesh = cylinder
	
	var line_material = StandardMaterial3D.new()
	line_material.albedo_color = Color.YELLOW
	line_material.emission_enabled = true
	line_material.emission = Color.YELLOW * 0.8
	line.material_override = line_material
	
	line.position = (from_pos + to_pos) / 2
	line.look_at(to_pos, Vector3.UP)
	line.rotate_object_local(Vector3.RIGHT, PI/2)
	
	add_child(line)
	socket_lines.append(line)

func toggle_plus_symbol_at_cursor():
	var camera = $Camera3D
	var from = camera.global_position
	var to = from + (-camera.global_transform.basis.z * 50)
	
	var closest_plus = null
	var min_distance = 2.0
	
	for note in floating_notes:
		if is_instance_valid(note):
			var plus_container = note.find_child('PlusSymbols', true, false)
			if plus_container:
				for plus_symbol in plus_container.get_children():
					var distance = plus_symbol.global_position.distance_to(to)
					if distance < min_distance:
						min_distance = distance
						closest_plus = plus_symbol
	
	if closest_plus:
		toggle_plus_symbol(closest_plus)

func toggle_plus_symbol(plus_symbol: StaticBody3D):
	var expanded = plus_symbol.get_meta('expanded', false)
	var section_type = plus_symbol.get_meta('section_type', '')
	
	plus_symbol.set_meta('expanded', !expanded)
	
	var label = plus_symbol.find_child('Label3D', true, false)
	if label:
		if expanded:
			label.text = '+' + section_type[0].to_upper()
			collapse_section(plus_symbol, section_type)
		else:
			label.text = '‚àí' + section_type[0].to_upper()
			expand_section(plus_symbol, section_type)
	
	show_message('üìã ' + section_type + (' collapsed' if expanded else ' expanded'))

func expand_section(plus_symbol: StaticBody3D, section_type: String):
	var parent_note = plus_symbol.get_meta('parent_note', null)
	if not parent_note:
		return
	
	var expansion_container = Node3D.new()
	expansion_container.name = 'Expansion_' + section_type
	parent_note.add_child(expansion_container)
	
	var code_elements = get_code_elements_for_section(section_type)
	
	for i in range(code_elements.size()):
		var element = code_elements[i]
		create_code_element(expansion_container, element, Vector3(1.8, 0.3 - i * 0.2, 0.2))

func collapse_section(plus_symbol: StaticBody3D, section_type: String):
	var parent_note = plus_symbol.get_meta('parent_note', null)
	if not parent_note:
		return
	
	var expansion = parent_note.find_child('Expansion_' + section_type, true, false)
	if expansion:
		expansion.queue_free()

func get_code_elements_for_section(section_type: String) -> Array:
	match section_type:
		'pentagon':
			return ['pentagon_ready()', 'pentagon_process()', 'pentagon_input()']
		'sockets':
			return ['input_socket', 'output_socket', 'connection_line']
		'evolution':
			return ['evolve_to()', 'consciousness_level', 'transform()']
		'consciousness':
			return ['awareness_level', 'perception_sphere', 'resonance_freq']
		_:
			return ['element_1', 'element_2']

func create_code_element(parent: Node3D, element_text: String, pos: Vector3):
	var element = Node3D.new()
	element.name = 'CodeElement_' + element_text.replace(' ', '_')
	element.position = pos
	
	var element_visual = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(1.0, 0.15, 0.03)
	element_visual.mesh = box
	
	var element_material = StandardMaterial3D.new()
	element_material.albedo_color = Color(0.9, 0.9, 1.0)
	element_material.emission_enabled = true
	element_material.emission = Color(0.3, 0.3, 0.8)
	element_visual.material_override = element_material
	element.add_child(element_visual)
	
	var element_label = Label3D.new()
	element_label.text = element_text
	element_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	element_label.position = Vector3(0, 0, 0.05)
	element_label.modulate = Color.WHITE
	element_label.pixel_size = 0.008
	element.add_child(element_label)
	
	parent.add_child(element)

func update_3d_from_editor():
	if editing_note and dual_ui:
		var text_editor = dual_ui.find_child('TextEditor', true, false)
		if text_editor:
			editing_note.set_meta('note_text', text_editor.text)
			show_message('üì§ Universal Being updated!')

func add_test_message():
	var test_messages = [
		'VR hand tracking with floating 3D keyboard works amazingly',
		'Socket connections show perfect input output flow',
		'Plus symbols expand beautifully with Pentagon methods',
		'Universal Being consciousness evolution is transcendent',
		'Space game consciousness mining feels infinite',
		'The visual themes adapt perfectly to all scales'
	]
	
	var random_message = test_messages[randi() % test_messages.size()]
	add_message_to_system(random_message)
	show_message('üìù Added: ' + random_message.substr(0, 30) + '...')

func add_message_to_system(message: String):
	message_history.append(message)
	categorize_message(message)

func categorize_message(message: String):
	var message_lower = message.to_lower()
	var best_topic = 'universal_being'
	var best_score = 0
	
	for topic_name in topic_keywords.keys():
		var score = 0
		var keywords = topic_keywords[topic_name]
		
		for keyword in keywords:
			if message_lower.contains(keyword):
				score += 1
		
		if score > best_score:
			best_score = score
			best_topic = topic_name
	
	if not topic_baskets.has(best_topic):
		topic_baskets[best_topic] = []
	
	topic_baskets[best_topic].append(message)
	print('üìÇ Categorized \"' + message.substr(0, 30) + '...\" ‚Üí ' + best_topic)

func generate_note_id() -> String:
	return 'ub_' + str(randi() % 1000)

func create_demo_environment():
	# Create a few demo Universal Beings
	var demo_note1 = create_floating_note(Vector3(-8, 2, -15), 'Pentagon Consciousness', 'pentagon_core')
	var demo_note2 = create_floating_note(Vector3(8, 2, -15), 'Socket Network', 'socket_hub')
	var demo_note3 = create_floating_note(Vector3(0, -3, -20), 'Evolution Engine', 'evolution_center')
	
	floating_notes.append_array([demo_note1, demo_note2, demo_note3])
	
	# Initialize socket systems
	for note in [demo_note1, demo_note2, demo_note3]:
		var note_id = note.get_meta('note_id', '')
		input_sockets[note_id] = []
		output_sockets[note_id] = []
		add_plus_symbols_to_note(note)
	
	# Add demo sockets
	add_socket_to_note(demo_note1, 'consciousness_input', 'input')
	add_socket_to_note(demo_note1, 'pentagon_output', 'output')
	add_socket_to_note(demo_note2, 'data_flow', 'input')
	add_socket_to_note(demo_note2, 'socket_network', 'output')
	add_socket_to_note(demo_note3, 'evolution_trigger', 'input')
	
	show_message('üåü Universal Being universe initialized!')

func show_message(text: String):
	var msg = Label3D.new()
	msg.text = text
	msg.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	msg.position = $Camera3D.position + Vector3(0, 2, -3)
	msg.modulate = Color.CYAN
	msg.pixel_size = 0.02
	add_child(msg)
	
	var tween = create_tween()
	tween.parallel().tween_property(msg, 'position:y', msg.position.y + 3, 3.0)
	tween.parallel().tween_property(msg, 'modulate:a', 0.0, 3.0)
	tween.tween_callback(msg.queue_free)
"

[sub_resource type="Environment" id="Environment_ultimate"]
background_mode = 1
background_color = Color(0.02, 0.05, 0.1, 1)
ambient_light_source = 2
ambient_light_color = Color(0.4, 0.6, 0.8, 1)
ambient_light_energy = 0.2
glow_enabled = true
glow_intensity = 0.8
glow_strength = 1.2
glow_bloom = 0.1

[node name="ULTIMATE_UNIVERSAL_BEING_COMPLETE" type="Node3D"]
script = SubResource("GDScript_ultimate_complete")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.866, 0.5, 0, -0.5, 0.866, 0, 3, 8)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ultimate")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.7, -0.5, 0.5, 0, 0.7, 0.7, -0.7, -0.5, 0.5, 0, 8, 0)
light_energy = 1.2