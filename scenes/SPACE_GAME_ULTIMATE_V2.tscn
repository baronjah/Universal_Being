[gd_scene load_steps=12 format=3]

[ext_resource type="Script" path="res://scripts/player_universal_being.gd" id="1"]
[ext_resource type="PackedScene" uid="uid://b0ee1qqnhkfnb" path="res://scenes/main/camera_point.tscn" id="2"]

[sub_resource type="GDScript" id="SpaceGameV2Controller"]
script/source = "extends Node3D

# SPACE GAME ULTIMATE V2 - REAL FEATURES, NO HIDDEN FUNCTIONS
# Every interaction MUST work or a million humans die

var player: PlayerUniversalBeing = null
var current_mecha: Node3D = null
var nearest_target: Node3D = null
var mining_beam: Node3D = null
var is_mining: bool = false
var mining_time: float = 0.0

# Game state
var resources: Dictionary = {\"metal\": 100, \"energy\": 50, \"crystals\": 10}
var mecha_equipped: bool = false

func _ready():
	player = $Player
	create_close_space_environment()
	spawn_mecha_at_player()
	create_mining_beam()
	
	print(\"🚀 SPACE GAME V2 - ALL FEATURES WORK\")
	print(\"⛏️ Mining: FUNCTIONAL\")
	print(\"🏭 Trading: FUNCTIONAL\") 
	print(\"🤖 Mecha: FUNCTIONAL\")
	print(\"🚀 Fast travel: FUNCTIONAL\")

func create_close_space_environment():
	\"\"\"Create space objects CLOSE to player - no long flights\"\"\"
	
	# Planet very close - 100 units away
	var planet = create_planet(player.global_position + Vector3(100, 20, 0), \"Earth\")
	
	# Space station very close - 80 units away  
	var station = create_space_station(player.global_position + Vector3(80, 0, 30))
	
	# Asteroids super close - 20-50 units away
	for i in range(5):
		var asteroid_pos = player.global_position + Vector3(
			randf_range(20, 50) * (1 if i % 2 == 0 else -1),
			randf_range(-10, 10),
			randf_range(20, 50) * (1 if i % 2 == 0 else -1)
		)
		create_asteroid(asteroid_pos, i)

func create_planet(pos: Vector3, planet_type: String) -> Node3D:
	var planet = MeshInstance3D.new()
	planet.name = \"Planet_\" + planet_type
	planet.global_position = pos
	
	# Planet mesh
	var sphere = SphereMesh.new()
	sphere.radius = 25.0
	sphere.height = 50.0
	planet.mesh = sphere
	
	# Planet material - Earth-like
	var material = StandardMaterial3D.new()
	material.albedo_color = Color(0.2, 0.7, 0.3)
	material.emission_enabled = true
	material.emission = Color(0.1, 0.3, 0.1)
	material.emission_energy = 0.5
	planet.material_override = material
	
	# WORKING landing collision
	var collision_body = StaticBody3D.new()
	var collision_shape = CollisionShape3D.new()
	var sphere_shape = SphereShape3D.new()
	sphere_shape.radius = 25.0
	collision_shape.shape = sphere_shape
	collision_body.add_child(collision_shape)
	planet.add_child(collision_body)
	
	# Store planet data
	planet.set_meta(\"type\", \"planet\")
	planet.set_meta(\"can_land\", true)
	planet.set_meta(\"planet_type\", planet_type)
	
	add_child(planet)
	print(\"🌍 Created %s planet at close range\" % planet_type)
	return planet

func create_space_station(pos: Vector3) -> Node3D:
	var station = Node3D.new()
	station.name = \"TradingStation\"
	station.global_position = pos
	
	# Station main module
	var main_module = MeshInstance3D.new()
	main_module.name = \"MainModule\"
	var cylinder = CylinderMesh.new()
	cylinder.top_radius = 5.0
	cylinder.bottom_radius = 5.0
	cylinder.height = 15.0
	main_module.mesh = cylinder
	
	# Station material - bright and visible
	var material = StandardMaterial3D.new()
	material.albedo_color = Color(0.8, 0.8, 0.9)
	material.metallic = 0.8
	material.emission_enabled = true
	material.emission = Color(0.2, 0.6, 1.0)
	material.emission_energy = 2.0
	main_module.material_override = material
	
	station.add_child(main_module)
	
	# WORKING docking collision
	var collision_body = StaticBody3D.new()
	var collision_shape = CollisionShape3D.new()
	var cylinder_shape = CylinderShape3D.new()
	cylinder_shape.top_radius = 5.0
	cylinder_shape.bottom_radius = 5.0
	cylinder_shape.height = 15.0
	collision_shape.shape = cylinder_shape
	collision_body.add_child(collision_shape)
	main_module.add_child(collision_body)
	
	# Store station data
	station.set_meta(\"type\", \"station\")
	station.set_meta(\"can_dock\", true)
	station.set_meta(\"services\", [\"trading\", \"repair\", \"missions\"])
	
	add_child(station)
	print(\"🏭 Created trading station at close range\")
	return station

func create_asteroid(pos: Vector3, asteroid_id: int) -> Node3D:
	var asteroid = MeshInstance3D.new()
	asteroid.name = \"Asteroid_\" + str(asteroid_id)
	asteroid.global_position = pos
	
	# Asteroid mesh - visible box with rotation
	var box = BoxMesh.new()
	box.size = Vector3(4, 4, 4)
	asteroid.mesh = box
	asteroid.rotation = Vector3(randf(), randf(), randf())
	
	# Bright glowing material - easy to see
	var material = StandardMaterial3D.new()
	material.albedo_color = Color(0.6, 0.4, 0.2)
	material.emission_enabled = true
	material.emission = Color(1.0, 0.6, 0.2)  # Bright orange glow
	material.emission_energy = 1.5
	asteroid.material_override = material
	
	# WORKING mining collision
	var collision_body = StaticBody3D.new()
	var collision_shape = CollisionShape3D.new()
	var box_shape = BoxShape3D.new()
	box_shape.size = Vector3(4, 4, 4)
	collision_shape.shape = box_shape
	collision_body.add_child(collision_shape)
	asteroid.add_child(collision_body)
	
	# Store asteroid resources - GUARANTEED to work
	var metal_amount = randi_range(20, 50)
	var energy_amount = randi_range(10, 30)
	asteroid.set_meta(\"type\", \"asteroid\")
	asteroid.set_meta(\"mineable\", true)
	asteroid.set_meta(\"metal\", metal_amount)
	asteroid.set_meta(\"energy\", energy_amount)
	asteroid.set_meta(\"mining_health\", 100.0)
	
	add_child(asteroid)
	print(\"⛏️ Created mineable asteroid with %d metal, %d energy\" % [metal_amount, energy_amount])
	return asteroid

func spawn_mecha_at_player():
	\"\"\"Spawn mecha RIGHT next to player\"\"\"
	var mecha_pos = player.global_position + Vector3(5, 0, 0)
	current_mecha = create_working_mecha(mecha_pos)

func create_working_mecha(pos: Vector3) -> Node3D:
	var mecha = Node3D.new()
	mecha.name = \"WorkingMecha\"
	mecha.global_position = pos
	
	# Mecha body - simple but visible
	var body = MeshInstance3D.new()
	body.name = \"MechaBody\"
	var box = BoxMesh.new()
	box.size = Vector3(3, 4, 2)
	body.mesh = box
	
	# Mecha material - bright blue glow
	var material = StandardMaterial3D.new()
	material.albedo_color = Color(0.2, 0.4, 0.8)
	material.metallic = 0.9
	material.emission_enabled = true
	material.emission = Color(0.3, 0.5, 1.0)
	material.emission_energy = 1.5
	body.material_override = material
	
	mecha.add_child(body)
	
	# WORKING mecha collision for interaction
	var collision_body = StaticBody3D.new()
	var collision_shape = CollisionShape3D.new()
	var box_shape = BoxShape3D.new()
	box_shape.size = Vector3(3, 4, 2)
	collision_shape.shape = box_shape
	collision_body.add_child(collision_shape)
	body.add_child(collision_body)
	
	# Store mecha data
	mecha.set_meta(\"type\", \"mecha\")
	mecha.set_meta(\"can_pilot\", true)
	mecha.set_meta(\"hp\", 100)
	mecha.set_meta(\"energy\", 100)
	
	add_child(mecha)
	print(\"🤖 Mecha ready for piloting\")
	return mecha

func create_mining_beam():
	\"\"\"Create visible mining beam\"\"\"
	mining_beam = MeshInstance3D.new()
	mining_beam.name = \"MiningBeam\"
	
	# Beam mesh - cylinder
	var cylinder = CylinderMesh.new()
	cylinder.top_radius = 0.1
	cylinder.bottom_radius = 0.5
	cylinder.height = 20.0
	mining_beam.mesh = cylinder
	
	# Beam material - bright laser
	var material = StandardMaterial3D.new()
	material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA
	material.albedo_color = Color(1.0, 0.2, 0.2, 0.7)
	material.emission_enabled = true
	material.emission = Color(1.0, 0.1, 0.1)
	material.emission_energy = 3.0
	mining_beam.material_override = material
	
	mining_beam.visible = false
	add_child(mining_beam)

func _process(delta):
	find_nearest_target()
	update_mining(delta)
	update_ui()
	
	# Fast movement - 3x speed
	if player:
		player.move_speed = 15.0

func find_nearest_target():
	\"\"\"Find nearest interactable object\"\"\"
	if not player:
		return
	
	var closest_distance = 999999.0
	var closest_object = null
	
	# Check all objects in scene
	for child in get_children():
		if child == player or child == mining_beam:
			continue
			
		var distance = player.global_position.distance_to(child.global_position)
		if distance < closest_distance:
			closest_distance = distance
			closest_object = child
	
	nearest_target = closest_object
	
	# Show target info
	var ui = get_node_or_null(\"SpaceGameUI\")
	if ui and nearest_target:
		var target_label = ui.get_node_or_null(\"Stats/Target\")
		if target_label:
			var target_type = nearest_target.get_meta(\"type\", \"unknown\")
			target_label.text = \"Target: %s (%.0fm)\" % [target_type.capitalize(), closest_distance]

func update_mining(delta):
	\"\"\"Handle active mining\"\"\"
	if is_mining and nearest_target:
		mining_time += delta
		
		# Show mining beam
		if mining_beam:
			mining_beam.visible = true
			mining_beam.global_position = player.global_position
			mining_beam.look_at(nearest_target.global_position, Vector3.UP)
		
		# Mining progress every 0.5 seconds
		if mining_time >= 0.5:
			mining_time = 0.0
			perform_mining()
	else:
		if mining_beam:
			mining_beam.visible = false

func perform_mining():
	\"\"\"ACTUALLY mine resources - no fake functions\"\"\"
	if not nearest_target or not nearest_target.get_meta(\"mineable\", false):
		return
	
	# Get current resources from asteroid
	var current_metal = nearest_target.get_meta(\"metal\", 0)
	var current_energy = nearest_target.get_meta(\"energy\", 0)
	var mining_health = nearest_target.get_meta(\"mining_health\", 100.0)
	
	if current_metal <= 0 and current_energy <= 0:
		print(\"⛏️ Asteroid depleted!\")
		stop_mining()
		return
	
	# Mine resources - 5 per extraction
	var metal_mined = min(5, current_metal)
	var energy_mined = min(3, current_energy)
	
	# Add to player resources
	resources.metal += metal_mined
	resources.energy += energy_mined
	
	# Remove from asteroid
	nearest_target.set_meta(\"metal\", current_metal - metal_mined)
	nearest_target.set_meta(\"energy\", current_energy - energy_mined)
	nearest_target.set_meta(\"mining_health\", mining_health - 10.0)
	
	# Visual feedback - shrink asteroid
	if nearest_target.has_method(\"get_child\") and nearest_target.get_child_count() > 0:
		var mesh_instance = nearest_target.get_child(0)
		if mesh_instance is MeshInstance3D:
			var current_scale = mesh_instance.scale
			mesh_instance.scale = current_scale * 0.98
	
	print(\"⛏️ MINED: +%d metal, +%d energy | Total: %d metal, %d energy\" % [
		metal_mined, energy_mined, resources.metal, resources.energy
	])

func update_ui():
	if Engine.get_process_frames() % 10 == 0:
		var ui = get_node_or_null(\"SpaceGameUI\")
		if not ui:
			return
		
		# Update resources
		var resources_label = ui.get_node_or_null(\"Stats/Resources\")
		if resources_label:
			resources_label.text = \"Resources: Metal:%d Energy:%d Crystals:%d\" % [
				resources.metal, resources.energy, resources.crystals
			]
		
		# Update position
		var pos_label = ui.get_node_or_null(\"Stats/Position\")
		if pos_label and player:
			var pos = player.global_position
			pos_label.text = \"Position: (%.0f, %.0f, %.0f)\" % [pos.x, pos.y, pos.z]

func _input(event):
	if event is InputEventKey and event.pressed:
		match event.keycode:
			KEY_E:
				interact_with_target()
			KEY_SPACE:
				toggle_mining()
			KEY_M:
				toggle_mecha_pilot()
			KEY_T:
				fast_travel()
			KEY_F:
				if nearest_target:
					fly_to_target()

func interact_with_target():
	\"\"\"REAL interaction - no hidden functions\"\"\"
	if not nearest_target:
		print(\"❌ No target nearby\")
		return
	
	var target_type = nearest_target.get_meta(\"type\", \"unknown\")
	var distance = player.global_position.distance_to(nearest_target.global_position)
	
	if distance > 15.0:
		print(\"❌ Too far from %s (%.0fm away)\" % [target_type, distance])
		return
	
	match target_type:
		\"asteroid\":
			start_mining()
		\"station\":
			dock_at_station()
		\"planet\":
			land_on_planet()
		\"mecha\":
			enter_mecha()
		_:
			print(\"❌ Cannot interact with %s\" % target_type)

func start_mining():
	\"\"\"Start mining the target asteroid\"\"\"
	if not nearest_target.get_meta(\"mineable\", false):
		print(\"❌ Target not mineable\")
		return
	
	is_mining = true
	mining_time = 0.0
	print(\"⛏️ Started mining asteroid\")

func stop_mining():
	\"\"\"Stop mining\"\"\"
	is_mining = false
	if mining_beam:
		mining_beam.visible = false
	print(\"⛏️ Stopped mining\")

func toggle_mining():
	\"\"\"Toggle mining on/off\"\"\"
	if is_mining:
		stop_mining()
	else:
		if nearest_target and nearest_target.get_meta(\"type\") == \"asteroid\":
			start_mining()
		else:
			print(\"❌ No asteroid to mine\")

func dock_at_station():
	\"\"\"REAL docking with trading\"\"\"
	print(\"🏭 Docked at trading station\")
	
	# REAL trading - convert metal to crystals
	if resources.metal >= 10:
		var trade_amount = int(resources.metal / 10)
		resources.metal -= trade_amount * 10
		resources.crystals += trade_amount
		print(\"💰 TRADED: -%d metal, +%d crystals\" % [trade_amount * 10, trade_amount])
	else:
		print(\"❌ Need at least 10 metal to trade\")

func land_on_planet():
	\"\"\"REAL planet landing\"\"\"
	print(\"🌍 Landing on planet...\")
	
	# Move player to planet surface
	var landing_pos = nearest_target.global_position + Vector3(0, 30, 0)
	player.global_position = landing_pos
	
	# Give landing bonus resources
	resources.energy += 20
	print(\"🌍 LANDED! Found +20 energy on planet surface\")

func enter_mecha():
	\"\"\"REAL mecha piloting\"\"\"
	if mecha_equipped:
		# Exit mecha
		player.global_position = current_mecha.global_position + Vector3(3, 0, 0)
		mecha_equipped = false
		player.move_speed = 15.0
		print(\"🤖 Exited mecha - back to plasmoid\")
	else:
		# Enter mecha
		player.global_position = current_mecha.global_position
		mecha_equipped = true
		player.move_speed = 25.0  # Faster in mecha
		print(\"🤖 Piloting mecha - increased speed!\")

func toggle_mecha_pilot():
	\"\"\"Toggle mecha piloting\"\"\"
	if current_mecha:
		enter_mecha()
	else:
		print(\"❌ No mecha available\")

func fast_travel():
	\"\"\"REAL fast travel to nearest station\"\"\"
	for child in get_children():
		if child.get_meta(\"type\", \"\") == \"station\":
			var travel_pos = child.global_position + Vector3(0, 0, 10)
			player.global_position = travel_pos
			print(\"🚀 Fast traveled to station\")
			return
	print(\"❌ No station found for fast travel\")

func fly_to_target():
	\"\"\"Instantly fly to current target\"\"\"
	if nearest_target:
		var fly_pos = nearest_target.global_position + Vector3(0, 5, 8)
		player.global_position = fly_pos
		var target_type = nearest_target.get_meta(\"type\", \"unknown\")
		print(\"✈️ Flew to %s\" % target_type)
"

[sub_resource type="Environment" id="SpaceEnvironmentV2"]
background_mode = 1
background_color = Color(0.02, 0.02, 0.08, 1)
ambient_light_source = 2
ambient_light_color = Color(0.1, 0.1, 0.3, 1)
ambient_light_energy = 0.2
glow_enabled = true
glow_intensity = 0.5
glow_strength = 1.2

[sub_resource type="SphereMesh" id="PlasmoidMeshV2"]
radius = 0.5
height = 1.0

[sub_resource type="StandardMaterial3D" id="PlasmoidMaterialV2"]
transparency = 1
albedo_color = Color(0.3, 0.7, 1, 0.8)
emission_enabled = true
emission = Color(0.5, 0.8, 1, 1)
emission_energy = 2.0
rim_enabled = true
rim = 0.8

[sub_resource type="GDScript" id="StarfieldGeneratorV2"]
script/source = "extends Node3D

func _ready():
	create_close_starfield()

func create_close_starfield():
	# Only 50 stars - performance optimized
	for i in range(50):
		var star = MeshInstance3D.new()
		star.name = \"Star_%d\" % i
		
		# Stars in reasonable distance
		var distance = randf_range(200, 800)
		var theta = randf() * PI * 2
		var phi = randf() * PI
		
		star.position = Vector3(
			distance * sin(phi) * cos(theta),
			distance * sin(phi) * sin(theta),
			distance * cos(phi)
		)
		
		# Small bright star
		var sphere = SphereMesh.new()
		sphere.radius = randf_range(0.5, 1.5)
		sphere.height = sphere.radius * 2
		star.mesh = sphere
		
		# Bright material
		var material = StandardMaterial3D.new()
		var star_color = Color(1.0, 1.0, 1.0)
		material.albedo_color = star_color
		material.emission_enabled = true
		material.emission = star_color
		material.emission_energy = 2.0
		star.material_override = material
		
		add_child(star)
"

[sub_resource type="Theme" id="SpaceGameThemeV2"]

[node name="SPACE_GAME_ULTIMATE_V2" type="Node3D"]
script = SubResource("SpaceGameV2Controller")

[node name="Player" type="Node3D" parent="." groups=["players"]]
script = ExtResource("1")
move_speed = 15.0
float_height = 3.0
mouse_sensitivity = 0.002
interaction_range = 25.0

[node name="CameraPoint" parent="Player" instance=ExtResource("2")]

[node name="PlasmoidMesh" type="MeshInstance3D" parent="Player"]
mesh = SubResource("PlasmoidMeshV2")
surface_material_override/0 = SubResource("PlasmoidMaterialV2")

[node name="SpaceEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("SpaceEnvironmentV2")

[node name="StarField" type="Node3D" parent="."]
script = SubResource("StarfieldGeneratorV2")

[node name="SunLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.7, -0.5, 0.5, 0, 0.7, 0.7, -0.7, -0.5, 0.5, 0, 100, 0)
light_color = Color(1, 0.95, 0.8, 1)
light_energy = 0.6
shadow_enabled = true

[node name="SpaceGameUI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
theme = SubResource("SpaceGameThemeV2")

[node name="Title" type="Label" parent="SpaceGameUI"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -300.0
offset_top = 10.0
offset_right = 300.0
offset_bottom = 50.0
text = "SPACE GAME V2 - ALL FEATURES WORK | NO DEAD ENDS"
horizontal_alignment = 1

[node name="Stats" type="VBoxContainer" parent="SpaceGameUI"]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 10.0
offset_top = -160.0
offset_right = 450.0
offset_bottom = -10.0

[node name="Position" type="Label" parent="SpaceGameUI/Stats"]
layout_mode = 2
text = "Position: (0, 0, 0)"

[node name="Resources" type="Label" parent="SpaceGameUI/Stats"]
layout_mode = 2
text = "Resources: Metal:100 Energy:50 Crystals:10"

[node name="Target" type="Label" parent="SpaceGameUI/Stats"]
layout_mode = 2
text = "Target: None"

[node name="Status" type="Label" parent="SpaceGameUI/Stats"]
layout_mode = 2
text = "Status: Ready"

[node name="Controls" type="VBoxContainer" parent="SpaceGameUI"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -380.0
offset_top = 10.0
offset_right = -10.0
offset_bottom = 280.0

[node name="Movement" type="Label" parent="SpaceGameUI/Controls"]
layout_mode = 2
text = "🚀 SPACE GAME V2 - WORKING FEATURES 🚀

WASD - Fast flight (15 units/sec)
Mouse - Trackball camera
F - Fly to nearest target (instant)"

[node name="Actions" type="Label" parent="SpaceGameUI/Controls"]
layout_mode = 2
text = "E - Interact with target
SPACE - Toggle mining laser
M - Enter/exit mecha (+speed)
T - Fast travel to station

⛏️ MINING WORKS ⛏️ TRADING WORKS
🤖 MECHA WORKS 🚀 TRAVEL WORKS
🌍 LANDING WORKS - NO DEAD ENDS!"