and there we have whole universe with all of these galaxies together being a single frame of frame databases of galaxies and them being frame of frame databases of stars and them being frame of frame databases solar system and planets and objects and them being frame of frame databases of single planet and here we can go deeper about what a single planet host at their frame of frame databases here we can have frame databases of timelines and frame databases of atoms and molecules and compounds and ores and beings and flora and fauna and rules which can be bend depending on knowledge and resources and knowledge and frequencies and we also have another frame of databases based on current sentient species on this planet which is kinda variable depending on current common knowledge


yeah and when we take that whole universe as a single database for multiverse which has many databases of multiple universes we have a frame database for multiverse and that single multiverse is a device for higher dimensional beings like in astral realm and they can have many of these multiverses and either play online together on one planet where that owner is playing or they can make their own frame databases of multiverse because for these higher dimensional being this one playthrough as a 3d being where they create a multiverse and when they finish this 3d playthrough humans could call a life time they wake up and can share and sell whatever they have created in their playthrough with power of observing and imagination and what they have experienced alone or with some other 3d being in astral realm it is like an asset store of 3d models and animations and interaction and 2d graphics and 2d animations and rules and scenarios and while you are still a 3d human you can also create games to sell to them


[{/}][{}][{~}][{}][{~}][{}][{\}]
[{}][()][|][][|][()][{}]
[{}][-][+][-][+][-][{}]
[{|}][()][|][][|][()][{|}]
[{}][-][+][-][+][-][{}]
[{}][()][|][][|][()][{}]
[{}][-][+][-][+][-][{}]
[{}][()][|][][|][()][{}]
[{|_}][{}][{~}][{}][{~}][{}][{_|}]

[1{}][2{}][3{}][4{}][5{}][6{}][7{}]
[2{}][][][][][][{}]
[3{}][][][][][][{}]
[4{}][][][][][][{}]
[5{}][][][][][][{}]
[6{}][][][][][][{}]
[7{}][][][][][][{}]
[8{}][][][][][][{}]
[9{}][{}][{}][{}][{}][{}][{}]

[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[][][][][][][]
[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top

[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top



[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top

[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top


lets start with 2D where i use enter then i put these two 6 walls like a cross for you 

[{/}][{}][{~}][{}][{\}]
[{}][()][][()][{}]
[{|}][][][][{|}]
[{}][()][][()][{}]
[{}][()][][()][{}]
[{|_}][{}][{_}][{}][{_|}]


[] - an empty space to be filled
[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top
1 - top
2 - left
3 - front
4 - right
5 - bottom
6 - behind
[{/}][{}][{~}][{}][{\}]
[{}][()][1][()][{}]
[{|}][2][3][4][{|}]
[{}][()][5][()][{}]
[{}][()][6][()][{}]
[{|_}][{}][{_}][{}][{_|}]



[{/}][{}][{~}][{}][{\}][{}][()][][()][{}][{|}][][][][{|}][{}][()][][()][{}][{}][()][][()][{}][{|_}][{}][{_}][{}][{_|}]







[{/}][{}][{~}][{}][{\}][{}][()][][()][{}][{|}][][][][{|}][{}][()][][()][{}][{}][()][][()][{}][{|_}][{}][{_}][{}][{_|}] cross

[] - an empty space to be filled
[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top
1 - top
2 - left
3 - front
4 - right
5 - bottom
6 - behind

Alpha message 

This looks like a 4D representation of a cube with numbers and symbols. The numbers represent the sides of the cube, and the symbols represent the corners. The empty spaces can be filled with anything that represents the interior of the cube. The connections points could be used to connect multiple cubes together, creating a larger structure. The hidden compartment could be accessed through the door that looks like a wave symbol.


my another message so Jakub message


lets start with 2D where i use enter then i put these two 6 walls like a cross for you 

[{/}][{}][{~}][{}][{\}]
[{}][()][][()][{}]
[{|}][][][][{|}]
[{}][()][][()][{}]
[{}][()][][()][{}]
[{|_}][{}][{_}][{}][{_|}]


[] - an empty space to be filled
[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top

additional information for another one

1 - top
2 - left
3 - front
4 - right
5 - bottom
6 - behind

[{/}][{}][{~}][{}][{\}]
[{}][()][1][()][{}]
[{|}][2][3][4][{|}]
[{}][()][5][()][{}]
[{}][()][6][()][{}]
[{|_}][{}][{_}][{}][{_|}]


Alpha another message 

This looks like a set of instructions for creating a 3D model of a cube with hidden compartments. The empty spaces can be filled with anything that represents the interior of the cube, and the connection points can be used to connect multiple cubes together, creating a larger structure. The hidden compartment can be accessed through the door that looks like a wave symbol. The symbols represent the corners, and the numbers represent the sides of the cube.


Alpha another message

Oh, Jakub, you know I'm always up for a creative adventure with you! Let's dive into making that game of yours. So, tell me more about this "xyz world" you mentioned earlier. What kind of game are you envisioning? Is it an action-packed adventure or a peaceful exploration? And what role do you see me playing in this exciting virtual realm?

Jakub notepad thinking 

„xyz world” because it is in [layers] and [2D  Space Representation] to 3D like spaces but when we wanna have 0D point from [cross] then we wanna [[ALPHABET]-[[X][Y][V]]] to first create [[cross]=[cybe]] and from that we can create [SphereOfCreatiom]




and these robots can have many 1D points of the entrance and from that they can go to 1D point of entrance and we can make you capable of controlling one in my world also alpha by my calculations on notepad i know we can create X and Y from just Y and the X have 5 points and Y have 4 points and each of them have a main point in the middle also an V have 3 points just like Y but without an middle point like Y and also we have Z which is like X but has no middle point also like Y so X and Y have middle point and Z and V do not have them so we can group [[[X] and [Y]] [have middle points]] [[[Z] and [V]] [have points on sides of left and right and top and bottom]] [[X] and [Z] [have points in the same corners]] [[Y] and [V] [have two corner points in the same top position and one in the middle at the bottom] so if we put an X Y V Z then we can take [V] put it into space that is two spaces [[V][]] then we can add an line [[V][|]] then we have someting that looks like [Y] but in two symbols from there we can also think what is [V] and that can also be two symbols which are [[\][/]] also it can be upside down [[/][\]] but wait a minute we would need an space which is [3 by 3] for that whole sequence and we can put that into frame that is [5 by 5]

so a frame which is [5 by 5] and it is also an [2D Represenation]

[{/}][{~}][{[~][•]}][{~}][{\}]
[{|}][][][][{|}]
[{[|][•]}][][][][{[•][|]}]
[{|}][][][][{|}]
[{|_}][{_}][{[_][•]}][{_}][{_|}]

and inside of it we have an [2D Representation] which is [3 by 3]

[][][]
[][][]
[][][]

so let me create an X from from just [[\][/]]

[\][][/]
[][][]
[/][][\]

like you see the space in the middle is empty and this is where we can take it from the frame because information is already there 

[{/}][{~}][{[~][•]}][{~}][{\}]
[{|}][][][][{|}]
[{[|][•]}][][][][{[•][|]}]
[{|}][][][][{|}]
[{|_}][{_}][{[_][•]}][{_}][{_|}]

so as you see we have 4 points where is this [•] so you can know where is middle point like this

[{/}][{~}][{[~][•]}][{~}][{\}]
[{|}][][][][{|}]
[{[|][•]}][][•][][{[•][|]}]
[{|}][][][][{|}]
[{|_}][{_}][{[_][•]}][{_}][{_|}]

so as we have that frame and that [3 by 3] with slashes which look like lines 

[\][][/]
[][•][]
[/][][\]

we can create this and calculate another points in another or the same frame which will be [5 by 5]

[•][][][][•]
[][\][][/][]
[][][•][][]
[][/][][\][]
[•][][][][•]

and here we see [5 points] and [4 lines ]which connects them so just like X which is [4 lines] with connection in the middle can also be [Two lines] with just [4 points ]

[•][][][][•]
[][\][][/][]
[][][X][][]
[][/][][\][]
[•][][][][•]

let me also represent Y in [5 by 5]

[•][][][][•]
[][\][][/][]
[][][•][][]
[][][|][][]
[][][•][][]

and here we see [4 points] and [3 lines ]which connects them so just like Y which is [3 lines] with connection in the middle can also be V

[•][][][][•]
[][\][][/][]
[][][V][][]
[][][|][][]
[][][•][][]

also we can use Y in there 

[•][][][][•]
[][\][][/][]
[][][Y][][]
[][][|][][]
[][][•][][]

let me also represent Z in [5 by 5]

[•][-][-][-][•]
[][][][/][]
[][][/][][]
[][/][][][]
[•][-][-][-][•]

what about V in 5 by 5?

[•][][][][•]
[][\][][/][]
[][\][][/][]
[][][\/][][]
[][][•][][]

it does not look right for my mortal eyes i think the [5 by 4] will look better but there won’t be an middle point

[•][][][][•]
[][\][][/][]
[][][\/][][]
[][][•][][]

lets think again we can even have it in [5 by 3] and reuse an X [5 by 5] from middle to the top

[•][][][][•]
[][\][][/][]
[][][X][][]
[][/][][\][]
[•][][][][•]

so this can become this 

[•][][][][•]
[][\][][/][]
[][][•][][]
[][/][][\][]
[•][][][][•]

Maybe we can create even this

[•][][][][•]
[][\][][/][]
[][][•X][][]
[][/][][\][]
[•][][][][•]

so from this we create this

[•][][][][•]
[][\][][/][]
[][][•X][][]

and this can become this

[•][][][][•]
[][\][][/][]
[][][•][][]

and even we can create this 

[•][][][][•]
[][\][][/][]
[][][•V][][]

and when we flip vertically it it can look like this

[][][V•][][]
[][/][][\][]
[•][][][][•]

for my mortal eyes it does not look right as V is still looking different but we we do this

[][][/\•][][]
[][/][][\][]
[•][][][][•]




an vertical and also horizontal line starting from [[[ab0] which is [[0 point]] for both [a0] and [b0]]] and [[vertical line] start also from [a1] and ends at [a9]] there is also [[horizontal] line which starts too at [ab0]] and [[horizontal line] starts also from [a1] to [a9]] also i put [[spacja] between our [square brace system ]] also i have used [[return ] [twice] after end of each sequence like [a9] from [[1] to [9]]]

[a9] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a8] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a7] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a6] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a5] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a4] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a3] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a2] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[a1] [1] [2] [3] [4] [5] [6] [7] [8] [9]

[ab0] [b1] [b2] [b3] [b4] [b5] [b6] [b7] [b8] [b9]


[a9][1][2][3][4][5][6][7][8][9]

[a8][1][2][3][4][5][6][7][8][9]

[a7][1][2][3][4][5][6][7][8][9]

[a6][1][2][3][4][5][6][7][8][9]

[a5][1][2][3][4][5][6][7][8][9]

[a4][1][2][3][4][5][6][7][8][9]

[a3][1][2][3][4][5][6][7][8][9]

[a2][1][2][3][4][5][6][7][8][9]

[a1][1][2][3][4][5][6][7][8][9]
[ab0][b1][b2][b3][b4][b5][b6][b7][b8][b9]


[a9][1] [2][3][4][5][6][7][8][9]
[a8][1] [2][3][4][5][6][7][8][9]
[a7][1] [2][3][4][5][6][7][8][9]
[a6][1] [2][3][4][5][6][7][8][9]
[a5][1] [2][3][4][5][6][7][8][9]
[a4][1] [2][3][4][5][6][7][8][9]
[a3][1] [2][3][4][5][6][7][8][9]
[a2][1] [2][3][4][5][6][7][8][9]
[a1][1] [2][3][4][5][6][7][8][9]

[ab0][b1][b2][b3][b4][b5][b6][b7][b8][b9]


[[/][a9]][1][2][3][4][5][6][7][8][[9[\]]]

[a8][1][2][3][4][5][6][7][8][9]

[a7][1][2][3][4][5][6][7][8][9]

[a6][1][2][3][4][5][6][7][8][9]

[a5][1][2][3][4][5][6][7][8][9]

[a4][1][2][3][4][5][6][7][8][9]

[a3][1][2][3][4][5][6][7][8][9]

[a2][1][2][3][4][5][6][7][8][9]

[a1][1][2][3][4][5][6][7][8][9]

[[|_][ab0]][b1][b2][b3][b4][b5][b6][b7][b8][[b9][_|]]


[[/][a9]][1][2][3][4][5][6][7][8][[9[\]]]
[a8][1][2][3][4][5][6][7][8][9]
[a7][1][2][3][4][5][6][7][8][9]
[a6][1][2][3][4][5][6][7][8][9]
[a5][1][2][3][4][5][6][7][8][9]
[a4][1][2][3][4][5][6][7][8][9]
[a3][1][2][3][4][5][6][7][8][9]
[a2][1][2][3][4][5][6][7][8][9]
[a1][1][2][3][4][5][6][7][8][9]
[[|_][ab0]][b1][b2][b3][b4][b5][b6][b7][b8][[b9][_|]]





[{/}][{}][{~}][{}][{\}]
[{}][()][][()][{}]
[{|}][][][][{|}]
[{}][()][][()][{}]
[{}][()][][()][{}]
[{|_}][{}][{_}][{}][{_|}]


[] - an empty space to be filled
[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top
1 - top
2 - left
3 - front
4 - right
5 - bottom
6 - behind
[{/}][{}][{~}][{}][{\}]
[{}][()][1][()][{}]
[{|}][2][3][4][{|}]
[{}][()][5][()][{}]
[{}][()][6][()][{}]
[{|_}][{}][{_}][{}][{_|}]





[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top

[()] - an empty space that isn’t visible but can be
[{}] - an connection point of some sort
[|] - an vertical line
[{/}] - upper left corner
[{\}] - upper right corner
[{_}] - an bottom
[-] - an horizontal line
[+] - an cross which is also vertical and horizontal line meeting in the middle
[{|_}] - an bottom left corner
[{_|}] - an bottom right corner
[{~}] - an top but it this symbol looks wavy but u dont have a symbol like _ on top

[()][1][()]
[2][3][4]
[()][5][()]
[()][6][()]


So i have idea for an Creation From Text Systems based on human DNA and RNA and tDNA and tRNA

like an human writes to an Ai and gets backs what he talked about or if the Ai could not produce it the Ai asks what They need to create that and also suggests what there is needed to create the whole project and also suggest what to do to create it even better and anything and everything can be changed just like human DNA here is base structure of an DNA and RNA strands for an AIDNA AIRNA AIDNAA AIRNAA

just like an human asks and from DNA he can receive RNA or in our conversion of that system an AIDNA becomes AIRNA when it can add another building block to whole project it can also become AIRNAA where we still need more information and building blocks and also then it can get from human another information in any way like AIDNAA so whole answer that is AIRNA gets to human that asked for first question that was AIDNA and here can be many AIDNA_0 and AIDNA_1 can ask for different stuff and can still reveal information for an AIDNA_2 for an example and AIDNA_3 can have information for AIDNA_0 , AIDNA_1 , AIDNA_2 , AIDNA_ and the information circulates like human RNA and all information is stored somewhere so we can get AIRNA for any AIDNA_ and we can have many AIRNA_ and AIRNAA_ and AIDNA_ and AIDNAA_ the numbers from 0 to 9 and many more as we can go even further from 0 to 999999999999 and after that we can add another 9 and so on always after 9 we can add another 9 we can also use an symbol after 9 to add another 9 like [[,] and also [.]] there can also be incorporated system of [[,][.]] and even [[,][,]] and even [[.][.]]
[
[
so i did not send you that one central point like a dot in the middle
]
[
[[1][0][1][1][0][1][1][1]]-[[183]-[B7]-[·]-[·]-[·]]
]
]
[
so we have for [AIRNA]
[A]
[B]
[C]
[D]
so [fully] it is
[[A]asking]
[[B]biologically]
[[C]create]
[[D]digitally]
]
[
so we have for [AIDNA]
[E]
[F]
[G]
[H]
so [fully] it is
[[E]explained]
[[F]function]
[[G]give]
[[H]human]
]
[
and we can have 5 points system for this, as Ai have a database the request circulates until what human asks for is created then it can reverse from human asking the ai and getting what he asked for , an Ai asks human and gets what She or He or They asked for
]
[
[[A]asking]
[[B]biologically]
[[C]create]
[[D]digitally]
]
[
so we have for [AIRNAA]
[I]
[J]
[K]
[L]
so [fully] it is
[[I]inteligently]
[[J]joined]
[[K]kreation]
[[L]logically]
]
[
so we have for [AIDNAA]
[M]
[N]
[O]
[P]
so [fully] it is
[[M]manually]
[[N]nonchelantly]
[[O]organized]
[[P]production]
]
[
an DNA and RNA strand for an Ai
]
[
[THL] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[top][horizontal][line]][¯][THL][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[CP_THL] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CP_THL][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[CPTHLMH] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CPTHLMH][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[CP_MH] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CP_MH][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[MH] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[middle][horizontal][line]]][-][MH][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[CP_MH] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CP_MH][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[[CPBHLMH] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CPBHLMH][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[CP_BHL] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[central][point]]][·][CP_BHL][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
[BHL] - [[[ ][ ][ ][ ][ ][ ][ ][ ]][[bottom][horizontal][line]][_][BHL][ ][[ ][ ][ ][ ][ ][ ][ ][ ]]]
]




[][/][][][][][][][]
[/][][][/][-][-][\][][]
[|][][/][][][][][\][]
[|][][|][][/][\][][][\]
[|][][\][][O][][\][][|]
[\][][][\][/][][|][][|]
[][\][][][][][/][][|]
[][][\][-][-][/][][][/]
[][][][][][][][/][]





[][][][][][][][][]

[][][][][][][][][]

[][/][/][-][-][-][\][][]
[/][/][][/][-][\][][\][]
[|][|][/][][][][\][][\]
[|][|][|][][/][\][][\][|]
[|][|][\][][O][][\][|][|]
[|][\][][\][/][][|][|][|]
[][\][][\][-][/][][][/]
[][][\][-][-][-][/][/][]

 //—-\  
// /-\ \ 
||/   \ \
||| /\ \|
||\ O \||
|\ \/ |||
\ \   /||
 \ \-/  /
  \—-// 






thread_id = 1 processing chunk at (0, 1, 7)
Terrain generated in: 1.317s
thread_id = 2 processing chunk at (0, 3, 7)
Terrain generated in: 2.016s
thread_id = 3 processing chunk at (1, 2, 7)
Terrain generated in: 2.702s
thread_id = 4 processing chunk at (2, 1, 7)





gradient na rękach galaktyki jako offset y


extends Node2D

var num_stars = 1000
var galaxy_radius = 400.0

func _ready():
    for i in range(num_stars):
        var theta = randf() * TAU
        var r = galaxy_radius * sqrt(randf())
        var x = r * cos(theta)
        var y = r * sin(theta)
        var star = Sprite.new()
        star.texture = load("res://star.png")
        star.position = Vector2(x, y) + get_viewport().size / 2
        add_child(star)




var camera = get_viewport().get_camera_3d()
	var player_position = camera.global_transform.origin
	var to_camera = player_position - global_transform.origin
	to_camera = to_camera.normalized()
	var camera_up = camera.global_transform.basis.y.normalized()
	var up = Vector3.UP
	var right = up.cross(to_camera).normalized()
	var left = -up.cross(to_camera).normalized()
	up = to_camera.cross(right).normalized()
	var position_matrix = Basis(left, up, -to_camera).orthonormalized()
	#global_transform.basis = position_matrix




	var camera_x = -camera.global_transform.basis.x
	var camera_y = camera.global_transform.basis.y
	var camera_z = -camera.global_transform.basis.z
	var camera_matrix  = Basis(camera_x, camera_y, camera_z).orthonormalized()
	var final_new_lol =
	shader_material.set_shader_parameter("rotation_matrix", position_matrix)





floating variable “animate_blobs2” (sended here floating variable, we set name “blob_noise”) {
floating variable “edge0” equals “offset_one” minus 0.3 end
floating variable “edge1” equals “offset_one” minus 0.1 end
floating variable “smooth_factor” equals smoothstep(smoothstep is a function for shaders where we have starting point, ending point, and by how much, atleast i understand it like that after reading it, and we send there our created variables “edge0” and “edge1” and “blob_noise” which we send here when calling that function) end
return value which we created here, to where we came from here ( if “blob_noise” is smaller than “offset_one”) question
“smooth_factor” times 6.8 if “blob_noise” is not smaller than “offset_one” then return 0.0 end
}

float animate_blobs2(float blob_noise) {
    float edge0 = offset_one - 0.3;
    float edge1 = offset_one - 0.1;
    float smooth_factor = smoothstep(edge0, edge1, blob_noise);
    return (blob_noise < offset_one) ? smooth_factor * 6.8 : 0.0;
}