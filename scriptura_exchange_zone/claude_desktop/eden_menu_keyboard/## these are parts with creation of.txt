## these are parts with creation of files, checking folders, directories, amounts, what os it is on etc, creating files too
## we might still need some more of it, for it
#      oooo  .oooooo..o ooooo   ooooo 
#      `888 d8P'    `Y8 `888'   `888' 
#       888 Y88bo.       888     888     ┏┓ ┓         ┓  ┏┓•┓     ┳┳┓                    ┏┓         
#       888  `"Y8888o.   888ooooo888     ┣ ╋┣┓┏┓┏┓┏┓┏┓┃  ┣ ┓┃┏┓┏  ┃┃┃┏┓┏┓┏┓┏┓┏┓┏┳┓┏┓┏┓╋  ┗┓┓┏┏╋┏┓┏┳┓
#       888      `"Y88b  888     888     ┗┛┗┛┗┗ ┛ ┗ ┗┻┗  ┻ ┗┗┗ ┛  ┛ ┗┗┻┛┗┗┻┗┫┗ ┛┗┗┗ ┛┗┗  ┗┛┗┫┛┗┗ ┛┗┗
#       888 oo     .d8P  888     888                                        ┛               ┛       
#   .o. 88P 8""88888P'  o888o   o888o 
#   `Y888P                            


# JSH Ethereal Files Management System
#

																			 
#                                                                  ,,    ,,                  
#   .g8"""bgd                          mm               `7MM"""YMM db  `7MM                  
# .dP'     `M                          MM                 MM    `7       MM                  
# dM'       ``7Mb,od8 .gP"Ya   ,6"Yb.mmMMmm .gP"Ya        MM   d `7MM    MM  .gP"Ya  ,pP"Ybd 
# MM           MM' "',M'   Yb 8)   MM  MM  ,M'   Yb       MM""MM   MM    MM ,M'   Yb 8I   `" 
# MM.          MM    8M""""""  ,pm9MM  MM  8M""""""       MM   Y   MM    MM 8M"""""" `YMMMa. 
# `Mb.     ,'  MM    YM.    , 8M   MM  MM  YM.    ,       MM       MM    MM YM.    , L.   I8 
#   `"bmmmd' .JMML.   `Mbmmd' `Moo9^Yo.`Mbmo`Mbmmd'     .JMML.   .JMML..JMML.`Mbmmd' M9mmmP' 
# Create Files

func file_creation(file_content,  path_for_file, name_for_file):
	var file = FileAccess.open( path_for_file + "/" + name_for_file + ".txt", FileAccess.WRITE)
	if file:
		for line in file_content:
			file.store_line(line) 

func create_file(array_with_data: Array, lines_amount: int, name_for_file: String):
	var file = FileAccess.open(path + "/" + name_for_file + ".txt", FileAccess.WRITE)
	if file:
		for line in range(lines_amount):
			file.store_line(array_with_data[line][0]) 
		file_path = path + "/" + name_for_file + ".txt"

func save_file_list_text(scan_results: Dictionary, output_file: String, target_directory: String):
	var file = FileAccess.open(output_file, FileAccess.WRITE)
	if not file:
		print("❌ Error: Could not create file_list.txt")
		return
	file.store_line("📂 File List for " + target_directory + "\n") # Fixed scope issue
	for subdir in scan_results["directories"]:
		file.store_line("📁 " + subdir)
	for file_data in scan_results["files"]:
		file.store_line("📄 " + file_data["name"] + " - " + str(file_data["size"]) + " bytes")
	file.close()
	print("✅ File list saved to: " + output_file)

func create_default_settings(file_path_c_d_s):
	var settings_data = []
	for entry in SettingsBank.settings_file_blue_print_0[0]:
		settings_data.append(entry)
	create_file(settings_data, settings_data.size(), "settings")

func save_file_list_json(scan_results: Dictionary, output_file: String = "user://file_list.json"):
	var file = FileAccess.open(output_file, FileAccess.WRITE)
	if file:
		var json_data = JSON.stringify(scan_results, "\t")  
		file.store_string(json_data)
		file.close()
		print("✅ File list saved to: " + output_file)

# Check Files

#               ,,                                                ,,    ,,                  
#   .g8"""bgd `7MM                       `7MM          `7MM"""YMM db  `7MM                  
# .dP'     `M   MM                         MM            MM    `7       MM                  
# dM'       `   MMpMMMb.  .gP"Ya   ,p6"bo  MM  ,MP'      MM   d `7MM    MM  .gP"Ya  ,pP"Ybd 
# MM            MM    MM ,M'   Yb 6M'  OO  MM ;Y         MM""MM   MM    MM ,M'   Yb 8I   `" 
# MM.           MM    MM 8M"""""" 8M       MM;Mm         MM   Y   MM    MM 8M"""""" `YMMMa. 
# `Mb.     ,'   MM    MM YM.    , YM.    , MM `Mb.       MM       MM    MM YM.    , L.   I8 
#   `"bmmmd'  .JMML  JMML.`Mbmmd'  YMbmd'.JMML. YA.    .JMML.   .JMML..JMML.`Mbmmd' M9mmmP' 

# Check Files
####################


func find_or_create_eden_directory():
	var available_dirs = scan_available_storage()
	for dir in available_dirs:
		if DirAccess.dir_exists_absolute(dir + "/Eden"):
			return dir + "/Eden"
	var target_dir = available_dirs[0] + "/Eden"
	DirAccess.make_dir_recursive_absolute(target_dir)
	return target_dir
####################
	
func file_finder(file_name, path_to_file, list_of_files, type_of_data):
	var counter_liste = list_of_files.size()
	var counter_times : int = 0
	for file in list_of_files:
		if file == file_name:
			file_path = path_to_file + "/" + file
####################

func check_folder(folder_path):
	var space_existence = DirAccess.open(folder_path)
	if space_existence:
		check_folder_content(space_existence)
		directory_existence = true
	else:
		pass

func check_folder_content(directory):  
	files_content = directory.get_files()     
	folders_content = directory.get_directories() 
	if files_content.size() > 0:
		files_existence = true
	else:
		files_existence = false
	if folders_content.size() > 0:
		folders_existence = true
	else:
		folders_existence = false



############




func scan_available_storage():
	if OS.get_name() == "Windows":
		for ascii in range(65, 91):
			var drive = char(ascii) + ":/"
			var dir = DirAccess.open(drive)
			if dir != null:
				available_directiories.append(drive)
	elif OS.get_name() == "Android":
		var common_paths = [
			"/storage/emulated/0/", 
			"/sdcard/",              
			"/storage/"              
		]
		for path_s_a_s in common_paths:
			var dir = DirAccess.open(path)
			if dir != null:
				if path_s_a_s == "/storage/":
					var contents = dir.get_directories()
					for storage in contents:
						print("Storage device found: /storage/" + storage)
	return available_directiories





func scan_directory_with_sizes(directory: String, indent: int = 0) -> Dictionary:
	var dir = DirAccess.open(directory)
	var scan_results = {
		"files": [],        
		"directories": [],  
		"status": "pending"
	}
	if dir:
		scan_results["status"] = "completed"
		for subdir in dir.get_directories():
			scan_results["directories"].append(subdir)
			scan_results[subdir] = scan_directory_with_sizes(directory.path_join(subdir), indent + 1)
		for file in dir.get_files():
			var full_path = directory.path_join(file)
			var file_size = 0  
			var file_access = FileAccess.open(full_path, FileAccess.READ)
			if file_access:
				file_size = file_access.get_length()
				file_access.close()  
			var file_entry = {
				"name": file,
				"size": file_size
			}
			scan_results["files"].append(file_entry)  
	else:
		scan_results["status"] = "failed"
	return scan_results

func get_data_structure_size(data) -> int:
	if data == null:
		return 0
	match typeof(data):
		TYPE_DICTIONARY:
			var total_size = 0
			for key in data:
				total_size += var_to_bytes(key).size()
				if data[key] != null:
					total_size += get_data_structure_size(data[key])
			return total_size
		TYPE_ARRAY:
			var total_size = 0
			for item in data:
				if item != null:
					total_size += get_data_structure_size(item)
			return total_size
		TYPE_OBJECT:
			if data is Node:
				return 8  
			return var_to_bytes(data).size()
		TYPE_STRING:
			return data.length() * 2  
		TYPE_INT:
			return 4
		TYPE_FLOAT:
			return 8
		TYPE_VECTOR2, TYPE_VECTOR2I:
			return 8
		TYPE_VECTOR3, TYPE_VECTOR3I:
			return 12
		_:
			return var_to_bytes(data).size()