# JSH Ethereal Engine
## to be checked, might need few mutexes, basic first state before interacted stuff
## it have its own files, of global variants
	metadata_global_variants
	metadata_global_variants_update


# JSH Ethereal Engine Initialization process
## the godot _init function
	func _init():
## our functions
	func first_turn_validation() -> Dictionary:
	func test_init() -> Dictionary:
	func validate_system_environment() -> Dictionary:
	func validate_thread_system() -> Dictionary:
	func _setup_retry_timer():
	func _on_retry_timer_completed(timer_id: String):
	func check_status():
	func check_status_just_timer():

# JSH Ethereal Engine Start up
## the _ready godot function
	func _ready():

# JSH Ethereal Engine Repair
## mostly stuff from Claude now
	func track_task_status(task_id):
	func track_task_completion(task_id):
	func handle_task_timeout(task_id):
	func clear_task_queues():
	func validate_container_state(container_name):
	func attempt_container_repair(container_name, missing_nodes):
	func log_error_state(error_type, details):
	func start_health_checks():
	func check_system_health():
## main functions i guess are needed, they from me
	func prepare_akashic_records():
	func zippy_unzipper_data_center():
	func handle_random_errors():
	func reanimate_all_handles_and_breaks():
	func breaks_and_handles_check():
	func before_time_blimp(how_many_finished, how_many_shall_been_finished):
## more from Claude stuff
	func recreate_node_from_records(container_name: String, node_type: String, records: Dictionary):
	func trigger_deep_repair(error_type: String):
	func reanimate_all_handles_and_breaks():
## FUNCTIONS FROM Alpha
	func unlock_stuck_mutexes():
	func queue_pusher_adder(task):
	func handle_creation_task(target_argument):
	func handle_unload_task(target_argument):

# JSH Ethereal Engine check stuff before we proceed
## hmm we didnt use too many of this thing yet
## these are from me
	func the_current_state_of_tree(set_name_now, the_state):
	func check_if_first_time(set_name_first, the_current_of_energy):
	func connect_containers(container_name_0, container_name_1):
	func containers_list_creator():
	func containers_states_checker():


# JSH Etheric Download System
## just an idea, kinda already done in one way? task create from main to datapoint,data send
## i think it was some of magic in hidden veil

# JSH Etheric Queue
## from me
	func three_stages_of_creation(data_set_name):
	func check_currently_being_created_sets():
	func process_stages():
	func the_finisher_for_nodes(data_to_be_parsed):
	func jsh_tree_get_node_status_changer(node_path_jsh_tree_status: String, node_name: String, node_to_check: Node):
	func start_timer_of_finito(data_timero):
	func recreate_missing_nodes(array_of_recreation):
	func recreator_of_singular_thing(data_set):
	func unload_node_branch(path_for_node_to_unload, recreation_of_node_data):
	func disable_all_branches_reset_counters(branch_to_disable, container_name_for_array):
	func first_stage_of_creation_(data_set_name_0, sets_to_create_0):
	func second_stage_of_creation_(data_set_name_1, sets_to_create_1):
	func second_impact_for_real(set_to_do_thingy):
	func third_stage_of_creation_(data_set_name_2, sets_to_create_2):
	func third_impact_right_now(data_set_thingiess):
	func fourth_impact_of_creation_(data_set_name_3, sets_to_create_3):
	func fourth_impact_right_now(data_set_nameeee):
	func fifth_impact_of_creation_(data_set_name_4, sets_to_create_4):
	func fifth_impact_right_now(data_set_nameeeeee):
	func newer_even_function_for_dictionary(name_of_container):

# JSH Records System
## from me
	func container_finder(set_name):
	func tasked_children(node_to_be_added, node_to_be_added_path):
	func task_to_send_data_to_datapoint(data_for_sending):

# JSH Scene Tree
## from me mostly, or very edited
	func disable_all_branches(branch_to_disable):
	func find_branch_to_unload(thing_path):
	func cache_tree_branch_fully(container_to_unload):
	func cache_branch(branch_name, child_name, branch_part):
	func start_up_scene_tree():
## this one is kinda horror, could be way easier one day
	func the_pretender_printer(node_name: String, node_path_jsh_tree: String, godot_node_type, node_type: String = "Node3D"):
## or was it this one
	func print_tree_structure(branch: Dictionary, indent: int = 0):
## this one kinda works now
	func jsh_tree_get_node(node_path_get_node: String) -> Node:

# JSH Multi Threads
## for now just one function, i guess we have several ones, connected to it, that are usable, and we must move them
	func create_new_task(function_name: String, data):

# JSH Files Management
## i dont create files for past two months, dunno, what kind of files i will need now, kinda to rebuild probably
	func create_file(array_with_data: Array, lines_amount: int, name_for_file: String):
	func file_finder(file_name, path_to_file, list_of_files, type_of_data):
	func check_folder(folder_path):
	func check_folder_content(directory):
	func check_settings_file():
	func file_creation(file_content,  path_for_file, name_for_file):
	func setup_settings():
	func find_or_create_eden_directory():
	func create_default_settings(file_path_c_d_s):
	func scan_available_storage():

# JSH Memories Management
## here we were, recreating stuff? loading stuff? it worked fine for a long time, and we now understand, more
## i think, here we created active records set
	func new_function_for_creation_recovery(record_type_now, first_stage_of_creation_now, stage_of_creation_now):
	func initialize_menu(record_type: String):
	func find_record_set(record_type: String) -> Dictionary:
	func find_instructions_set(record_type: String) -> Dictionary:
	func find_scene_frames(record_type: String) -> Dictionary:
	func find_interactions_list(record_type: String) -> Dictionary:

# JSH Memories Transcription
## here we can read what is already active or cached?
	func recreator(number_to_add, data_to_process, data_set_name, new_name_for_set)
	func find_highest_in_array(numbers: Array) -> int:
	func load_record_set(records_part: String, record_type: String, type_of_data : int, records : Dictionary) -> void:
	func read_records_data(record_set : Dictionary, records_set_name):
	func process_active_records_for_tree(active_records: Dictionary, set_name_to_process : String, container_name_here : String):
	func deep_copy_dictionary(original: Dictionary) -> Dictionary:
	func unload_record_set(records_sets_name : String, record_type: String) -> void:
	func cache_data(records_sets_name: String, record_type: String, data, meta_data) -> void:
	func clean_oldest_dataset() -> void:
	func get_dictionary_memory_size(dict: Dictionary) -> int:
	func get_cache_total_size() -> int:
	func get_record_type_id(record_type: String) -> int:

# JSH Hidden Veil
## here we have process delta function
## a lot of new things got put in there, while i think
## we shall move most of them to their place
	func the_fourth_dimensional_magic(type_of_operation : String, node : Node, data_of_movement):
	func fifth_dimensional_magic(type_of_unloading : String, node_path_for_unload : String):
	func sixth_dimensional_magic(type_of_function, node_to_call, function_name : String, additional_data = null):
	func call_some_thingy():
	func each_blimp_of_delta():
	func attempt_creation(set_name: String) -> CreationState:
## the important part
	func _process(delta):
## and rest of stuff, also probablt to move somewhere
	func whip_out_set_by_its_name(set_name_to_test) -> CreationStatus:
	func process_turn_0(delta: float) -> Dictionary:
	func check_system_state(state_name: String) -> SystemState:
	func set_system_state(state_name: String, new_state: SystemState) -> bool:
	func is_creation_possible() -> bool:
	func record_mistake(mistake_data: Dictionary):
	func update_delta_history(delta: float):
	func check_first_time_status(status_name: String) -> bool:
	func process_creation_request(set_name: String) -> Dictionary:
	func get_data_structure_size(data) -> int:
	func get_jsh(property_name: String):
	func check_memory_state():
	func clean_array(array_name: String):
	func clean_dictionary(dict_name: String):
	func check_thread_status():
	func check_thread_status_type():
## that one will probably be in time stuff, we dont have time stuff yet
	func calculate_time(delta_current, time, hour, minute, second):

# JSH Projections System
## user inputs, keyboard, mouse, movement or current status of some device
	func _input(event: InputEvent):
	func get_ray_points(mouse_position: Vector2):
	func ray_cast_data_preparer(data_ray_cast):
	func multi_threaded_ray_cast(result, to, from):
	func secondary_interaction_after_rc(array_of_data):
	func unload_container(container_to_unload):
	func process_to_unload_records(container_name_to_unload):

# JSH Memories Storage
## here we load stuff from storage, name to change probably, who knows we need it anyway to store records to cache
## oh wait it only have one function, probably should been somewhere elese
	func unload_nodes(array_of_thingiess_that_shall_remain):

# JSH Memories Processed
## memories already processed and ready to be used
	func load_cached_data(data_set: String):
	func load_cached_data_second_impact(data_set: String):
	func interactions_upload_to_datapoint(header_line, information_lines, datapoint):
	func scene_frames_upload_to_datapoint(header_line, information_lines, datapointi, containeri):
	func instructions_analiser(metadata_parts, second_line, third_line, datapoint, container):
	func assign_things_to_datapoint():

# JSH Things Creation
## here we are creating data, for things on the scene
	func analise_data(thing_name_, type, data_to_analyze, second_part, group_number, verion_of_thing, information_lines_parsed):
## after we know where to send it, it goes there
## i guess i found two functions to move already? some to generate a color
	func create_circle_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func generate_circle_points(radius: float, num_points: int) -> Array:
	func create_flat_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_text_label(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_array_mesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_textmesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_button(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_cursor(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_connection(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_screen(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_datapoint(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func create_container(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array):
	func get_spectrum_color(value: float) -> Color:

# JSH Scene Tree Add Nodes, Physical and Astral Bodies
## here we send tasks, to create nodes, i guess we also done it in thingy before, for few things? if it was some special case, we will need to normalize things here too, i guess
	func node_creation(node_name, crafted_data, coords, to_rotate, group_number, node_type, path_of_thing):
	func add_collision_to_thing(thing_node, node_type, path_of_thingy, name_of_thingy):