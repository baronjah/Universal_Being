@tool
extends SceneTree

# CLI script for generating games from the command line
# Usage: godot --path "/project/path" --headless --script "scripts/cli/generate_game.gd" --config-file "/path/to/config.json"

const DEFAULT_TEMPLATE = "2d_platformer"
const TEMPLATES_PATH = "res://templates/games/"
const DEFAULT_OUTPUT_DIR = "res://generated_games/"

var config = {
	"name": "UntitledGame",
	"template": DEFAULT_TEMPLATE,
	"output_dir": DEFAULT_OUTPUT_DIR,
	"description": "",
	"version": "1.0.0",
	"author": "Luminous OS"
}

func _initialize():
	print("Luminous OS Game Generator CLI")
	print("==============================")
	
	# Parse command line arguments
	var arguments = OS.get_cmdline_args()
	var config_file_path = ""
	
	for i in range(arguments.size()):
		if arguments[i] == "--config-file" and i + 1 < arguments.size():
			config_file_path = arguments[i + 1]
			break
	
	if config_file_path.is_empty():
		printerr("Error: No config file specified. Use --config-file parameter.")
		quit(1)
		return
	
	# Load configuration
	if not load_config(config_file_path):
		quit(1)
		return
	
	print("Generating game: %s" % config.name)
	print("Template: %s" % config.template)
	print("Output directory: %s" % config.output_dir)
	
	# Generate the game
	if generate_game():
		print("Game generated successfully!")
		quit(0)
	else:
		printerr("Failed to generate game.")
		quit(1)

func load_config(file_path):
	# Load configuration from JSON file
	var file = FileAccess.open(file_path, FileAccess.READ)
	if file == null:
		printerr("Error: Could not open config file: %s" % file_path)
		return false
	
	var json_text = file.get_as_text()
	file.close()
	
	var json = JSON.new()
	var error = json.parse(json_text)
	if error != OK:
		printerr("Error parsing JSON: %s at line %d" % [json.get_error_message(), json.get_error_line()])
		return false
	
	var data = json.get_data()
	if typeof(data) != TYPE_DICTIONARY:
		printerr("Invalid config format. Expected JSON object.")
		return false
	
	# Update config with loaded values
	for key in data:
		config[key] = data[key]
	
	return true

func generate_game():
	# Create output directory
	var dir = DirAccess.open("res://")
	if dir == null:
		printerr("Error: Could not access project directory.")
		return false
	
	var output_path = config.output_dir.path_join(config.name)
	
	# Create directories
	if not dir.dir_exists(output_path):
		var err = dir.make_dir_recursive(output_path)
		if err != OK:
			printerr("Error creating output directory: %s" % output_path)
			return false
	
	# Get template path
	var template_path = TEMPLATES_PATH.path_join(config.template)
	if not dir.dir_exists(template_path):
		printerr("Error: Template not found: %s" % template_path)
		return false
	
	# Copy template files to output directory
	if not copy_directory(template_path, output_path):
		return false
	
	# Generate project.godot file
	if not generate_project_file(output_path):
		return false
	
	# Generate main scene if needed
	if not dir.file_exists(output_path.path_join("main.tscn")):
		if not generate_main_scene(output_path):
			return false
	
	# Create a game_info.json file with metadata
	if not generate_game_info(output_path):
		return false
	
	return true

func copy_directory(from_dir, to_dir):
	var dir = DirAccess.open(from_dir)
	if dir == null:
		printerr("Error: Could not access template directory: %s" % from_dir)
		return false
	
	# Create destination directory if it doesn't exist
	var dest_dir = DirAccess.open("res://")
	if not dest_dir.dir_exists(to_dir):
		var err = dest_dir.make_dir_recursive(to_dir)
		if err != OK:
			printerr("Error creating directory: %s" % to_dir)
			return false
	
	# Copy all files in the directory
	dir.list_dir_begin()
	var file_name = dir.get_next()
	
	while file_name != "":
		if file_name != "." and file_name != "..":
			var from_path = from_dir.path_join(file_name)
			var to_path = to_dir.path_join(file_name)
			
			if dir.current_is_dir():
				# Recursively copy subdirectory
				if not copy_directory(from_path, to_path):
					return false
			else:
				# Copy file
				var err = dir.copy(from_path, to_path)
				if err != OK:
					printerr("Error copying file from %s to %s" % [from_path, to_path])
					return false
		
		file_name = dir.get_next()
	
	dir.list_dir_end()
	return true

func generate_project_file(output_path):
	var project_file_path = output_path.path_join("project.godot")
	var file = FileAccess.open(project_file_path, FileAccess.WRITE)
	if file == null:
		printerr("Error: Could not create project file: %s" % project_file_path)
		return false
	
	# Basic project.godot file content
	var content = """
; Engine configuration file.
; Generated by Luminous OS Auto Game Factory
;

config_version=5

[application]

config/name="%s"
config/description="%s"
config/version="%s"
run/main_scene="res://main.tscn"
config/features=PackedStringArray("4.4")
config/icon="res://icon.svg"

[rendering]

renderer/rendering_method="gl_compatibility"
"""
	
	file.store_string(content % [config.name, config.description, config.version])
	file.close()
	return true

func generate_main_scene(output_path):
	var main_scene_path = output_path.path_join("main.tscn")
	var file = FileAccess.open(main_scene_path, FileAccess.WRITE)
	if file == null:
		printerr("Error: Could not create main scene file: %s" % main_scene_path)
		return false
	
	# Basic main scene file content
	var content = """[gd_scene format=3 uid="uid://bxj0xd2xmkujd"]

[node name="Main" type="Node"]

[node name="Camera2D" type="Camera2D" parent="."]

[node name="Label" type="Label" parent="."]
offset_left = -128.0
offset_top = -32.0
offset_right = 128.0
offset_bottom = 32.0
text = "%s
Generated by Luminous OS"
horizontal_alignment = 1
vertical_alignment = 1
"""
	
	file.store_string(content % config.name)
	file.close()
	return true

func generate_game_info(output_path):
	var info_file_path = output_path.path_join("game_info.json")
	var file = FileAccess.open(info_file_path, FileAccess.WRITE)
	if file == null:
		printerr("Error: Could not create game info file: %s" % info_file_path)
		return false
	
	# Create game info JSON
	var info = {
		"name": config.name,
		"description": config.description,
		"version": config.version,
		"author": config.author,
		"template": config.template,
		"created_at": Time.get_datetime_string_from_system(),
		"generated_by": "Luminous OS Auto Game Factory"
	}
	
	file.store_string(JSON.stringify(info, "  "))
	file.close()
	return true

# Entry point
func _init():
	_initialize()