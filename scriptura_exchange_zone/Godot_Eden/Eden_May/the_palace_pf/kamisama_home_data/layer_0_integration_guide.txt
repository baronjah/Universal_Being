# Akashic Records Integration Guide for layer_0.tscn

This guide provides step-by-step instructions to integrate the Akashic Records system into your existing layer_0.tscn scene with the main.gd script.

## Step 1: Copy the Required Files

Make sure all the Akashic Records system files are in your project:

1. Create or verify these folders exist:
   - D:/GodotEden/godot luminus copy/eden feb/code/gdscript/scripts/akashic_records/
   - D:/GodotEden/godot luminus copy/eden feb/code/gdscript/scenes/

2. Copy these files to the akashic_records folder:
   - word_entry.gd
   - dynamic_dictionary.gd
   - interaction_engine.gd
   - zone_manager.gd
   - evolution_manager.gd
   - frequency_visualizer.gd
   - akashic_records_manager.gd
   - akashic_records_ui.gd

3. Copy these files to the scenes folder:
   - akashic_records_ui.tscn

4. Copy this file to the Menu_Keyboard_Console folder:
   - akashic_records_integration.gd

## Step 2: Modify main.gd

Open your main.gd file (in the layer_0.tscn scene) and make the following changes:

### 1. Add imports at the top of the file

Add this near other imports at the top of the file:

```gdscript
const AkashicRecordsIntegration = preload("res://code/gdscript/scripts/Menu_Keyboard_Console/akashic_records_integration.gd")
```

### 2. Add class variable for the integration

Add this to your class variables:

```gdscript
# Akashic Records integration
var akashic_records_integration = null
```

### 3. Initialize the integration in _ready()

Find your _ready() function and add this after your menu system initialization:

```gdscript
# Initialize Akashic Records integration
akashic_records_integration = AkashicRecordsIntegration.new()
add_child(akashic_records_integration)
akashic_records_integration.initialize(self)
```

### 4. Add the access method

Add this method to your main.gd script:

```gdscript
# Get the Akashic Records integration
func get_akashic_records() -> AkashicRecordsIntegration:
    return akashic_records_integration
```

### 5. Make sure you have a view area for UI content

If you don't already have a view area defined, you'll need to add one:

```gdscript
# View area for UI content
@onready var view_area = $ViewArea
```

And ensure your scene has a ViewArea node (a Control node named "ViewArea").

### 6. Add the method to add content to the view area

If you don't already have this method:

```gdscript
# Add content to the view area
func add_to_view_area(content: Control) -> void:
    # Clear existing content
    for child in view_area.get_children():
        child.queue_free()
    
    # Add new content
    view_area.add_child(content)
```

### 7. Add system registration methods

If your main script doesn't already have system registration methods:

```gdscript
# Dictionary of registered systems
var registered_systems = {}

# Register a system with the console
func register_system(system, system_name: String) -> void:
    registered_systems[system_name] = system
    print("System registered: " + system_name)

# Get a registered system
func get_system(system_name: String):
    return registered_systems.get(system_name, null)
```

### 8. Add menu entry management system

If you don't already have menu entry management:

```gdscript
# Add a menu entry to a category
func add_menu_entry(category: String, entry: Dictionary) -> void:
    if category == "things":
        things_bank.add_entry(entry)
    elif category == "scenes":
        scenes_bank.add_entry(entry)
    elif category == "actions":
        actions_bank.add_entry(entry)
    elif category == "instructions":
        instructions_bank.add_entry(entry)
```

Note: Adjust this to match your existing menu system's structure.

### 9. Add message display function

If you don't already have a message display function:

```gdscript
# Show a message to the user
func show_message(message: String) -> void:
    print(message)  # Fallback to console
    
    # If you have a UI label for status messages:
    # $StatusLabel.text = message
```

## Step 3: Create the ViewArea Node (if needed)

If your layer_0.tscn doesn't already have a ViewArea for UI content:

1. Open the layer_0.tscn scene in Godot
2. Add a Control node named "ViewArea"
3. Set its layout to expand to fill available space
4. Position it where you want the Akashic Records UI to appear

## Step 4: Create Required Directories

The system will need these directories to store data:

```
D:/GodotEden/godot luminus copy/eden feb/dictionary/
D:/GodotEden/godot luminus copy/eden feb/dictionary/elements/
D:/GodotEden/godot luminus copy/eden feb/dictionary/entities/
D:/GodotEden/godot luminus copy/eden feb/dictionary/interactions/
D:/GodotEden/godot luminus copy/eden feb/dictionary/zones/
```

## Step 5: Test the Integration

1. Run the layer_0.tscn scene
2. You should see new "Akashic Records" related entries in your "Things" menu
3. Click on these entries to access the Akashic Records UI

## Troubleshooting

If you encounter issues:

1. **Menu entries not appearing**: Check that akashic_records_integration is being initialized correctly
2. **UI not displaying**: Make sure the ViewArea node exists and is properly set up
3. **Script errors**: Verify all paths in the import statements are correct
4. **File not found errors**: Ensure all files are in the correct locations

## Next Steps

After basic integration:

1. Create some example dictionary entries
2. Set up interactions between them
3. Configure evolution parameters
4. Test the visualization

This will give you a working demonstration of the Akashic Records system's capabilities.