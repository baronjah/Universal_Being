# VR Integration Plan for Eden Space Game

This document outlines the integration plan for connecting the new VR system with the existing Eden Space Game codebase, particularly focusing on the Akashic Records (Dynamic Dictionary) system.

## 1. Overview

The integration connects three main systems:
- VR System: Handles VR hardware, controllers, and VR-specific interactions
- Akashic Records: The dynamic dictionary system for managing words and concepts
- Universe Controller: Manages the multi-scale space exploration game

## 2. Integration Points

### 2.1. main.gd Integration

The main entry point for the game should be modified to initialize the VR system when appropriate:

```gdscript
# In main.gd

# Look for these sections to modify:

# 1. Near the top of the file, add VR imports
var vr_scene_setup = null

# 2. In the _ready() function, add VR initialization
func _ready():
    # Initialize game systems
    
    # Initialize VR if enabled
    if settings.get_setting("vr_enabled", false):
        _initialize_vr()
    
    # Continue with existing initialization
    
# 3. Add a new VR initialization function
func _initialize_vr():
    vr_scene_setup = load("res://code/gdscript/scripts/vr_system/vr_scene_setup.gd").new()
    vr_scene_setup.name = "VRSceneSetup"
    add_child(vr_scene_setup)
    
# 4. In the _process function, check for VR toggle input
func _process(delta):
    # Check for VR toggle (e.g., F8 key)
    if Input.is_action_just_pressed("toggle_vr"):
        _toggle_vr()
    
# 5. Add a VR toggle function
func _toggle_vr():
    var vr_enabled = settings.get_setting("vr_enabled", false)
    settings.set_setting("vr_enabled", !vr_enabled)
    settings.save_settings()
    
    if !vr_enabled:
        # VR was just enabled
        if not vr_scene_setup:
            _initialize_vr()
    else:
        # VR was just disabled
        if vr_scene_setup:
            vr_scene_setup.queue_free()
            vr_scene_setup = null
```

### 2.2. Universe Controller Integration

The `universe_controller.gd` should be connected to the VR system to allow scale transitions and user interactions:

```gdscript
# In universe_controller.gd

# 1. Near the top, add VR reference
var vr_manager = null

# 2. In the _ready() function, connect to VR
func _ready():
    # Existing initialization
    
    # Connect to VR manager if available
    vr_manager = VRManager.get_instance() if has_method(VRManager, "get_instance") else null
    if vr_manager:
        vr_manager.connect("scale_transition_requested", Callable(self, "_on_vr_scale_transition_requested"))
    
# 3. Add VR signal handler
func _on_vr_scale_transition_requested(from_scale, to_scale):
    var target_scale_level = ScaleLevel.UNIVERSE
    
    match to_scale:
        "universe": target_scale_level = ScaleLevel.UNIVERSE
        "galaxy": target_scale_level = ScaleLevel.GALAXY
        "star_system": target_scale_level = ScaleLevel.STAR_SYSTEM
        "planet": target_scale_level = ScaleLevel.PLANET
        "element": target_scale_level = ScaleLevel.ELEMENT
    
    transition_to_scale(target_scale_level)
```

### 2.3. Akashic Records Integration

Connect the existing `akashic_records_manager.gd` with the VR interface:

```gdscript
# In akashic_records_manager.gd

# 1. In the _ready() or initialize() function, connect to VR if available
func initialize():
    # Existing initialization
    
    # Connect to VR if available
    var vr_manager = VRManager.get_instance() if has_method(VRManager, "get_instance") else null
    if vr_manager:
        print("Connecting Akashic Records to VR Manager")
    
    # Continue with initialization
    
# 2. Add methods for VR-specific operations if needed
func get_words_in_radius(position: Vector3, radius: float) -> Array:
    # Implementation to get words near a position for VR visualization
    var nearby_words = []
    
    # Logic to find words near the specified position
    
    return nearby_words
```

## 3. Project Structure Updates

### 3.1. Plugin Registration

Register the VR plugin in `project.godot`:

1. Add the plugin entry in the `.godot/editor/project_metadata.cfg` file:
```
[plugin_scripts]

vr_system/plugin="res://code/gdscript/scripts/vr_system/vr_plugin.gd"
```

2. Create a plugin configuration file:
```
# plugin.cfg (in vr_system directory)
[plugin]

name="Eden VR System"
description="VR support for Eden Space Game"
author="Eden Developer"
version="1.0"
script="vr_plugin.gd"
```

### 3.2. Input Mapping Updates

Add VR-specific input mappings to `project.godot`:

```
[input]

toggle_vr={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194339,"physical_keycode":0,"key_label":0,"unicode":0,"echo":false,"script":null)
]
}
```

## 4. Scene Integration

### 4.1. Main Menu Updates

Add VR options to the main menu:

```gdscript
# In Menu_Keyboard_Console/JSH_console.gd

# Add VR toggle option to settings menu
func _create_settings_menu():
    # Existing settings options
    
    # Add VR option
    var vr_option = {
        "name": "VR Mode",
        "action": "toggle_vr",
        "description": "Enable or disable VR mode for Oculus Quest 2"
    }
    settings_options.append(vr_option)
```

### 4.2. Element System Integration

Connect the `element_manager.gd` with the VR system to allow VR-specific element interactions:

```gdscript
# In elements_shapes_projection/element_manager.gd

# 1. Add VR reference
var vr_element_interaction = null

# 2. In the _ready() or initialize() function
func initialize():
    # Existing initialization
    
    # Create VR element interaction if in VR mode
    var vr_manager = VRManager.get_instance() if has_method(VRManager, "get_instance") else null
    if vr_manager and vr_manager.is_vr_active:
        var VRElementInteraction = load("res://code/gdscript/scripts/vr_system/vr_element_interaction.gd")
        vr_element_interaction = VRElementInteraction.new()
        vr_element_interaction.name = "VRElementInteraction"
        add_child(vr_element_interaction)
```

## 5. Implementation Steps

Follow these steps to complete the integration:

1. **Add VR Plugin Files**
   - Ensure all VR system files are in the correct directory
   - Add plugin registration files

2. **Update Main Entry Point**
   - Modify main.gd to initialize VR when requested
   - Add VR toggle functionality

3. **Connect Universe Controller**
   - Add scale transition handlers in universe_controller.gd
   - Connect controller to VR input system

4. **Connect Akashic Records**
   - Update akashic_records_manager.gd to interact with VR
   - Ensure word visualization works correctly

5. **Update Element System**
   - Connect element interactions to VR controller input
   - Implement VR-specific interaction physics

6. **Test VR Mode**
   - Test VR initialization and shutdown
   - Test scale transitions in VR
   - Test element interactions in VR
   - Test dictionary visualization in VR

## 6. Testing Plan

Test the integration using the following checklist:

1. **Basic VR Setup**
   - [ ] VR initializes correctly when enabled
   - [ ] VR controllers are detected and working
   - [ ] Camera perspective is correct

2. **Scale Transitions**
   - [ ] Can transition between all cosmic scales using VR controllers
   - [ ] Visual effects during scale transitions work correctly
   - [ ] Objects in each scale appear correctly sized

3. **Akashic Records Visualization**
   - [ ] Words appear in 3D space around the player
   - [ ] Can select words with VR controllers
   - [ ] Can create new word connections with gestures
   - [ ] Dictionary menu appears and works in VR

4. **Element Interactions**
   - [ ] Can grab and move elements in VR
   - [ ] Elements react to physics interactions
   - [ ] Element transformations (fire + wood = ash, etc.) work
   - [ ] Can create new elements in VR

5. **Performance Testing**
   - [ ] Frame rate remains acceptable with many elements
   - [ ] Scale transitions maintain performance
   - [ ] Dictionary visualization performs well with many words

## 7. Future Enhancements

After basic integration is complete, consider these enhancements:

1. **Hand Tracking Support**
   - Update VR manager to support handtracking for controller-free interaction
   - Implement gesture recognition for common actions

2. **Advanced Physics Effects**
   - Add more complex element interaction physics
   - Implement fluid simulation for water elements

3. **Multiplayer VR Support**
   - Allow multiple VR users to interact in the same space
   - Implement avatar visualization for other players

4. **Voice Commands**
   - Add speech recognition for dictionary manipulation
   - Implement voice-based navigation between scales

## 8. Resources Required

To complete this integration, ensure the following resources are available:

1. **Hardware**
   - Oculus Quest 2 headset
   - VR-capable development computer

2. **Software**
   - Godot 4.4 with OpenXR plugin
   - Android SDK for Quest 2 deployment

3. **Documentation**
   - Godot VR documentation
   - Oculus Quest 2 developer guidelines

## 9. Timeline Estimation

The integration can be completed in the following phases:

1. **Basic VR Setup**: 2-3 days
2. **Scale Transition Integration**: 2-3 days
3. **Akashic Records VR Interface**: 3-4 days
4. **Element Interaction System**: 3-4 days
5. **Testing and Refinement**: 2-3 days

Total estimated time: 12-17 days