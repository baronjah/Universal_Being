# Akashic Records Integration Guide

This guide explains how to integrate the Akashic Records (Dynamic Dictionary) system with other parts of the Eden Space Game.

## Introduction

The Akashic Records system is designed to be a flexible, dynamic dictionary system that can be integrated with various aspects of the game. This guide focuses on how to connect it with:

1. The Element System
2. The Space System (universe, galaxies, stars, planets)
3. The VR System

## Setting Up the Integration

### 1. Initializing the Akashic Records

Before integrating with other systems, ensure the Akashic Records manager is initialized. This is typically done in the main game script:

```gdscript
# In main.gd or similar startup script
func _ready():
    # Initialize Akashic Records
    var akashic_records = AkashicRecordsManager.get_instance()
    if not akashic_records.is_initialized:
        akashic_records.initialize()
```

You can also add the AkashicRecordsManager as an autoload singleton in the project settings for easier access throughout the game.

### 2. Creating Initial Dictionary Entries

Some core dictionary entries should be created when the game starts. These can include:

- Basic elements (fire, water, wood, ash)
- Cosmic objects (galaxy, star, planet)
- Scale levels (universe, galaxy, star_system, planet, element)

The Akashic Records manager already has methods to create these in its initialization.

## Integration with Element System

### 1. Link Element Types to Dictionary Words

Map your element system's types to dictionary entries:

```gdscript
# In your element system
func initialize_element_types():
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Get element definitions from the dictionary
    var fire_def = akashic_records.get_word("fire")
    var water_def = akashic_records.get_word("water")
    var wood_def = akashic_records.get_word("wood")
    var ash_def = akashic_records.get_word("ash")
    
    # Apply properties to your element system
    element_properties["fire"] = fire_def.properties
    element_properties["water"] = water_def.properties
    element_properties["wood"] = wood_def.properties
    element_properties["ash"] = ash_def.properties
```

### 2. Process Element Interactions

Use the Akashic Records to determine interaction results:

```gdscript
# In your element system
func process_element_interaction(element1_type, element2_type, context = {}):
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Use the dictionary to determine interaction result
    var result = akashic_records.interaction_engine.process_interaction(
        element1_type, 
        element2_type, 
        context
    )
    
    if result.success:
        # Apply the result in your element system
        var result_type = result.result
        
        # Create or transform elements based on result
        create_element_of_type(result_type, position)
        
        # Maybe remove original elements
        if result.get("remove_originals", false):
            remove_element(element1)
            remove_element(element2)
    
    return result
```

### 3. Update Dictionary with Element States

Keep the dictionary updated with element changes:

```gdscript
# In your element system
func update_element_state(element_id, new_state):
    var akashic_records = AkashicRecordsManager.get_instance()
    var word = akashic_records.get_word(element_id)
    
    if word:
        word.change_state(new_state)
        akashic_records.dynamic_dictionary.update_word(element_id, word.to_dictionary())
```

## Integration with Space System

### 1. Link Cosmic Objects to Dictionary Entries

Map your cosmic objects to dictionary entries:

```gdscript
# In your space system
func initialize_cosmic_objects():
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Get cosmic object definitions
    var galaxy_def = akashic_records.get_word("galaxy")
    var star_def = akashic_records.get_word("star")
    var planet_def = akashic_records.get_word("planet")
    
    # Apply properties to your space system
    cosmic_properties["galaxy"] = galaxy_def.properties
    cosmic_properties["star"] = star_def.properties
    cosmic_properties["planet"] = planet_def.properties
```

### 2. Create Dictionary Entries for Generated Objects

When generating cosmic objects, create corresponding dictionary entries:

```gdscript
# In your galaxy generator
func generate_galaxy(position, galaxy_type):
    # Generate galaxy in space system
    var galaxy = create_galaxy_object(position, galaxy_type)
    
    # Create dictionary entry
    var akashic_records = AkashicRecordsManager.get_instance()
    var galaxy_id = "galaxy_" + str(galaxy.id)
    
    var galaxy_data = {
        "id": galaxy_id,
        "display_name": galaxy.name,
        "category": "cosmic",
        "parent": "universe",
        "properties": {
            "galaxy_type": galaxy_type,
            "size": galaxy.size,
            "star_count": galaxy.star_count
        }
    }
    
    akashic_records.create_word(galaxy_id, galaxy_data)
    
    # Also create entries for stars in the galaxy
    for star in galaxy.stars:
        _create_star_dictionary_entry(star, galaxy_id)
    
    return galaxy
```

### 3. Use Zones for Spatial Organization

Use the zone system to organize cosmic objects in space:

```gdscript
# In your space system
func initialize_zones():
    var akashic_records = AkashicRecordsManager.get_instance()
    var zone_manager = akashic_records.zone_manager
    
    # Create root zone for universe
    var universe_bounds = AABB(Vector3(-1000, -1000, -1000), Vector3(2000, 2000, 2000))
    zone_manager.create_zone("universe", universe_bounds)
    
    # Create zones for galaxies
    for galaxy in galaxies:
        var galaxy_bounds = calculate_galaxy_bounds(galaxy)
        var galaxy_zone_id = "zone_galaxy_" + str(galaxy.id)
        zone_manager.create_zone(galaxy_zone_id, galaxy_bounds)
        
        # Add stars to the galaxy zone
        for star in galaxy.stars:
            var entity_id = "entity_star_" + str(star.id)
            zone_manager.add_entity_to_zone(galaxy_zone_id, entity_id, star.position)
```

### 4. Handle Scale Transitions with Dictionary

Use the dictionary to manage scale transitions:

```gdscript
# In your universe controller
func transition_to_scale(from_scale, to_scale, focus_object = null):
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Get scale definitions
    var from_scale_def = akashic_records.get_word(from_scale)
    var to_scale_def = akashic_records.get_word(to_scale)
    
    if from_scale_def and to_scale_def:
        # Get scale properties
        var from_scale_factor = from_scale_def.get_property("scale_factor", 1.0)
        var to_scale_factor = to_scale_def.get_property("scale_factor", 1.0)
        
        # Calculate transition parameters
        var scale_ratio = from_scale_factor / to_scale_factor
        
        # Apply transition
        apply_scale_transition(scale_ratio, focus_object)
```

## Integration with VR System

### 1. Visualize Dictionary in VR

Create a VR visualization of the dictionary:

```gdscript
# In your VR system
func initialize_dictionary_visualization():
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Create visualization root
    var vis_root = Node3D.new()
    vis_root.name = "DictionaryVisualization"
    add_child(vis_root)
    
    # Create nodes for words
    for word_id in akashic_records.dynamic_dictionary.get_root_words():
        var word = akashic_records.dynamic_dictionary.get_word(word_id)
        if word:
            create_word_node(word, vis_root)
```

### 2. Create Interactive Word Nodes

Make dictionary words interactive in VR:

```gdscript
# In your VR system
func create_word_node(word, parent):
    # Create 3D node
    var node = Node3D.new()
    node.name = "Word_" + word.id
    parent.add_child(node)
    
    # Create visual representation
    var mesh_instance = MeshInstance3D.new()
    var sphere = SphereMesh.new()
    sphere.radius = 0.2
    sphere.height = 0.4
    mesh_instance.mesh = sphere
    
    # Create material based on category
    var material = StandardMaterial3D.new()
    
    match word.category:
        "element":
            material.albedo_color = Color(1.0, 0.5, 0.2, 0.8)
        "cosmic":
            material.albedo_color = Color(0.2, 0.5, 1.0, 0.8)
        _:
            material.albedo_color = Color(0.7, 0.7, 0.7, 0.8)
    
    mesh_instance.material_override = material
    node.add_child(mesh_instance)
    
    # Add label
    var label = Label3D.new()
    label.text = word.display_name
    label.pixel_size = 0.01
    label.position.y = 0.3
    label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
    node.add_child(label)
    
    # Add collision for interaction
    var collision_shape = CollisionShape3D.new()
    var sphere_shape = SphereShape3D.new()
    sphere_shape.radius = 0.2
    collision_shape.shape = sphere_shape
    
    var area = Area3D.new()
    area.add_child(collision_shape)
    area.connect("input_event", Callable(self, "_on_word_input_event").bind(word.id))
    
    node.add_child(area)
    
    # Store reference to dictionary entry
    node.set_meta("word_id", word.id)
    
    return node
```

### 3. Handle VR Interactions with Words

Process interactions triggered by VR controllers:

```gdscript
# In your VR system
func _on_word_input_event(camera, event, click_position, click_normal, shape_idx, word_id):
    if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
        _select_word(word_id)
    
    if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_RIGHT:
        _show_word_menu(word_id)

# Select a word
func _select_word(word_id):
    var akashic_records = AkashicRecordsManager.get_instance()
    var word = akashic_records.dynamic_dictionary.get_word(word_id)
    
    if word:
        if selected_word_id.is_empty():
            # First selection
            selected_word_id = word_id
            highlight_word_node(word_id)
        else:
            # Second selection - try interaction
            var result = akashic_records.interaction_engine.process_interaction(
                selected_word_id,
                word_id
            )
            
            if result.success:
                # Visualize the interaction result
                visualize_interaction_result(result)
            
            # Clear selection
            selected_word_id = ""
```

### 4. Create VR Gestures for Dictionary Operations

Implement gestures for manipulating the dictionary:

```gdscript
# In your VR system
func _process_controller_gestures(delta):
    if not left_controller or not right_controller:
        return
    
    # Get controller positions
    var left_pos = left_controller.global_position
    var right_pos = right_controller.global_position
    
    # Track movement
    controller_history.left.append(left_pos)
    controller_history.right.append(right_pos)
    
    # Limit history size
    if controller_history.left.size() > 30:
        controller_history.left.remove_at(0)
    if controller_history.right.size() > 30:
        controller_history.right.remove_at(0)
    
    # Detect gestures
    var gesture = detect_gesture(controller_history)
    
    if gesture == "circle":
        # Create new word
        _show_create_word_dialog()
    elif gesture == "line":
        # Create connection between words
        _create_connection_between_selected()
    elif gesture == "pinch":
        # Scale transition down
        var current_index = scale_levels.find(current_scale)
        if current_index < scale_levels.size() - 1:
            request_scale_transition(scale_levels[current_index + 1])
    elif gesture == "spread":
        # Scale transition up
        var current_index = scale_levels.find(current_scale)
        if current_index > 0:
            request_scale_transition(scale_levels[current_index - 1])
```

## Examples of Full Integration

### Example 1: Element Interaction in VR

This example shows how to process an element interaction triggered in VR:

```gdscript
# In your VR element interaction system
func process_element_interaction_in_vr(element1_node, element2_node):
    # Get element types from nodes
    var element1_type = element1_node.get_meta("element_type")
    var element2_type = element2_node.get_meta("element_type")
    
    # Get positions
    var position1 = element1_node.global_position
    var position2 = element2_node.global_position
    var midpoint = (position1 + position2) / 2
    
    # Create context based on VR interaction
    var context = {
        "interaction_speed": get_interaction_speed(element1_node, element2_node),
        "temperature": get_ambient_temperature(midpoint),
        "intensity": get_interaction_intensity(element1_node, element2_node)
    }
    
    # Process the interaction through Akashic Records
    var akashic_records = AkashicRecordsManager.get_instance()
    var result = akashic_records.interaction_engine.process_interaction(
        element1_type,
        element2_type,
        context
    )
    
    if result.success:
        # Create new element based on result
        var result_type = result.result
        create_vr_element(result_type, midpoint)
        
        # Apply visual effects
        create_interaction_effect(midpoint, result_type)
        
        # Remove original elements if needed
        if should_remove_originals(element1_type, element2_type, result_type):
            remove_vr_element(element1_node)
            remove_vr_element(element2_node)
```

### Example 2: Cosmic Object Generation with Dictionary

This example shows how to generate cosmic objects with dictionary entries:

```gdscript
# In your universe generator
func generate_star_system(galaxy_id, position):
    # Generate a random star type
    var star_type = random_star_type()
    
    # Create star in space system
    var star = create_star(position, star_type)
    var star_id = "star_" + str(star.unique_id)
    
    # Create dictionary entry
    var akashic_records = AkashicRecordsManager.get_instance()
    
    var star_data = {
        "id": star_id,
        "display_name": generate_star_name(),
        "category": "cosmic",
        "parent": galaxy_id,
        "properties": {
            "star_type": star_type,
            "temperature": star.temperature,
            "size": star.size,
            "luminosity": star.luminosity,
            "color": {
                "r": star.color.r,
                "g": star.color.g,
                "b": star.color.b
            }
        }
    }
    
    akashic_records.create_word(star_id, star_data)
    
    # Add to spatial organization
    var zone_manager = akashic_records.zone_manager
    var galaxy_zone_id = "zone_" + galaxy_id
    var entity_id = "entity_" + star_id
    zone_manager.add_entity_to_zone(galaxy_zone_id, entity_id, position)
    
    # Generate planets around the star
    var planet_count = randi_range(0, 8)
    for i in range(planet_count):
        generate_planet(star_id, star, i)
    
    return star
```

### Example 3: Scale Transition with VR and Dictionary

This example shows how to handle scale transitions in VR with the dictionary:

```gdscript
# In your VR scale transition system
func vr_scale_transition(from_scale, to_scale, focus_point):
    var akashic_records = AkashicRecordsManager.get_instance()
    
    # Get scale definitions
    var from_scale_def = akashic_records.get_word(from_scale)
    var to_scale_def = akashic_records.get_word(to_scale)
    
    if from_scale_def and to_scale_def:
        # Get scale factors
        var from_factor = from_scale_def.get_property("scale_factor", 1.0)
        var to_factor = to_scale_def.get_property("scale_factor", 1.0)
        
        # Calculate transition parameters
        var scale_ratio = from_factor / to_factor
        
        # Start transition effect
        start_vr_transition_effect()
        
        # Update reference point
        var vr_manager = VRManager.get_instance()
        vr_manager.update_reference_point(focus_point)
        
        # Apply scale change to world (instead of moving player)
        apply_scale_to_world(scale_ratio, focus_point)
        
        # Load appropriate content for new scale
        load_scale_content(to_scale, focus_point)
        
        # Update VR manager state
        vr_manager.current_scale = to_scale
        vr_manager.complete_scale_transition()
    }
```

## Conclusion

The Akashic Records system provides a flexible foundation for many aspects of the Eden Space Game. By integrating it with your element system, space system, and VR system, you create a cohesive experience where:

1. Words in the dictionary define the properties and behaviors of game elements
2. Interactions between words determine how elements interact
3. The spatial organization of words helps manage the game world
4. Scale transitions link different levels of the game
5. VR provides an immersive way to interact with the dictionary

As you continue development, you can expand the dictionary with more words, properties, and interactions to create a rich, dynamic game world.