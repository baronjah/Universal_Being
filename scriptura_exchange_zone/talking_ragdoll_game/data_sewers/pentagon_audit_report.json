{
  "audit_summary": {
    "total_scripts": 237,
    "compliant_scripts": 14,
    "scripts_with_violations": 8,
    "scripts_with_warnings": 223,
    "compliance_percentage": 5.91
  },
  "function_distribution": {
    "scripts_with_ready": 233,
    "scripts_with_init": 230,
    "scripts_with_process": 231,
    "scripts_with_input": 229
  },
  "pentagon_pattern_adoption": {
    "pentagon_headers": 237,
    "phase_comments": 10,
    "floodgate_integration": 102,
    "universal_being_pattern": 214
  },
  "violation_details": [
    {
      "file_path": "scripts/test/automated_warning_fixer.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func fix_unused_parameters_in_file(file_path: String)",
        "func should_prefix_parameter(content: String, func_name: String, param_name: String)",
        "func fix_all_warnings(base_path: String = \"res://scripts/\")",
        "func _scan_directory(path: String)",
        "func analyze_warning_patterns()",
        "func test_on_sample()",
        "func _process(delta: float)",
        "func _on_body_entered(body: Node2D)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func calculate_damage(attacker: Node, defender: Node, weapon: String)",
        "func _process(_delta: float)",
        "func _on_body_entered(_body: Node2D)",
        "func calculate_damage(_attacker: Node, defender: Node, _weapon: String)"
      ]
    },
    {
      "file_path": "scripts/test/batch_parameter_fixer.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func fix_file(file_path: String, dry_run: bool = false)",
        "func _process_line(line: String, file_path: String)",
        "func _fix_parameters(func_name: String, params_str: String)",
        "func batch_fix(file_paths: Array, dry_run: bool = false)",
        "func find_files_to_fix(base_path: String = \"res://scripts/\")",
        "func _scan_for_files(path: String, files: Array)",
        "func quick_fix_common()",
        "func test()",
        "func _process(delta: float)",
        "func _process(_delta: float)",
        "func _on_button_pressed()",
        "func _on_button_pressed()",
        "func _on_body_entered(body: Node2D)",
        "func _on_body_entered(_body: Node2D)",
        "func custom_function(param1: int, param2: String)",
        "func custom_function(param1: int, param2: String)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/run_warning_fixes.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _analyze_files()",
        "func _create_backups()",
        "func _apply_fixes()",
        "func _generate_report()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func show_examples()",
        "func _process(delta: float)",
        "func _process(_delta: float)",
        "func _on_button_pressed()",
        "func _on_button_pressed()",
        "func _on_body_entered(body: Node2D)",
        "func _on_body_entered(_body: Node2D)",
        "func test_single_file(file_path: String)"
      ]
    },
    {
      "file_path": "scripts/tools/script_migration_helper.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 2,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (2)",
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func scan_all_scripts()",
        "func _scan_directory(path: String)",
        "func _analyze_script(script_path: String)",
        "func generate_migration_plan(script_analysis: Dictionary)",
        "func process_managed(delta: float)",
        "func _process(delta)",
        "func _physics_process(delta)",
        "func auto_migrate_script(script_path: String)",
        "func _ready()",
        "func _process(\", \"func process_managed(\")",
        "func _physics_process(\", \"func process_managed(\")",
        "func migrate_all_scripts()",
        "func get_migration_report()",
        "func register_console_commands()",
        "func _cmd_scan_scripts(_args: Array)",
        "func _cmd_show_report(_args: Array)",
        "func _cmd_migrate_all(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_mainframe_database.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 2,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _init() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func update_ram(usage: int)",
        "func update_cpu(usage: float)",
        "func update_nodes(count: int)",
        "func update_file_ops(count: int)",
        "func get_ram_percentage()",
        "func get_cpu_percentage()",
        "func get_node_percentage()",
        "func get_file_percentage()",
        "func _init(p_name: String, p_type: int, p_execution_time: float = 5.0)",
        "func add_dependency(func_name: String)",
        "func set_resource_requirement(resource: String, amount)",
        "func set_error_probability(probability: float)",
        "func execute()",
        "func _init(p_name: String)",
        "func add_pack(pack_name: String)",
        "func start()",
        "func advance()",
        "func get_current_pack()",
        "func reset()",
        "func _ready()",
        "func _initialize_mutexes()",
        "func _initialize_system()",
        "func _initialize_functions()",
        "func _initialize_combos()",
        "func _initialize_corner_indicators()",
        "func _register_node_path(key: String, path: String)",
        "func _build_connection_matrix()",
        "func _start_turn_system()",
        "func _can_execute_pack(pack_name: String)",
        "func _execute_function_pack(pack_name: String)",
        "func _update_memory_tracking()",
        "func _register_corner_markers()",
        "func _add_system_function(func_name: String, execution_time: float = 5.0)",
        "func _add_input_function(func_name: String, execution_time: float = 2.0)",
        "func _add_file_function(func_name: String, execution_time: float = 4.0)",
        "func _add_render_function(func_name: String, execution_time: float = 3.0)",
        "func _add_process_function(func_name: String, execution_time: float = 4.0)",
        "func _add_memory_function(func_name: String, execution_time: float = 3.0)",
        "func _execute_init_system()",
        "func _execute_check_resources()",
        "func _execute_verify_paths()",
        "func _execute_poll_input()",
        "func _execute_process_keys()",
        "func _execute_handle_mouse()",
        "func _execute_load_config()",
        "func _execute_parse_data()",
        "func _execute_save_state()",
        "func _execute_update_display()",
        "func _execute_render_frame()",
        "func _execute_update_corners()",
        "func _process_turn()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_task_manager.gd",
      "class_name": "SpatialEvolutionSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 3,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (3)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func generate_container_mesh(container : SpatialContainer)",
        "func generate_base_shape(_rng)",
        "func apply_evolutionary_rules(shape, _history)",
        "func simplify_for_lod(shape, _lod_level)",
        "func _init(init_seed : int, pos : Vector3)",
        "func sewers()",
        "func pentagon_sewers()",
        "func evolve(turn : int, command)",
        "func apply_scale_pattern(data)",
        "func serialize()",
        "func _ready()",
        "func add_task(task_name, priority = 0, dependencies = [])",
        "func start_task(task_id)",
        "func complete_task(task_id, success = true)",
        "func track_data_flow(source_path, target_path, data_type, amount = 1.0)",
        "func record_interaction(position, type, data = null)",
        "func track_scene_movement(scene_path, from_position, to_position, duration)",
        "func complete_scene_movement(scene_path, movement_index)",
        "func generate_statistics()",
        "func export_data(file_path = \"user://task_manager_data.json\")",
        "func create_3d_visualization(parent_node)",
        "func _find_task_index(task_id)",
        "func prune_completed_tasks()",
        "func _update_flow_visualization(flow_key)",
        "func _create_flow_line(flow_key)",
        "func _visualize_interaction(interaction)",
        "func _visualize_movement(scene_path, movement)",
        "func new_task_appeared(task_id, function_called, data_send_to_function)",
        "func collect_tasks(function_name, task_data)",
        "func check_if_that_task_was(function_name)",
        "func check_all_things()",
        "func initialize_task_system()",
        "func parse_code_structure(content: String)",
        "func create_tasks_from_structure(structure: Dictionary)",
        "func generate_task_id(base_name: String)",
        "func determine_category(system_name: String)",
        "func get_task_info(task_id: String)",
        "func update_task_status_now(task_id: String, new_status: String)",
        "func update_task_status(task_id: String, new_status: String)",
        "func get_category_tasks(category: String)",
        "func generate_task_report()",
        "func initialize_world_seed(master_seed : int)",
        "func store_container(container : SpatialContainer)",
        "func save_container_states()",
        "func apply_scale_pattern(data, _pattern_seed)",
        "func load_from_rom(def)",
        "func check_scale(_data)",
        "func check_history(_data)",
        "func generate_initial_rules(rng_number)",
        "func generate_initial_containers(world_rng)",
        "func check_rules_of_container(container_rules)",
        "func process_turn()",
        "func apply_procedural_rules()",
        "func unload_distant_containers()",
        "func update_container_lod()",
        "func calculate_lod(distance : float)",
        "func load_required_containers()",
        "func process_commands()",
        "func execute_command(command)",
        "func apply_global_scale(command)",
        "func inherit_rules(source_container)",
        "func detect_repetition_patterns()",
        "func mutate_rule(data, _mutation_seed)",
        "func check_pattern_repetition(data)",
        "func apply_pattern_response(data)",
        "func store_container_old(container : SpatialContainer)",
        "func save_container_states_old()",
        "func _ready()",
        "func _input(event)",
        "func _process(delta)",
        "func _ready()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/main.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 4,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _init() functions (4)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init(parent_node = null)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_command(cmd_name, target, method_name)",
        "func parse(raw_input: String)",
        "func call_command(cmd: String, args: Array)",
        "func _init()",
        "func _ready()",
        "func _input(event: InputEvent)",
        "func _input_event(event: InputEvent)",
        "func _process(delta)",
        "func _physics_process(delta)",
        "func process_system()",
        "func each_blimp_of_delta()",
        "func update_delta_history(delta: float)",
        "func calculate_time(_delta_current, time, _hour, _minute, _second)",
        "func before_time_blimp(_how_many_finished, _how_many_shall_been_finished)",
        "func blimp_time_for_some_reason()",
        "func _on_interval_tick(interval_name: String)",
        "func track_delta_timing(_validation)",
        "func _setup_retry_timer()",
        "func _on_retry_timer_completed(timer_id: String)",
        "func ready_for_once()",
        "func process_pending_sets()",
        "func handle_creation_task(target_argument)",
        "func handle_unload_task(target_argument)",
        "func check_status()",
        "func check_status_just_timer()",
        "func track_task_status(task_id)",
        "func track_task_completion(task_id)",
        "func handle_task_timeout(task_id)",
        "func clear_task_queues()",
        "func first_dimensional_magic(type_of_action_to_do : String, datapoint_node : Node, additional_node : Node = null)",
        "func the_fourth_dimensional_magic(type_of_operation : String, node : Node, data_of_movement)",
        "func fifth_dimensional_magic(type_of_unloading : String, node_path_for_unload : String)",
        "func sixth_dimensional_magic(type_of_function, node_to_call, function_name : String, additional_data = null)",
        "func seventh_dimensional_magic(type_of_action : String, kind_of_action : String, amount_of_actions : int)",
        "func check_magical_array(path_of_the_node)",
        "func eight_dimensional_magic(type_of_message : String, message_now, receiver_name : String)",
        "func ninth_dimensional_magic(operation, path, texture = null)",
        "func newer_even_function_for_dictionary(name_of_container)",
        "func task_to_send_data_to_datapoint(data_for_sending)",
        "func interactions_upload_to_datapoint(header_line, information_lines, datapoint)",
        "func scene_frames_upload_to_datapoint(header_line, information_lines, datapointi, containeri)",
        "func load_cached_data_second_impact(data_set: String)",
        "func load_cached_data_second_impact_old(data_set: String)",
        "func instructions_analiser(metadata_parts, second_line, third_line, datapoint, container)",
        "func data_to_be_send_processing(container_name, data_id, path_for_datapoint, place_for_data, first_line, lines_parsed, data_set_name)",
        "func check_type_of_container(data_set_name)",
        "func check_scene_container(data_set_name)",
        "func test_single_core()",
        "func test_multi_threaded()",
        "func check_thread_status()",
        "func check_thread_status_type()",
        "func multi_threads_start_checker()",
        "func prepare_akashic_records()",
        "func create_new_task(function_name: String, data)",
        "func create_new_task_empty(function_name: String)",
        "func check_three_tries_for_threads(threads_0, threads_1, threads_2)",
        "func validate_thread_system()",
        "func three_stages_of_creation(data_set_name)",
        "func check_if_we_are_adding_container(path_of_the_node)",
        "func check_if_already_loading_one(set_name)",
        "func the_current_state_of_tree(set_name_now, the_state)",
        "func change_creation_set_name(record_type, additional_set_name_)",
        "func process_creation_further(record_type : String, amount : int)",
        "func whip_out_set_by_its_name(set_name_to_test)",
        "func attempt_creation(set_name: String)",
        "func queue_pusher_adder(task)",
        "func check_currently_being_created_sets()",
        "func process_stages()",
        "func first_stage_of_creation_(data_set_name_0, sets_to_create_0)",
        "func second_stage_of_creation_(data_set_name_1, sets_to_create_1)",
        "func second_impact_for_real(set_to_do_thingy)",
        "func third_stage_of_creation_(data_set_name_2, sets_to_create_2)",
        "func third_impact_right_now(data_set_thingiess)",
        "func fourth_impact_of_creation_(data_set_name_3, sets_to_create_3)",
        "func fourth_impact_right_now(data_set_nameeee)",
        "func fifth_impact_of_creation_(data_set_name_4, sets_to_create_4)",
        "func fifth_impact_right_now(data_set_nameeeeee)",
        "func sixth_impact_of_creation(data_set_name_6, sets_to_create_6)",
        "func sixth_impact_right_now(data_set_name_here)",
        "func file_creation(file_content,  path_for_file, name_for_file)",
        "func create_file(array_with_data: Array, lines_amount: int, name_for_file: String)",
        "func save_file_list_text(scan_results: Dictionary, output_file: String, target_directory: String)",
        "func create_default_settings(file_path_c_d_s)",
        "func save_file_list_json(scan_results: Dictionary, output_file: String = \"user://file_list.json\")",
        "func find_or_create_eden_directory()",
        "func file_finder(file_name, path_to_file, list_of_files, type_of_data)",
        "func check_folder(folder_path)",
        "func check_folder_content(directory)",
        "func check_settings_file(type_of_file)",
        "func update_main_path(updated_path)",
        "func update_database_path(updated_db_path)",
        "func scan_eden_directory(directory: String = \"D:/Eden\", indent: int = 0)",
        "func scan_available_storage()",
        "func scan_res_directory(directory: String = \"res://\", indent: int = 0)",
        "func scan_directory_with_sizes(directory: String, indent: int = 0)",
        "func get_data_structure_size(data)",
        "func get_jsh(property_name: String)",
        "func check_memory_state()",
        "func setup_settings()",
        "func clean_array(array_name: String)",
        "func clean_dictionary(dict_name: String)",
        "func data_splitter_some_function()",
        "func zippy_unzipper_data_center()",
        "func check_record_in_active(records_set_name)",
        "func check_record_in_cached(records_set_name)",
        "func check_set_limit(records_set_name)",
        "func check_current_set_container_count(record_set_name)",
        "func check_record_set_type(record_set_name)",
        "func check_if_first_time(set_name_first, the_current_of_energy)",
        "func containers_states_checker()",
        "func the_basic_sets_creation()",
        "func get_every_basic_set()",
        "func get_every_basic_set_()",
        "func check_if_every_basic_set_is_loaded()",
        "func container_finder(set_name)",
        "func initialize_menu(record_type: String)",
        "func find_record_set(record_type: String)",
        "func find_instructions_set(record_type: String)",
        "func find_scene_frames(record_type: String)",
        "func find_interactions_list(record_type: String)",
        "func record_mistake(mistake_data: Dictionary)",
        "func get_record_type_id(record_type: String)",
        "func get_cache_total_size()",
        "func get_dictionary_memory_size(dict: Dictionary)",
        "func find_highest_in_array(numbers: Array)",
        "func new_function_for_creation_recovery(record_type_now, first_stage_of_creation_now, stage_of_creation_now)",
        "func create_additional_record_set(record_type, current_container_count_check)",
        "func continue_recreation(data_to_work_on_additional_set, datapoint_name_thing, container_name_thing, set_name_to_work_on, current_container_count_check, record_type, amount_of_things, container_name)",
        "func create_record_from_script(record_type)",
        "func find_record_set_new_file_finder(data)",
        "func process_creation_request(set_name: String)",
        "func prepare_akashic_records_init()",
        "func load_record_set(records_part: String, record_type: String, type_of_data : int, records : Dictionary)",
        "func load_cached_data(data_set: String)",
        "func load_cached_record_to_active(records_set_name)",
        "func deep_copy_dictionary(original: Dictionary)",
        "func clean_oldest_dataset()",
        "func process_to_unload_records(container_name_to_unload)",
        "func unload_record_set(records_sets_name : String, record_type: String)",
        "func cache_data(records_sets_name: String, record_type: String, data, meta_data)",
        "func add_container_count(records_set_name)",
        "func recreator(number_to_add, data_to_process, data_set_name, new_name_for_set)",
        "func check_if_container_available(container)",
        "func check_if_datapoint_available(container)",
        "func check_if_datapoint_node_available(container)",
        "func build_pretty_print(node: Node, prefix: String = \"\", is_last: bool = true)",
        "func find_branch_to_unload(thing_path)",
        "func check_tree_branches()",
        "func print_tree_structure(branch: Dictionary, indent: int = 0)",
        "func jsh_tree_get_node(node_path_get_node: String)",
        "func containers_list_creator()",
        "func validate_container_state(container_name)",
        "func capture_tree_state()",
        "func capture_node_structure(node: Node)",
        "func start_up_scene_tree()",
        "func recreator_of_singular_thing(data_set)",
        "func recreate_missing_nodes(array_of_recreation)",
        "func unload_node_branch(path_for_node_to_unload, recreation_of_node_data)",
        "func attempt_container_repair(container_name, missing_nodes)",
        "func recreate_node_from_records(container_name: String, node_type: String, records: Dictionary)",
        "func tasked_children(node_to_be_added, node_to_be_added_path)",
        "func process_active_records_for_tree(active_records: Dictionary, set_name_to_process : String, container_name_here : String)",
        "func match_node_type(type: String)",
        "func the_pretender_printer(node_name: String, node_path_jsh_tree: String, godot_node_type, node_type: String = \"Node3D\")",
        "func unload_container(container_to_unload)",
        "func unload_nodes(array_of_thingiess_that_shall_remain)",
        "func cache_tree_branch_fully(container_to_unload)",
        "func cache_branch(branch_name, child_name, branch_part)",
        "func the_finisher_for_nodes(data_to_be_parsed)",
        "func disable_all_branches_reset_counters(branch_to_disable, container_name_for_array)",
        "func traverse_branch(branch: Dictionary)",
        "func traverse_branch(branch: Dictionary)",
        "func jsh_tree_get_node_status_changer(node_path_jsh_tree_status: String, node_name: String, node_to_check: Node)",
        "func connect_containers(container_name_0, container_name_1)",
        "func disable_all_branches(branch_to_disable)",
        "func traverse_branch(branch: Dictionary)",
        "func check_quick_functions()",
        "func check_short_functions()",
        "func preparer_for_combos(data_to_understand)",
        "func call_some_thingy()",
        "func process_turn_0(delta: float)",
        "func process_system_0()",
        "func process_system_1()",
        "func process_system_2()",
        "func process_system_3()",
        "func process_system_4()",
        "func process_system_5()",
        "func process_system_6()",
        "func process_system_7()",
        "func process_system_8()",
        "func process_system_9()",
        "func change_material_settings(material)",
        "func apply_texture_with_proper_settings(node_to_apply_texture, texture, node_type=\"default\")",
        "func get_ray_points(mouse_position: Vector2)",
        "func another_ray_cast(result)",
        "func process_ray_cast(stuff)",
        "func reset_debug_colors()",
        "func reset_collider_debug_color(collider)",
        "func highlight_collision_shape(collider)",
        "func combo_checker(node_to_check, state_of_button)",
        "func format_combo_for_display()",
        "func check_combo_patterns()",
        "func ray_cast_data_preparer(data_ray_cast)",
        "func multi_threaded_ray_cast(result, to, from)",
        "func old_multi_thread_thingy(result, to, from)",
        "func secondary_interaction_after_rc(array_of_data)",
        "func analise_data(thing_name_, type, data_to_analyze, second_part, group_number, verion_of_thing, information_lines_parsed)",
        "func create_circle_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func generate_circle_points(radius: float, num_points: int)",
        "func create_flat_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_text_label(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_array_mesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_textmesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func generate_rounded_rect(width: float, height: float, corner_radius: float, depth: float = 0.0)",
        "func create_rounded_button(node_name: String, first_line: Array, data_to_write: Array, group_name: String, version_of_thing: String, information_lines_parsed: Array, corner_radius: float = 0.1)",
        "func create_button_with_rounded_corners(node_name: String, first_line: Array, data_to_write: Array, \n\t\t\t\t\t\t\t\t\t\tgroup_name: String, version_of_thing: String, \n\t\t\t\t\t\t\t\t\t\tinformation_lines_parsed: Array, corner_radius: float = 0.1)",
        "func create_button(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_cursor(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_connection(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_screen(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_datapoint(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_container(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func get_spectrum_color(value: float)",
        "func node_creation(node_name, crafted_data, coords, to_rotate, group_number, node_type, path_of_thing)",
        "func add_texture_to_thing_task_creator(thing_node, node_type, color_params, path_for_thing)",
        "func add_texture_to_thing_preparer(data_to_create)",
        "func initialize_base_textures()",
        "func generate_rounded_rect_texture(width, height, corner_radius, color_value=0.5, alpha_value=1.0)",
        "func add_texture_to_thing(thing_node, node_type, mesh_data, color_params)",
        "func get_mesh_data(node)",
        "func toggle_textures()",
        "func is_textures_enabled()",
        "func generate_texture_for_shape(shape_data, node_type, default_params=null)",
        "func draw_polygon_texture(img, vertices, color_value, alpha_value)",
        "func draw_gradient_fill(img, base_color)",
        "func draw_ring(img, center, radius, color, thickness=2.0)",
        "func is_point_in_polygon(point, polygon)",
        "func draw_circle_texture(img, radius, num_points, color_value, alpha_value)",
        "func draw_button_texture(img, vertices, color_value, alpha_value)",
        "func draw_screen_texture(img, vertices, color_value, alpha_value)",
        "func draw_gradient_texture(img, color_value, alpha_value)",
        "func add_noise_pattern(img, base_color, intensity)",
        "func closest_point_on_segment(p, a, b)",
        "func generate_uvs_for_mesh(mesh_instance)",
        "func add_collision_to_thing(thing_node, node_type, path_of_thingy, name_of_thingy)",
        "func check_system_function(check_name: String)",
        "func check_if_scene_was_set(container_now)",
        "func setup_system_checks()",
        "func test_init()",
        "func retry_thread_initialization()",
        "func validate_system_environment()",
        "func log_error_state(error_type, details)",
        "func start_health_checks()",
        "func check_system_health()",
        "func handle_random_errors()",
        "func trigger_deep_repair(error_type: String)",
        "func breaks_and_handles_check()",
        "func breaks_and_handles_check_issue()",
        "func unlock_stuck_mutexes()",
        "func check_first_time_status(status_name: String)",
        "func is_creation_possible()",
        "func check_system_state(state_name: String)",
        "func set_system_state(state_name: String, new_state: SystemState)",
        "func check_system_readiness()",
        "func check_if_all_systems_are_green()",
        "func process_pre_delta_check()",
        "func get_system_state(state_name: String)",
        "func print_system_metrics()",
        "func first_turn_validation()",
        "func get_system_metrics()",
        "func initialize_integration()",
        "func register_records()",
        "func initialize_command_system()",
        "func initialize_reality_systems()",
        "func initialize_physical_reality(settings)",
        "func initialize_digital_reality(settings)",
        "func initialize_astral_reality(settings)",
        "func initialize_game()",
        "func initialize_digital_earthlings()",
        "func initialize_ai_system()",
        "func load_gemma_model(model_path)",
        "func generate_ai_response(data)",
        "func _on_ai_error(error_message)",
        "func query_ai(prompt)",
        "func generate_from_word(word: String)",
        "func generate_guardian_message(action: String)",
        "func simulate_gemma_response(message, context)",
        "func simulate_basic_response(message)",
        "func _cmd_reality(args)",
        "func _cmd_help(args)",
        "func setup_command_processor()",
        "func show_welcome_message()",
        "func register_command_handlers()",
        "func cmd_help(args)",
        "func get_lod(distance)",
        "func generate_icosphere(lod)",
        "func load_chunk(position)",
        "func generate_icosphere_old(lod: int, time: float)",
        "func _init(pos: Vector3, seed_hash: String)",
        "func _init(pos: Vector3, dir: Vector3, word: String)",
        "func load_chunk_old(position: Vector3, word_seed: String)",
        "func march_cubes()",
        "func generate_density_field(word: String, time: float)",
        "func check_for_deja_vu(concept, details)",
        "func trigger_normal_cleanup()",
        "func trigger_emergency_cleanup()",
        "func spawn_guardian(guardian_data)",
        "func shift_reality(new_reality)",
        "func apply_reality_rules(reality_type)",
        "func apply_color_palette(palette_name)",
        "func trigger_transition_effect(from_reality, to_reality)",
        "func spawn_entity(data)",
        "func transform_entity(data)",
        "func trigger_deja_vu(action, location)",
        "func select_guardian_type(action: String)",
        "func process_entity_interaction(interaction_data, entity_path)",
        "func remember(concept, details)",
        "func recall(concept)",
        "func _on_command_processed(command, result)",
        "func _cmd_create(args)",
        "func _cmd_transform(args)",
        "func _cmd_remember(args)",
        "func _cmd_shift(args)",
        "func initialize_command_parser()",
        "func create_command_parser(_unused)",
        "func register_command(data)",
        "func parse_command(input_text)",
        "func find_interface_text_node()",
        "func enter_command()",
        "func _cmd_guardian(args)",
        "func _cmd_deja_vu(args)",
        "func _cmd_spawn(args)",
        "func create_anomaly()",
        "func toggle_reality_containers(old_reality, new_reality)",
        "func cycle_reality()",
        "func get_spatiotemporal_hash(pos: Vector3, time_window: float)",
        "func get_spatiotemporal_hash_old(pos: Vector3, time_window: float)",
        "func handle_snake_menu_interaction(option, difficulty = \"normal\")",
        "func launch_snake_game(difficulty)",
        "func display_high_scores()",
        "func process_snake_button_click(button_name)",
        "func get_current_menu_context()",
        "func show_snake_game()",
        "func hide_snake_game()",
        "func position_camera_for_snake_game()",
        "func restore_camera_position()",
        "func setup_snake_input_handling()",
        "func restore_normal_input_handling()",
        "func _input_snake(event)",
        "func _cmd_glitch(args)",
        "func apply_visual_glitch(intensity, duration)",
        "func apply_physics_glitch(intensity, duration)",
        "func apply_audio_glitch(intensity, duration)",
        "func apply_time_glitch(intensity, duration)",
        "func create_glitch_effect(parameter, intensity, duration_str)",
        "func _cmd_speak(args)",
        "func calculate_word_density(word: String, pos: Vector3, time: float)",
        "func initialize_volume(size: int)",
        "func get_guardian_color(guardian_type)",
        "func get_reality_color(reality)",
        "func _on_main_node_signal(signal_name, signal_data)",
        "func _on_task_discarded(task)",
        "func _on_task_started(task)",
        "func _on_reality_shifted(old_reality, new_reality)",
        "func _on_guardian_spawned(guardian_type, location)",
        "func _on_deja_vu_triggered(trigger_data)",
        "func connect_signals()",
        "func apply_reality_shader(reality_type)",
        "func register_with_banks_combiner()",
        "func register_digital_earthlings_records()",
        "func test_thread_system()",
        "func initialize_thread_system()",
        "func cmd_threads(args)",
        "func cmd_thread_status(args)",
        "func cmd_reset_threads(args)",
        "func process_system_snake(delta)",
        "func character_move_forward()",
        "func character_move_backward()",
        "func character_move_left()",
        "func character_move_right()",
        "func character_stop()",
        "func first_dimensional_magic_snake(type_of_action_to_do, datapoint_node, additional_node = null)",
        "func three_stages_of_creation_snake(set_name: String)",
        "func create_character()",
        "func create_racing_game_integrator()",
        "func create_records_entries()",
        "func add_available_record_sets()",
        "func initialize_console_system()",
        "func start_racing_game()",
        "func position_camera_for_racing_game()",
        "func setup_racing_game_input_handling()",
        "func set_up_racing_game(container_name, visibility)",
        "func hide_racing_game()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/text_screen.gd",
      "class_name": "JSHTextWindow",
      "extends_from": "UniversalBeingBase",
      "ready_count": 3,
      "init_count": 1,
      "process_count": 2,
      "input_count": 2,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (3)",
        "Multiple _process() functions (2)",
        "Multiple _input() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_command(command_name: String, callback: Callable)",
        "func unregister_command(command_name: String)",
        "func execute_command(command_name: String, _args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func _process(delta)",
        "func _input(event)",
        "func _ready_0()",
        "func _process_0(delta)",
        "func _input_0(event)",
        "func _setup_components()",
        "func _create_border()",
        "func _setup_signals()",
        "func find_integration_nodes()",
        "func setup_window()",
        "func setup_signals()",
        "func find_integration_nodes_0()",
        "func register_default_commands()",
        "func _cmd_help(args: Array)",
        "func create_window_background()",
        "func create_border()",
        "func create_title_bar()",
        "func create_text_area()",
        "func create_control_buttons()",
        "func create_input_line()",
        "func create_cursor()",
        "func create_button(button_name, button_position, size, color, label_text)",
        "func add_window_collision()",
        "func _on_window_input_event(_camera, event, event_position, _normal, _shape_idx)",
        "func _on_window_mouse_entered()",
        "func _on_window_mouse_exited()",
        "func _on_button_input_event(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func _on_cursor_timer_timeout()",
        "func _submit_text()",
        "func _navigate_command_history(up: bool)",
        "func _update_cursor_position()",
        "func _process_command(command_text: String)",
        "func _update_display()",
        "func _update_border_color()",
        "func toggle_minimized()",
        "func scroll_messages_up()",
        "func scroll_messages_down()",
        "func update_text_display()",
        "func add_text(text: String)",
        "func clear_text()",
        "func focus()",
        "func unfocus()",
        "func register_command(command_name: String, callback: Callable)",
        "func resize(new_width, new_height)",
        "func set_text(text_content, format_links = true)",
        "func process_text_links()",
        "func _submit_text_0()",
        "func _navigate_command_history_0(up: bool)",
        "func _update_cursor_position_0()",
        "func _process_command_0(command_text: String)",
        "func _on_cursor_timer_timeout_0()",
        "func _update_display_0()",
        "func _update_border_color_0()",
        "func add_text_0(text: String)",
        "func clear_text_0()",
        "func focus_0()",
        "func unfocus_0()",
        "func register_command_0(command_name: String, callback: Callable)",
        "func resize_0(new_width, new_height)",
        "func set_text_0(text_content, format_links = true)",
        "func update_text_display_0()",
        "func process_text_links_0()",
        "func create_control_buttons_0()",
        "func create_button_0(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_0(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func toggle_minimized_0()",
        "func scroll_messages_up_0()",
        "func scroll_messages_down_0()",
        "func add_system_message(message)",
        "func add_message(message, sender_name = \"User\")",
        "func link_to_datapoint(datapoint_path: String)",
        "func update_from_datapoint(datapoint_path: String)",
        "func create_text_area_0()",
        "func add_window_collision_0()",
        "func _setup_components_old()",
        "func _create_border_old()",
        "func _setup_signals_old()",
        "func find_integration_nodes_old()",
        "func _process_old_v3(delta)",
        "func _input_old_v4(event)",
        "func _submit_text_old()",
        "func _navigate_command_history_old(up: bool)",
        "func _update_cursor_position_old()",
        "func _process_command_old(command_text: String)",
        "func _on_cursor_timer_timeout_old()",
        "func _update_display_old()",
        "func _update_border_color_old()",
        "func add_text_old(text: String)",
        "func clear_text_old()",
        "func focus_old()",
        "func unfocus_old()",
        "func register_command_old(command_name: String, callback: Callable)",
        "func resize_old(new_width, new_height)",
        "func set_text_old(text_content, format_links = true)",
        "func update_text_display_old()",
        "func process_text_links_old()",
        "func create_control_buttons_old()",
        "func create_button_old(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_old(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func toggle_minimized_old()",
        "func scroll_messages_up_old()",
        "func scroll_messages_down_old()",
        "func add_system_message_old(message)",
        "func add_message_old(message, sender_name = \"User\")",
        "func create_text_window_container(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func setup_text_window_commands(window_node: JSHTextWindow)",
        "func _cmd_help_0(args: Array)",
        "func _cmd_clear(_args: Array)",
        "func change_color_of_letter_or_s(string)",
        "func _on_window_input_event_0(camera, event, position, normal, shape_idx)",
        "func _on_window_mouse_entered_0()",
        "func _on_window_mouse_exited_0()",
        "func setup_window_0()",
        "func register_command(command_name: String, callback: Callable)",
        "func unregister_command(command_name: String)",
        "func _ready_old_v3()",
        "func _ready_old_v2()",
        "func _ready_old()",
        "func _ready_old_v1()",
        "func _process_old(delta)",
        "func _process_old_v1(delta)",
        "func _input_old(event)",
        "func _input_old_v1(event)",
        "func _setup_signals_old_v1()",
        "func clear_text_old_v1()",
        "func focus_old_v1()",
        "func unfocus_old_v1()",
        "func register_command_old_v1(command_name: String, callback: Callable)",
        "func add_system_message_old_v1(message)",
        "func _cmd_teleport(args: Array)",
        "func _cmd_resize(args: Array)",
        "func _cmd_color(args: Array)",
        "func setup_input_handling()",
        "func process_keyboard_input()",
        "func _on_cursor_blink()",
        "func setup_text_window_commands_old(window_node: JSHTextWindow)",
        "func setup_cursor_blink()",
        "func update_cursor_position()",
        "func setup_main_reference(main_ref)",
        "func create_window_background_0()",
        "func create_title_bar_0()",
        "func create_message_area()",
        "func create_input_field()",
        "func update_message_display()",
        "func execute_command(name: String, args: Array)",
        "func _on_window_input_event(camera, event, position, normal, shape_idx)",
        "func execute_command(name: String, args: Array)",
        "func _cmd_teleport(args: Array)",
        "func _cmd_resize(args: Array)",
        "func _cmd_color(args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func execute_command(name: String, args: Array)",
        "func execute_command(name: String, args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func _process(delta)",
        "func _input(event)",
        "func setup_window()",
        "func _setup_components()",
        "func _create_border()",
        "func _setup_signals()",
        "func find_integration_nodes()",
        "func _submit_text()",
        "func _navigate_command_history(up: bool)",
        "func _update_cursor_position()",
        "func _process_command(command_text: String)",
        "func _on_cursor_timer_timeout()",
        "func _update_display()",
        "func _update_border_color()",
        "func add_text(text: String)",
        "func clear_text()",
        "func focus()",
        "func unfocus()",
        "func register_command(command_name: String, callback: Callable)",
        "func resize(new_width, new_height)",
        "func set_text(text_content, format_links = true)",
        "func update_text_display()",
        "func process_text_links()",
        "func create_control_buttons()",
        "func create_button(name, position, size, color, label_text)",
        "func _on_button_input_event(name, camera, event, pos, normal, shape_idx)",
        "func toggle_minimized()",
        "func scroll_messages_up()",
        "func scroll_messages_down()",
        "func add_system_message(message)",
        "func add_message(message, sender_name = \"User\")",
        "func create_text_window_container(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func setup_text_window_commands(window_node: JSHTextWindow)",
        "func _cmd_help(args: Array)",
        "func _cmd_clear(_args: Array)",
        "func change_color_of_letter_or_s(string)",
        "func _on_window_mouse_entered()",
        "func _on_window_mouse_exited()",
        "func _on_window_input_event(camera, event, position, normal, shape_idx)",
        "func resize_old_v1(new_width, new_height)",
        "func setup_input_handling_old()",
        "func set_text_old_v1(string_text)",
        "func change_color_of_letter_or_s_old(string)",
        "func create_control_buttons_old_v1()",
        "func create_text_area_old()",
        "func create_title_bar_old_v1()",
        "func _setup_components_old_v1()",
        "func _create_border_old_v1()",
        "func _submit_text_old_v1()",
        "func _navigate_command_history_old_v1(up: bool)",
        "func add_text_old_v1(text: String)",
        "func _update_display_old_v1()",
        "func _update_border_color_old_v1()",
        "func _update_cursor_position_old_v1()",
        "func _process_command_old_v1(command_text: String)",
        "func _on_cursor_timer_timeout_old_v1()",
        "func create_text_window_container_old(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func _cmd_help_old(args: Array)",
        "func _cmd_clear_old(_args: Array)",
        "func _cmd_teleport_old(args: Array)",
        "func _cmd_resize_old(args: Array)",
        "func _cmd_color_old(args: Array)",
        "func find_integration_nodes_old_v1()",
        "func scroll_messages_up_old_v1()",
        "func scroll_messages_down_old_v1()",
        "func create_text_area_old_v1()",
        "func create_control_buttons_old_v2()",
        "func create_button_old_v1(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_old_v1(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func add_window_collision_old()",
        "func set_text_old_v2(text_content, format_links = true)",
        "func update_text_display_old_v1()",
        "func process_text_links_old_v2()",
        "func create_window_background_old()",
        "func create_title_bar_old()",
        "func create_control_buttons_old_v3()",
        "func create_button_old_v2(button_name, button_position, size, color, label_text)",
        "func add_window_collision_old_v1()",
        "func add_message_old_v1(message, sender_name = \"User\")",
        "func toggle_minimized_old_v1()",
        "func create_window_background_old_v1()",
        "func setup_window_old()",
        "func setup_window_old_v1()",
        "func _setup_signals_old_v2()",
        "func clear_text_old_v2()",
        "func focus_old_v2()",
        "func unfocus_old_v2()",
        "func register_command_old_v2(command_name: String, callback: Callable)",
        "func add_system_message_old_v2(message)"
      ]
    }
  ],
  "warning_details": [
    {
      "file_path": "scripts/enhanced_command_registrar.gd",
      "class_name": "EnhancedCommandRegistrar",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _start_registration_sequence()",
        "func _attempt_immediate_registration()",
        "func _schedule_delayed_registration()",
        "func _attempt_delayed_registration(delay: float)",
        "func _start_persistent_monitoring()",
        "func _perform_registration()",
        "func _register_commands_standard()",
        "func _register_commands_fallback()",
        "func _register_commands_force()",
        "func _attempt_fallback_registration()",
        "func _verify_registration()",
        "func _test_single_command(command_name: String)",
        "func _test_command_availability()",
        "func _generate_diagnostic_report(verification_results: Dictionary)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_registration_status()",
        "func force_re_registration()",
        "func test_all_commands()",
        "func _on_commands_registered(success: bool)",
        "func _on_registration_diagnostic(message: String)"
      ]
    },
    {
      "file_path": "scripts/main_game_controller.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _process(delta)",
        "func _ready()",
        "func _setup_jsh_framework()",
        "func _on_jsh_tree_updated()",
        "func _on_jsh_branch_added(branch_path: String, _branch_data: Dictionary)",
        "func _on_systems_ready()",
        "func _on_startup_error(error_message: String)",
        "func _enable_game_features()",
        "func _setup_input_handlers()",
        "func _setup_ui_elements()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_system_status()",
        "func run_health_check()",
        "func test_floodgate()",
        "func is_ready()",
        "func _setup_ragdoll_system()",
        "func _setup_astral_beings()",
        "func _setup_mouse_interaction()",
        "func _setup_dimensional_ragdoll()",
        "func _setup_layer_system()",
        "func _setup_akashic_bridge()",
        "func _add_quick_test_commands()",
        "func _add_test_commands_to_console(console: Node)",
        "func _on_commands_registered(success: bool)",
        "func _on_registration_diagnostic(message: String)"
      ]
    },
    {
      "file_path": "scripts/autoload/advanced_inspector_loader.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _load_integration_patch()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/autoload/claude_timer_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_task(task_name: String, project: String = \"\")",
        "func complete_task()",
        "func user_message_received()",
        "func switch_project(project_id: String)",
        "func get_session_metrics()",
        "func get_project_time(project_id: String)",
        "func add_autonomous_project(project_id: String, priority: int = 1)",
        "func _sort_by_priority(a, b)",
        "func _on_user_wait_threshold(_wait_time: float)",
        "func _start_autonomous_mode()",
        "func _perform_autonomous_work(project_id: String)",
        "func _exit_autonomous_mode()",
        "func get_timer_report()",
        "func set_wait_threshold(seconds: float)"
      ]
    },
    {
      "file_path": "scripts/autoload/console_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func debug_print(message: String, level: int = 2)",
        "func _ready()",
        "func _safe_initialize()",
        "func _wait_for_floodgate_systems()",
        "func _check_systems_ready()",
        "func _create_passive_controller()",
        "func _create_threaded_system()",
        "func _create_physics_manager()",
        "func _create_project_manager()",
        "func _create_timer_system()",
        "func _create_todo_manager()",
        "func _create_object_inspector()",
        "func _create_windows_console_fix()",
        "func _unhandled_input(event: InputEvent)",
        "func _create_console_ui()",
        "func _apply_settings()",
        "func toggle_console()",
        "func _on_command_submitted(text: String)",
        "func _print_to_console(text: String)",
        "func _navigate_history(direction: int)",
        "func _on_settings_changed()",
        "func register_command(command_name: String, callback: Callable, description: String = \"\")",
        "func _execute_command(command_text: String)",
        "func _cmd_help(_args: Array)",
        "func _cmd_test_tutorial(_args: Array)",
        "func _on_tutorial_test_completed(test_name: String, result: String, success: bool)",
        "func _on_tutorial_finished(total_tests: int, passed: int, failed: int)",
        "func _cmd_console_settings(args: Array)",
        "func _cmd_set_scale(args: Array)",
        "func _cmd_create(args: Array)",
        "func _cmd_create_tree(_args: Array)",
        "func _cmd_create_rock(_args: Array)",
        "func _cmd_create_box(_args: Array)",
        "func _cmd_create_ball(_args: Array)",
        "func _cmd_create_ramp(_args: Array)",
        "func _cmd_create_wall(_args: Array)",
        "func _cmd_create_stick(_args: Array)",
        "func _cmd_create_leaf(_args: Array)",
        "func _cmd_list_assets(_args: Array)",
        "func _on_asset_created(asset_name: String, properties: Dictionary)",
        "func _cmd_toggle_rules(args: Array)",
        "func _cmd_clear_objects(args: Array)",
        "func _cmd_list_objects(_args: Array)",
        "func _cmd_delete_object(args: Array)",
        "func _cmd_ragdoll_command(args: Array)",
        "func _cmd_physics(args: Array)",
        "func _cmd_make_ragdoll_say(args: Array)",
        "func _cmd_scene(args: Array)",
        "func _cmd_load_scene(args: Array)",
        "func _cmd_save_scene(args: Array)",
        "func _cmd_ragdoll_walk(_args: Array)",
        "func _cmd_spawn_ragdoll(_args: Array)",
        "func _cmd_spawn_skeleton_ragdoll(_args: Array)",
        "func _cmd_create_sun(_args: Array)",
        "func _cmd_create_astral_being(args: Array)",
        "func _cmd_astral_control(args: Array)",
        "func _cmd_create_pathway(_args: Array)",
        "func _cmd_create_bush(_args: Array)",
        "func _cmd_create_fruit(_args: Array)",
        "func _cmd_create_pigeon(_args: Array)",
        "func _cmd_generate_world(args: Array)",
        "func _cmd_scene_status(_args: Array)",
        "func _cmd_restore_ground(_args: Array)",
        "func _cmd_passive_mode(args: Array)",
        "func _cmd_add_task(args: Array)",
        "func _cmd_branch(args: Array)",
        "func _cmd_commit(args: Array)",
        "func _cmd_merge_request(args: Array)",
        "func _cmd_merge(args: Array)",
        "func _cmd_workflow_status(args: Array)",
        "func _cmd_test_features(args: Array)",
        "func _cmd_test_being_assets(_args: Array)",
        "func _cmd_gizmo(args: Array)",
        "func _cmd_version_control(args: Array)",
        "func _cmd_physics_control(args: Array)",
        "func _cmd_project_manager(args: Array)",
        "func _cmd_timing_info(_args: Array)",
        "func _cmd_debug_screen(args: Array)",
        "func _cmd_select_object(args: Array)",
        "func _cmd_move_object(args: Array)",
        "func _cmd_rotate_object(args: Array)",
        "func _cmd_scale_object(args: Array)",
        "func _cmd_awaken_object(args: Array)",
        "func _cmd_change_state(args: Array)",
        "func _find_object_by_name_or_id(target: String)",
        "func _string_to_state(state_name: String)",
        "func _state_to_string(state: int)",
        "func _cmd_timer_control(args: Array)",
        "func _cmd_task_management(args: Array)",
        "func _cmd_multi_todos(args: Array)",
        "func _cmd_balance_workload(_args: Array)",
        "func _cmd_floodgate_status(_args: Array)",
        "func _cmd_queue_status(args: Array)",
        "func _cmd_health_check(_args: Array)",
        "func _cmd_test_floodgate(_args: Array)",
        "func _cmd_system_status(_args: Array)",
        "func _find_ragdoll_controller()",
        "func _find_astral_beings()",
        "func _cmd_ragdoll_come_here(_args: Array)",
        "func _cmd_ragdoll_pickup_nearest(_args: Array)",
        "func _cmd_ragdoll_drop(_args: Array)",
        "func _cmd_ragdoll_organize(_args: Array)",
        "func _cmd_ragdoll_patrol(_args: Array)",
        "func _cmd_beings_status(_args: Array)",
        "func _cmd_beings_help_ragdoll(_args: Array)",
        "func _cmd_beings_organize(_args: Array)",
        "func _cmd_beings_harmony(_args: Array)",
        "func _cmd_setup_systems(_args: Array)",
        "func _cmd_test_mouse_click(_args: Array)",
        "func _cmd_object_inspector(args: Array)",
        "func _cmd_object_info(args: Array)",
        "func _cmd_action_list(_args: Array)",
        "func _cmd_action_test(args: Array)",
        "func _cmd_action_combo(args: Array)",
        "func _find_mouse_interaction_system()",
        "func _cmd_dimension_shift(args: Array)",
        "func _cmd_consciousness_add(args: Array)",
        "func _cmd_emotion_set(args: Array)",
        "func _cmd_cast_spell(args: Array)",
        "func _cmd_ragdoll_status(_args: Array)",
        "func _find_dimensional_ragdoll()",
        "func _cmd_console_debug_toggle(_args: Array)",
        "func _cmd_performance_stats(_args: Array)",
        "func _cmd_process_manager(args: Array)",
        "func _cmd_debug_panel_status(_args: Array)",
        "func _cmd_object_limits(_args: Array)",
        "func _cmd_talk_to_beings(args: Array)",
        "func _cmd_being_count(_args: Array)",
        "func _cmd_help_ragdoll(args: Array)",
        "func _cmd_jsh_status(_args: Array)",
        "func _cmd_container(args: Array)",
        "func _cmd_thread_status(_args: Array)",
        "func _cmd_scene_tree(_args: Array)",
        "func _print_scene_tree_recursive(node: Node, depth: int)",
        "func _cmd_akashic_save(args: Array)",
        "func _cmd_akashic_load(args: Array)",
        "func _cmd_physics_test(args: Array)",
        "func _cmd_inspect_object(args: Array)",
        "func _find_node_by_name(scene_node: Node, name: String)",
        "func _cmd_ragdoll_debug(args: Array)",
        "func _show_debug_physics_info()",
        "func _cmd_ragdoll_move(args: Array)",
        "func _cmd_ragdoll_speed(args: Array)",
        "func _cmd_ragdoll_run(_args: Array)",
        "func _cmd_ragdoll_crouch(_args: Array)",
        "func _cmd_ragdoll_jump(_args: Array)",
        "func _cmd_ragdoll_rotate(args: Array)",
        "func _cmd_ragdoll_stand(_args: Array)",
        "func _cmd_ragdoll_state(_args: Array)",
        "func _cmd_tutorial(args: Array)",
        "func _cmd_tutorial_start(_args: Array)",
        "func _cmd_tutorial_stop(_args: Array)",
        "func _cmd_tutorial_status(_args: Array)",
        "func _cmd_tutorial_hide(_args: Array)",
        "func _cmd_tutorial_show(_args: Array)",
        "func _cmd_spawn_ragdoll_v2(args: Array)",
        "func _cmd_ragdoll2_move(args: Array)",
        "func _cmd_ragdoll2_state(_args: Array)",
        "func _cmd_ragdoll2_debug(_args: Array)",
        "func _cmd_interactive_tutorial(_args: Array)",
        "func _cmd_universal_being(args: Array)",
        "func _ubeing_create(args: Array)",
        "func _ubeing_transform(args: Array)",
        "func _ubeing_edit(args: Array)",
        "func _ubeing_connect(args: Array)",
        "func _ubeing_list(args: Array)",
        "func _ubeing_inspect(args: Array)",
        "func _ubeing_interface(args: Array)",
        "func _find_universal_being(identifier: String)",
        "func _cmd_ui_create(args: Array)",
        "func _cmd_grid_show(args: Array)",
        "func _cmd_txt_rules(_args: Array)",
        "func _get_mouse_world_position()",
        "func _cmd_list_scene_objects(_args: Array)",
        "func _list_children_recursive(node: Node, depth: int, count_ref: int)",
        "func _cmd_open_asset_creator(_args: Array)",
        "func _cmd_test_cube(_args: Array)",
        "func _on_cube_clicked(camera: Camera3D, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int, cube: RigidBody3D)",
        "func _cmd_inspect_cube(_args: Array)",
        "func _cmd_viewport_info(_args: Array)",
        "func _cmd_camera_rays(_args: Array)",
        "func _cmd_make_conscious(args: Array)",
        "func _cmd_being_think(args: Array)",
        "func _cmd_show_needs(args: Array)",
        "func _cmd_show_goals(args: Array)",
        "func _cmd_neural_connect(args: Array)",
        "func _cmd_consciousness_level(args: Array)",
        "func _cmd_neural_status(_args: Array)",
        "func _cmd_spawn_conscious_tree(args: Array)",
        "func _cmd_spawn_conscious_astral(args: Array)",
        "func _cmd_test_consciousness(_args: Array)",
        "func _find_beings_recursive(node: Node, beings: Array)",
        "func _find_all_conscious_beings(node: Node, conscious_beings: Array)",
        "func _create_progress_bar(value: float, max_value: float, width: int)",
        "func _cmd_zone_create(args: PackedStringArray)",
        "func _cmd_zone_list(args: PackedStringArray)",
        "func _cmd_zone_connect(args: PackedStringArray)",
        "func _register_zone_commands()",
        "func _cmd_shape(args: PackedStringArray)",
        "func _cmd_bone(args: PackedStringArray)",
        "func _cmd_create_being(args: PackedStringArray)",
        "func _register_asset_creator_commands()",
        "func _initialize_new_systems()",
        "func _cmd_create_gemma_garden(args: Array)",
        "func _cmd_give_knowledge_cube(args: Array)",
        "func _cmd_give_experience_orb(args: Array)",
        "func _cmd_give_creativity_spark(args: Array)",
        "func _cmd_seedling_status(args: Array)",
        "func _cmd_garden_health_check(args: Array)",
        "func _cmd_enable_peaceful_growth(args: Array)",
        "func _cmd_gemma_look_at(args: Array)",
        "func _cmd_gemma_scan_patterns(args: Array)",
        "func _cmd_feed_gemma_text(args: Array)",
        "func _cmd_gemma_vision_status(args: Array)",
        "func _cmd_increase_gemma_curiosity(args: Array)",
        "func _cmd_show_gemma_layers(args: Array)",
        "func _cmd_open_being_creator(args: Array)"
      ]
    },
    {
      "file_path": "scripts/autoload/dialogue_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func make_ragdoll_say(text: String)",
        "func get_next_custom_dialogue()",
        "func set_mood(new_mood: String)",
        "func modify_dialogue(base_text: String)",
        "func show_dialogue(text: String, position: Vector3)"
      ]
    },
    {
      "file_path": "scripts/autoload/dynamic_viewport_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _detect_and_apply_optimal_settings()",
        "func _register_commands()",
        "func _set_window_size(size: Vector2i)",
        "func _center_window()",
        "func _set_fullscreen(enabled: bool)",
        "func _cmd_viewport_info(_args: Array)",
        "func _cmd_set_window_size(args: Array)",
        "func _cmd_toggle_fullscreen(args: Array)",
        "func _cmd_set_window_mode(args: Array)",
        "func _cmd_center_window(_args: Array)",
        "func _cmd_list_screens(_args: Array)",
        "func _cmd_move_to_screen(args: Array)",
        "func _get_window_mode_name(mode: int)",
        "func _get_aspect_ratio_name(ratio: float)",
        "func _input(event: InputEvent)",
        "func _notification(what: int)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/autoload/layer_reality_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_layers()",
        "func _setup_debug_draw()",
        "func _create_debug_material()",
        "func _unhandled_input(event: InputEvent)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_layer_visibility(layer: Layer, visible: bool)",
        "func toggle_layer(layer: Layer)",
        "func cycle_view_mode()",
        "func _apply_view_mode()",
        "func _update_viewport_layout()",
        "func _setup_single_view(_screen_size: Vector2)",
        "func _setup_dual_view(_screen_size: Vector2)",
        "func _setup_triple_view(_screen_size: Vector2)",
        "func _setup_quad_view(_screen_size: Vector2)",
        "func add_debug_point(position: Vector3, color: Color = Color.WHITE, size: float = 0.1)",
        "func add_debug_line(from: Vector3, to: Vector3, color: Color = Color.WHITE)",
        "func add_debug_path(points: PackedVector3Array, color: Color = Color.GREEN)",
        "func clear_debug_draw()",
        "func _update_debug_draw()",
        "func align_to_camera()",
        "func align_to_origin()",
        "func add_to_layer(node: Node, layer: Layer)",
        "func remove_from_layer(node: Node, layer: Layer)",
        "func add_text_entity(id: String, text: String, world_pos: Vector3)",
        "func update_height_map(position: Vector2, height: float, color: Color)",
        "func _update_2d_texture(position: Vector2, height: float, color: Color)",
        "func toggle_split_screen()",
        "func get_active_layers()",
        "func is_layer_visible(layer: Layer)",
        "func get_layer_node(layer: Layer)",
        "func register_console_commands()",
        "func _console_layer_command(args: Array)",
        "func _console_reality_command(args: Array)"
      ]
    },
    {
      "file_path": "scripts/autoload/multi_todo_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_default_todos()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func add_todo(project_id: String, content: String, priority: String = \"medium\")",
        "func complete_todo(project_id: String, todo_id: String)",
        "func modify_todo(project_id: String, todo_id: String, new_content: String, reason: String = \"\")",
        "func step_back_todo(project_id: String, todo_id: String)",
        "func get_project_todos(project_id: String)",
        "func get_all_pending_todos()",
        "func get_priority_todos(priority: String)",
        "func get_session_summary()",
        "func generate_todo_id()",
        "func get_formatted_todos(project_id: String = \"\")",
        "func balance_workload()"
      ]
    },
    {
      "file_path": "scripts/autoload/pentagon_activity_monitor.gd",
      "class_name": "PentagonActivityMonitor",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 0,
      "process_count": 1,
      "input_count": 0,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_monitoring_system()",
        "func log_pentagon_call(function_name: String, script_path: String, extra_data: Dictionary = {})",
        "func _log_pentagon_call(function_name: String, script_path: String, extra_data: Dictionary = {})",
        "func mark_script_active(script_path: String)",
        "func mark_script_dormant(script_path: String)",
        "func analyze_pentagon_compliance(script_path: String, has_functions: Dictionary)",
        "func _start_current_run()",
        "func _end_current_run()",
        "func _generate_session_id()",
        "func _save_run_histories()",
        "func _load_run_histories()",
        "func _process(delta: float)",
        "func _update_performance_stats()",
        "func get_activity_report()",
        "func get_script_activity(script_path: String)",
        "func get_run_comparison()",
        "func console_pentagon_status()",
        "func _format_top_scripts(scripts: Array)",
        "func console_pentagon_history()",
        "func _notification(what: int)",
        "func scan_all_scripts()",
        "func _find_script_files(path: String, found_files: Array)",
        "func _analyze_script_file(script_path: String)"
      ]
    },
    {
      "file_path": "scripts/autoload/scene_loader.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _copy_example_scenes()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func save_default_scene()",
        "func load_scene(scene_name: String)",
        "func _parse_scene_line(line: String, line_number: int)",
        "func _create_object_at_position(type: String, position: Vector3, properties: Dictionary)",
        "func _create_ragdoll_at_position(position: Vector3, properties: Dictionary)",
        "func _apply_properties(obj: Node3D, properties: Dictionary)",
        "func save_current_scene()",
        "func _object_to_scene_line(obj: Node3D)",
        "func _vector_to_string(v: Vector3)",
        "func list_available_scenes()",
        "func create_scene_from_template(scene_name: String, template: String)"
      ]
    },
    {
      "file_path": "scripts/autoload/ui_settings_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func load_settings()",
        "func save_settings()",
        "func get_scaled_value(base_value: float)",
        "func get_console_rect()",
        "func set_ui_scale(scale: float)",
        "func set_console_position(pos: String)",
        "func _on_viewport_size_changed()"
      ]
    },
    {
      "file_path": "scripts/autoload/universal_object_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _log(message: String, level: String = \"INFO\")",
        "func _connect_to_systems()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_object(type: String, position: Vector3, properties: Dictionary = {})",
        "func _register_with_all_systems(_uuid: String, obj: Node, type: String, _data: Dictionary)",
        "func get_object_by_uuid(uuid: String)",
        "func get_object_by_name(object_name: String)",
        "func get_object_data(uuid: String)",
        "func get_objects_by_type(type: String)",
        "func get_all_objects()",
        "func get_object_count()",
        "func modify_object(uuid: String, changes: Dictionary)",
        "func destroy_object(uuid: String)",
        "func destroy_all_objects()",
        "func _generate_uuid()",
        "func _get_caller_info()",
        "func get_statistics()",
        "func _process(_delta: float)",
        "func register_console_commands()",
        "func _cmd_statistics(_args: Array)",
        "func _cmd_list_all(_args: Array)",
        "func _cmd_inspect(args: Array)",
        "func _cmd_clear_all(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/autoload/windows_console_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _detect_terminal_capabilities()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func safe_print(text: String)",
        "func _convert_to_ascii(text: String)",
        "func _sanitize_unicode(text: String)",
        "func create_ascii_frame(width: int, height: int, title: String = \"\")",
        "func create_progress_bar(current: float, maximum: float, width: int = 20)",
        "func create_status_display(project: String, status: String, progress: float)",
        "func console_print(manager: Node, text: String)",
        "func test_terminal_calibration()",
        "func patch_console_manager(console_manager: Node)"
      ]
    },
    {
      "file_path": "scripts/autoload/world_builder.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func debug_print(message: String, level: int = 2)",
        "func _get_std_objects()",
        "func _ready()",
        "func get_mouse_spawn_position()",
        "func create_tree()",
        "func _fallback_create_tree()",
        "func create_rock()",
        "func create_box()",
        "func create_ball()",
        "func create_ramp()",
        "func create_ragdoll()",
        "func create_sun()",
        "func create_astral_being()",
        "func create_pathway()",
        "func create_bush()",
        "func create_fruit()",
        "func create_pigeon()",
        "func clear_all_objects()",
        "func get_spawned_objects()",
        "func register_world_object(obj: Node3D)",
        "func delete_object(object_name: String)",
        "func _fallback_create_rock()",
        "func _fallback_create_box()",
        "func _fallback_create_ball()",
        "func _fallback_create_ramp()",
        "func create_object(object_type: String)",
        "func _fallback_create_object(object_type: String)"
      ]
    },
    {
      "file_path": "scripts/camera/camera_controller.gd",
      "class_name": "CameraMovementSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _disable_scene_camera()",
        "func _disable_scene_camera_final()",
        "func _process(delta: float)",
        "func _ensure_camera_system_protection()",
        "func _create_camera_target()",
        "func _create_trackball_camera()",
        "func _setup_camera_properties()",
        "func _create_cursor_universal_being()",
        "func _register_camera_commands()",
        "func _handle_movement_input()",
        "func _update_movement(delta: float)",
        "func _cmd_camera_reset(_args: Array)",
        "func _cmd_camera_distance(args: Array)",
        "func _cmd_camera_target(args: Array)",
        "func _cmd_camera_info(_args: Array)",
        "func _cmd_camera_follow(args: Array)",
        "func _cmd_camera_movement(args: Array)",
        "func _cmd_camera_help(_args: Array)",
        "func _cmd_camera_debug(_args: Array)",
        "func _cmd_camera_test_input(_args: Array)",
        "func _cmd_camera_create_cursor(_args: Array)",
        "func _cmd_camera_reactivate(_args: Array)",
        "func _cmd_camera_reset_offset(_args: Array)",
        "func _cmd_camera_set_threshold(args: Array)",
        "func _cmd_camera_unfreeze(_args: Array)",
        "func _cmd_camera_trigger_offset(_args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_camera()",
        "func get_target()",
        "func set_camera_distance(distance: float)",
        "func set_camera_target_position(position: Vector3)",
        "func enable_camera(enabled: bool)",
        "func get_camera_info()"
      ]
    },
    {
      "file_path": "scripts/camera/trackball_camera.gd",
      "class_name": "TrackballCamera3D",
      "extends_from": "Camera3D",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func _input(event: InputEvent)",
        "func _process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()",
        "func ready()",
        "func input(event: InputEvent)",
        "func handle_mouse_input(event: InputEvent)",
        "func process(delta: float)",
        "func process_mouse(delta: float)",
        "func process_actions(delta: float)",
        "func process_zoom(delta: float)",
        "func process_drag_inertia(delta: float)",
        "func process_roll_inertia(delta: float)",
        "func process_zoom_inertia(delta: float)",
        "func add_inertia(inertia: Vector2, origin := Vector2.ZERO)",
        "func add_zoom_inertia(inertia: float)",
        "func apply_zoom(amount: float)",
        "func apply_constraints(on_transform: Transform3D)",
        "func apply_pitch_constraint(on_transform: Transform3D)",
        "func apply_soft_pitch_constraint(on_transform: Transform3D)",
        "func apply_hard_pitch_constraint(on_transform: Transform3D)",
        "func apply_hard_pitch_constraint_drift(on_transform: Transform3D)",
        "func apply_rotation_from_tangent(tangent: Vector2)",
        "func apply_barrel_roll(amount: float)",
        "func apply_drag_friction()",
        "func apply_roll_friction()",
        "func apply_zoom_friction()",
        "func recompute_lubricant_efficiency()",
        "func get_camera_up()",
        "func get_camera_right()",
        "func get_pitch_constraint_axis()",
        "func get_horizon()",
        "func update_horizon(new_up: Vector3)",
        "func is_in_headstand()",
        "func should_zoom_in()",
        "func should_zoom_out()",
        "func should_stabilize_horizon()",
        "func should_free_horizon()",
        "func should_barrel_roll()",
        "func get_mouse_position()",
        "func get_distance_to_target()",
        "func detect_actions_availability()",
        "func is_action_available(action: String, silent := false)",
        "func process_roll(delta: float)",
        "func apply_roll(amount: float)"
      ]
    },
    {
      "file_path": "scripts/components/multi_layer_entity.gd",
      "class_name": "MultiLayerEntity",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_layer_representations()",
        "func _create_debug_representation()",
        "func _physics_process(_delta: float)",
        "func _update_text_layer()",
        "func _update_map_layer()",
        "func _update_debug_layer()",
        "func _on_layer_visibility_changed(layer: int, layer_visible: bool)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_text_state(state: String)",
        "func set_map_icon(icon: String, color: Color = Color.WHITE)",
        "func add_debug_marker(offset: Vector3, color: Color, _label: String = \"\")",
        "func get_layer_representation(layer: int)"
      ]
    },
    {
      "file_path": "scripts/console/neural_consciousness_commands.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _cmd_neural_evolve(args: Array)",
        "func _cmd_neural_status(_args: Array)",
        "func _cmd_neural_test(_args: Array)",
        "func _cmd_neural_connect(args: Array)",
        "func _cmd_consciousness_demo(_args: Array)",
        "func _find_universal_being(identifier: String)",
        "func _find_all_universal_beings()",
        "func _search_for_beings(node: Node, beings: Array[UniversalBeing])",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func test_consciousness_cycle()"
      ]
    },
    {
      "file_path": "scripts/core/advanced_being_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_skeleton()",
        "func _create_humanoid_skeleton()",
        "func _create_custom_skeleton()",
        "func _setup_physics_bones()",
        "func _get_bone_mass(bone_name: String)",
        "func _get_joint_type(bone_name: String)",
        "func _setup_spring_bones()",
        "func _setup_ik_systems()",
        "func _setup_animation_system()",
        "func _physics_process(_delta: float)",
        "func _process_animated(_delta: float)",
        "func _process_physics(_delta: float)",
        "func _process_hybrid(_delta: float)",
        "func _process_recovery(_delta: float)",
        "func _update_ik_targets()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func trigger_ragdoll(impact_force: Vector3, _impact_point: Vector3)",
        "func set_animation_state(state_name: String)",
        "func blend_to_physics(amount: float)",
        "func get_bone_global_transform(bone_name: String)"
      ]
    },
    {
      "file_path": "scripts/core/ai_sandbox_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _start_new_session()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_session_duration()",
        "func create_ai_sandbox(ai_name: String, sandbox_config: Dictionary = {})",
        "func _merge_default_world_config(custom_config: Dictionary)",
        "func _get_ai_permissions(ai_name: String)",
        "func _create_initial_world_scene(sandbox_data: Dictionary)",
        "func _generate_world_scene_content(world_config: Dictionary)",
        "func _setup_ai_world_builder(ai_name: String, sandbox_data: Dictionary)",
        "func _create_ai_building_instructions(ai_name: String, world_builder: Dictionary, sandbox_data: Dictionary)",
        "func deliver_gift_to_ai(ai_name: String, gift_data: Dictionary, from_who: String = \"Human\")",
        "func _notify_ai_about_gift(ai_name: String, gift_record: Dictionary)",
        "func enable_offline_mode(ai_name: String, enable: bool = true)",
        "func _start_offline_monitoring(ai_name: String)",
        "func check_offline_activities(ai_name: String)",
        "func _load_activity_file(file_path: String)",
        "func _setup_auto_save()",
        "func _auto_save_all_sandboxes()",
        "func _save_sandbox_data(sandbox_data: Dictionary)",
        "func _load_existing_sandboxes()",
        "func _load_sandbox_from_folder(folder_name: String)",
        "func _ensure_sandbox_infrastructure()",
        "func _connect_to_pentagon_systems()",
        "func _on_ai_entity_ready(ai_name: String)",
        "func enter_ai_sandbox(ai_name: String)",
        "func get_sandbox_status(ai_name: String)",
        "func get_all_sandboxes()"
      ]
    },
    {
      "file_path": "scripts/core/akashic_bridge_system.gd",
      "class_name": "AkashicBridgeSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(_delta: float)",
        "func _setup_http_client()",
        "func _setup_websocket()",
        "func _attempt_server_connection()",
        "func _on_http_response(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray)",
        "func _connect_websocket()",
        "func _process_websocket_messages()",
        "func _register_with_server()",
        "func _send_http_request(endpoint: String, data: Dictionary, method: HTTPClient.Method)",
        "func _send_websocket_message(message: Dictionary)",
        "func _handle_server_message(message: String)",
        "func _execute_console_command(command: String)",
        "func _start_tutorial(steps: Array)",
        "func _execute_tutorial_step(step_index: int)",
        "func _tutorial_wait_for_click(step_data: Dictionary)",
        "func _tutorial_spawn_object(step_data: Dictionary)",
        "func _tutorial_wait_for_command(step_data: Dictionary)",
        "func _tutorial_check_system(step_data: Dictionary)",
        "func _show_tutorial_message(message: String)",
        "func _monitor_tutorial_action(action_type: String, target: String)",
        "func _complete_current_step()",
        "func _complete_tutorial()",
        "func _setup_file_monitoring()",
        "func _ensure_file_exists(file_path: String)",
        "func _update_file_checksum(file_path: String)",
        "func _check_file_changes()",
        "func _handle_file_changed(file_path: String, content: String)",
        "func _handle_file_update(file_path: String, content: String)",
        "func _sync_project_state()",
        "func _update_project_state()",
        "func _get_systems_status()",
        "func _count_spawned_objects()",
        "func _count_nodes_recursive(node: Node)",
        "func _get_available_commands()",
        "func _send_project_state()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_console_commands()",
        "func _cmd_connect(_args: Array)",
        "func _cmd_status(_args: Array)",
        "func _cmd_sync(_args: Array)",
        "func _cmd_tutorial(_args: Array)",
        "func _print(message: String)"
      ]
    },
    {
      "file_path": "scripts/core/akashic_records_database.gd",
      "class_name": "AkashicRecordsDatabase",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _start_server_connection()",
        "func _initialize_core_records()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_record(type: String, data: Dictionary)",
        "func query_records(criteria: Dictionary)",
        "func manifest_record(record_id: String, forced_lod: String = \"\")",
        "func _manifest_as_text(record: Dictionary)",
        "func get_text_representation()",
        "func _manifest_as_2d_simple(record: Dictionary)",
        "func _manifest_as_2d_detailed(record: Dictionary)",
        "func _add_entity_interface_elements(parent: Node2D, record: Dictionary)",
        "func _add_word_interface_elements(parent: Node2D, record: Dictionary)",
        "func _add_connection_interface_elements(parent: Node2D, record: Dictionary)",
        "func _add_generic_interface_elements(parent: Node2D, record: Dictionary)",
        "func _manifest_as_3d_simple(record: Dictionary)",
        "func _manifest_as_3d_detailed(record: Dictionary)",
        "func _manifest_fully(record: Dictionary)",
        "func _calculate_lod(record: Dictionary)",
        "func update_all_lods(new_viewer_position: Vector3, new_consciousness: float)",
        "func create_connection(from_id: String, to_id: String, connection_type: String = \"linked\")",
        "func _generate_akashic_id()",
        "func _find_record(record_id: String)",
        "func _matches_criteria(record: Dictionary, criteria: Dictionary)",
        "func _start_server_connection()",
        "func generate_text_summary()",
        "func export_to_json(file_path: String = \"res://akashic_records.json\")"
      ]
    },
    {
      "file_path": "scripts/core/architecture_harmony_system.gd",
      "class_name": "ArchitectureHarmonySystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _scan_project_architecture()",
        "func _scan_directory(dir: DirAccess, path: String)",
        "func _analyze_script(script_path: String)",
        "func _extract_extends(content: String)",
        "func _extract_signals(content: String)",
        "func _map_script_connections()",
        "func _analyze_process_usage()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_best_ragdoll()",
        "func get_ragdoll_info(type: String = \"\")",
        "func find_conflicts()",
        "func _guess_purpose(script_path: String)",
        "func _register_harmony_commands()",
        "func _cmd_architecture_status(_args: Array)",
        "func _cmd_ragdoll_status(_args: Array)",
        "func _cmd_process_users(_args: Array)",
        "func _cmd_show_conflicts(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/asset_creator.gd",
      "class_name": "AssetCreator",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_workspace()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func add_shape_primitive(type: String, params: Dictionary = {})",
        "func add_sdf_operation(operation: String, shape_a_id: String, shape_b_id: String)",
        "func place_bone(bone_position: Vector3, bone_name: String = \"\")",
        "func create_universal_being()",
        "func save_as_asset_definition(asset_name: String, category: String = \"custom\")",
        "func _generate_mesh_from_shapes()",
        "func _on_console_command(command: String, args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/asset_library.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_asset(category: String, asset_id: String, asset_info: Dictionary)",
        "func unregister_asset(category: String, asset_id: String)",
        "func get_asset_info(category: String, asset_id: String)",
        "func get_assets_by_category(category: String)",
        "func get_assets_by_tag(tag: String)",
        "func search_assets(search_term: String)",
        "func load_asset(category: String, asset_id: String, auto_approve: bool = false)",
        "func unload_asset(category: String, asset_id: String)",
        "func preload_category(category: String, auto_approve: bool = false)",
        "func preload_by_tag(tag: String, auto_approve: bool = false)",
        "func spawn_asset(category: String, asset_id: String, parent: Node, position: Vector3 = Vector3.ZERO)",
        "func _on_asset_approval_needed(asset_path: String)",
        "func approve_asset(full_id: String)",
        "func reject_asset(full_id: String)",
        "func get_pending_approvals()",
        "func auto_approve_all()",
        "func set_auto_approval(enabled: bool)",
        "func _count_total_assets()",
        "func _get_asset_type_enum(type_string: String)",
        "func _find_asset_by_path(path: String)",
        "func get_catalog_summary()",
        "func get_loaded_assets_list()",
        "func is_asset_loaded(category: String, asset_id: String)",
        "func get_asset_load_status(category: String, asset_id: String)",
        "func export_catalog(file_path: String)",
        "func import_catalog(file_path: String, merge: bool = false)",
        "func load_universal_being(asset_id: String, variant: String = \"default\")",
        "func _create_from_standardized_objects(asset_id: String)",
        "func _get_asset_category(asset_id: String)",
        "func _parse_txt_definition(path: String)",
        "func _convert_value_type(value: String)",
        "func _create_universal_being(definition: Dictionary, scene_template: PackedScene, asset_id: String)",
        "func create_universal_being(being_type: String, properties: Dictionary = {})",
        "func register_txt_asset(category: String, asset_id: String, txt_path: String, tscn_path: String = \"\")"
      ]
    },
    {
      "file_path": "scripts/core/background_process_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_physics_process(node: Node, callback: Callable, priority: int = 5)",
        "func register_visual_process(node: Node, callback: Callable, priority: int = 5)",
        "func register_debug_process(node: Node, callback: Callable)",
        "func unregister_process(node: Node)",
        "func _physics_process(delta: float)",
        "func _process(delta: float)",
        "func set_debug_enabled(enabled: bool)",
        "func get_performance_stats()",
        "func set_process_active(node: Node, active: bool)",
        "func _sort_by_priority(a: Dictionary, b: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/core/console_channel_system.gd",
      "class_name": "ConsoleChannelSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_channels(console_ui: Control)",
        "func print_to_channel(message: String, channel: Channel = Channel.GAME)",
        "func _on_channel_toggled(pressed: bool, channel: Channel)",
        "func _enable_all_channels()",
        "func _disable_all_channels()",
        "func _refresh_display()",
        "func _clear_console()",
        "func _display_message(_formatted_text: String)",
        "func _clear_display()",
        "func print_system(message: String)",
        "func print_game(message: String)",
        "func print_universal(message: String)",
        "func print_error(message: String)",
        "func print_debug(message: String)",
        "func print_player(message: String)",
        "func print_rules(message: String)"
      ]
    },
    {
      "file_path": "scripts/core/debug_3d_screen.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _safe_initialize()",
        "func _create_3d_screen()",
        "func _create_debug_gizmo()",
        "func _create_axis_indicator(direction: Vector3, color: Color, label: String)",
        "func _process(delta: float)",
        "func _update_debug_display()",
        "func _collect_scene_debug_info()",
        "func _get_object_type(obj: Node3D)",
        "func _draw_scene_overview()",
        "func _draw_object_list()",
        "func _draw_selected_object_info()",
        "func _draw_camera_info()",
        "func _draw_text(text: String, x: int, y: int, color: Color)",
        "func _draw_char(character: String, x: int, y: int, color: Color)",
        "func _update_gizmo_position()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func select_object(obj: Node3D)",
        "func deselect_object()",
        "func move_selected_object(direction: Vector3, amount: float = 1.0)",
        "func set_selected_object_position(new_position: Vector3)",
        "func rotate_selected_object(axis: Vector3, angle_deg: float)",
        "func set_selected_object_rotation(new_rotation: Vector3)",
        "func scale_selected_object(scale_factor: Vector3)",
        "func set_selected_object_scale(new_scale: Vector3)",
        "func set_screen_position(pos: Vector3)",
        "func get_screen_info()",
        "func find_object_by_name(name: String)"
      ]
    },
    {
      "file_path": "scripts/core/debug_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func is_debug_enabled(category: String)",
        "func set_debug_category(category: String, enabled: bool)",
        "func toggle_debug_category(category: String)",
        "func should_print(message: String)",
        "func filtered_print(message: String)",
        "func get_debug_status()",
        "func _on_console_command(command: String, args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/delta_frame_guardian.gd",
      "class_name": "DeltaFrameGuardian",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_script(node: Node, priority: int = 50, update_rate: float = 60.0)",
        "func unregister_script(node: Node)",
        "func get_managed_delta(node: Node)",
        "func _distribute_frame_time(delta: float)",
        "func _should_update(info: ScriptInfo)",
        "func _track_frame_time(frame_time: float)",
        "func _analyze_performance_issue()",
        "func _throttle_script(info: ScriptInfo, reason: String)",
        "func _enter_emergency_mode()",
        "func _exit_emergency_mode()",
        "func get_performance_report()",
        "func _register_guardian_commands()",
        "func _cmd_fps_status(_args: Array)",
        "func _cmd_list_scripts(_args: Array)",
        "func _cmd_toggle_throttle(args: Array)",
        "func _cmd_force_emergency(args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/dimensional_color_system.gd",
      "class_name": "DimensionalColorSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _generate_tertiary_colors()",
        "func _initialize_frequency_color_map()",
        "func _initialize_mesh_point_map()",
        "func _generate_color_palettes()",
        "func _find_systems()",
        "func _find_node_by_class(node, class_name_str)",
        "func _process(delta)",
        "func _update_animations(delta)",
        "func _update_pulse_animation(animation, progress)",
        "func _update_fade_animation(animation, progress)",
        "func _update_cycle_animation(animation, progress)",
        "func _update_rainbow_animation(animation, progress)",
        "func _update_mesh_point_animation(animation, progress)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_color_for_frequency(frequency: int)",
        "func get_mesh_point_type(frequency: int)",
        "func get_closest_harmonic_frequency(frequency: int)",
        "func get_color_palette(palette_name: String = \"default\")",
        "func start_pulse_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, pulse_freq: float = DEFAULT_PULSE_FREQUENCY, amplitude: float = DEFAULT_AMPLITUDE)",
        "func start_fade_animation(frequency: int, target_color: Color, duration: float = DEFAULT_ANIMATION_DURATION)",
        "func start_cycle_animation(frequency: int, palette_name: String = \"default\", duration: float = DEFAULT_ANIMATION_DURATION, cycle_speed: float = 1.0)",
        "func start_rainbow_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, rainbow_speed: float = 1.0, saturation: float = 1.0, brightness: float = 1.0)",
        "func start_mesh_point_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, pulse_freq: float = DEFAULT_PULSE_FREQUENCY)",
        "func stop_animation(animation_id: String)",
        "func stop_all_animations()",
        "func get_colored_text(text: String, frequency: int)",
        "func get_gradient_text(text: String, start_freq: int, end_freq: int)",
        "func colorize_line(line: String, base_frequency: int, symbol_boost: int = 10)",
        "func colorize_mesh_points(text: String)",
        "func start_line_animation(line_index: int, frequency: int = 120, animation_type: String = \"pulse\", duration: float = DEFAULT_ANIMATION_DURATION)",
        "func animate_text_typing(text: String, base_freq: int = 120, duration: float = 2.0, delay_per_char: float = 0.05)",
        "func highlight_mesh_points(frequencies: Array, duration: float = 5.0)",
        "func highlight_mesh_centers(duration: float = 5.0)",
        "func highlight_mesh_edges(duration: float = 5.0)",
        "func highlight_mesh_corners(duration: float = 5.0)",
        "func get_mesh_visualization_colors()",
        "func sync_with_ethereal_bridge()",
        "func get_frequency_info(frequency: int)",
        "func _frequency_has_animation(frequency: int)"
      ]
    },
    {
      "file_path": "scripts/core/eden_action_system.gd",
      "class_name": "EdenActionSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func queue_action(action_name: String, target: Node, params: Dictionary = {})",
        "func process_combo_input(input_type: String, target: Node = null)",
        "func _check_action_requirements(action_def: Dictionary, target: Node)",
        "func _cleanup_old_combos()",
        "func _process_action_queue(_delta: float)",
        "func _start_action(action: Dictionary)",
        "func _execute_action_step(action: Dictionary)",
        "func _update_active_actions(delta: float)",
        "func _complete_action(action: Dictionary)",
        "func _check_combo_pattern(pattern: Dictionary)",
        "func _trigger_combo(combo_name: String, pattern: Dictionary)",
        "func _step_look(action: Dictionary)",
        "func _step_analyze(action: Dictionary)",
        "func _step_report(action: Dictionary)",
        "func _step_approach(action: Dictionary)",
        "func _step_grasp(action: Dictionary)",
        "func _step_lift(action: Dictionary)",
        "func _step_target(action: Dictionary)",
        "func _step_charge(_action: Dictionary)",
        "func _step_trigger(action: Dictionary)",
        "func start_selection_mode(mode: String)",
        "func add_to_selection(target: Node)",
        "func clear_selection()",
        "func execute_multi_target_action(action_name: String)"
      ]
    },
    {
      "file_path": "scripts/core/emergency_performance_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(_delta: float)",
        "func _activate_emergency_mode()",
        "func _deactivate_emergency_mode()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/enhanced_interface_system.gd",
      "class_name": "EnhancedInterfaceSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_interface_structure()",
        "func _setup_interaction_detection()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_interface_type(type: String, universal_being: Node = null)",
        "func _create_console_interface()",
        "func _create_asset_creator_interface()",
        "func _create_neural_status_interface()",
        "func _create_being_inspector_interface()",
        "func _create_generic_interface()",
        "func _on_3d_input_event(camera: Node, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int)",
        "func _on_mouse_entered()",
        "func _on_mouse_exited()",
        "func _on_console_command_executed(input_field: LineEdit)",
        "func _on_quick_action(action: String)",
        "func _on_create_asset_clicked()",
        "func _on_preview_asset_clicked()",
        "func _on_awaken_being(level: int)",
        "func _update_neural_status_display()",
        "func _find_all_conscious_beings(node: Node, conscious_beings: Array)",
        "func connect_to_system(system_name: String, system_node: Node)",
        "func set_interface_size(new_size: Vector2)",
        "func update_display_data(data: Dictionary)",
        "func _process(delta: float)",
        "func _create_system_monitor_interface()",
        "func _create_grid_list_interface()",
        "func _update_system_monitor_display()",
        "func _show_performance_report()",
        "func _populate_grid_display()",
        "func _get_system_entities()",
        "func _find_entities_recursive(node: Node, entities: Array)",
        "func _add_grid_item()",
        "func _clear_grid()",
        "func _on_grid_item_selected(entity: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/core/floodgate_controller.gd",
      "class_name": "var",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _exit_tree()",
        "func _process(delta)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func each_blimp_of_delta()",
        "func process_system()",
        "func queue_operation(type: OperationType, params: Dictionary, priority: int = 0)",
        "func _process_next_operation()",
        "func _execute_operation(operation: Dictionary)",
        "func _op_create_node(params: Dictionary)",
        "func floodgate_add_child(child: Node, parent: Node)",
        "func universal_add_child(child: Node, parent: Node)",
        "func _op_delete_node(params: Dictionary)",
        "func _op_move_node(params: Dictionary)",
        "func _op_rotate_node(params: Dictionary)",
        "func _op_scale_node(params: Dictionary)",
        "func _op_reparent_node(params: Dictionary)",
        "func _op_load_asset(params: Dictionary)",
        "func _op_unload_asset(params: Dictionary)",
        "func _op_modify_property(params: Dictionary)",
        "func _op_call_method(params: Dictionary)",
        "func _op_emit_signal(params: Dictionary)",
        "func _op_connect_signal(params: Dictionary)",
        "func _op_disconnect_signal(params: Dictionary)",
        "func _register_node(node: Node)",
        "func _unregister_node_recursive(node: Node)",
        "func _lock_node(node: Node)",
        "func _unlock_node(node: Node)",
        "func approve_asset(asset_path: String)",
        "func reject_asset(asset_path: String)",
        "func set_asset_approval_required(required: bool)",
        "func _log(message: String, category: String = \"INFO\", caller_info: Dictionary = {})",
        "func _flush_log_buffer()",
        "func _get_caller_info()",
        "func _generate_operation_id()",
        "func _generate_node_id()",
        "func _get_operation_name(type: OperationType)",
        "func process_system_0()",
        "func process_system_1()",
        "func process_system_2()",
        "func process_system_3()",
        "func process_system_4()",
        "func process_system_5()",
        "func process_system_6()",
        "func process_system_7()",
        "func process_system_8()",
        "func process_system_9()",
        "func process_system_10()",
        "func process_system_11()",
        "func first_dimensional_magic(type_of_action: String, target_node: Node, additional_data = null)",
        "func second_dimensional_magic(data_type: int, node_path: String, node_to_add: Node, additional_data = null)",
        "func third_dimensional_magic(data_type: String, target_path: String, data_payload)",
        "func fourth_dimensional_magic(operation_type: String, target_node: Node, movement_data)",
        "func fifth_dimensional_magic(unload_type: String, node_path: String)",
        "func sixth_dimensional_magic(function_type: String, target_node, function_name: String, function_args = [])",
        "func seventh_dimensional_magic(operation_type: String, operation_data: String, operation_count: int = 1)",
        "func eighth_dimensional_magic(message_type: String, message_content, receiver: String)",
        "func ninth_dimensional_magic(texture_path: String, texture_data: Dictionary)",
        "func _cleanup_memory()",
        "func get_operation_status(operation_id: String)",
        "func get_queue_size()",
        "func get_loaded_assets()",
        "func get_pending_assets()",
        "func get_registered_nodes()",
        "func clear_failed_operations()",
        "func get_failed_operations()",
        "func _should_enforce_object_limits(node: Node)",
        "func _check_and_enforce_object_limits(node: Node)",
        "func _track_new_object(node: Node)",
        "func _remove_oldest_object()",
        "func _remove_oldest_astral_being()",
        "func _cleanup_tracked_objects()",
        "func _cleanup_astral_beings()",
        "func _notify_beings_of_replacement(removed_object: Node)",
        "func get_object_statistics()",
        "func queue_physics_state_change(object: Node3D, state: int)",
        "func queue_gravity_update(center: Vector3, strength: float)",
        "func queue_scene_zero_update(point: Vector3)",
        "func queue_ragdoll_position_update(ragdoll_id: String, position: Vector3, state: String)",
        "func get_physics_sync_status()",
        "func _op_create_universal_being(params: Dictionary)",
        "func _op_transform_universal_being(params: Dictionary)",
        "func _op_connect_universal_beings(params: Dictionary)",
        "func queue_create_universal_being(being_type: String, position: Vector3 = Vector3.ZERO, properties: Dictionary = {})",
        "func queue_transform_universal_being(node_path: String, new_form: String, transform_params: Dictionary = {})",
        "func queue_connect_universal_beings(source_path: String, target_path: String, connection_type: String, connection_data: Dictionary = {})"
      ]
    },
    {
      "file_path": "scripts/core/game_launcher.gd",
      "class_name": "GameLauncher",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _run_startup_diagnostics()",
        "func _check_autoload_systems()",
        "func _check_floodgate_systems()",
        "func _check_scene_structure()",
        "func _check_critical_assets()",
        "func _generate_status_report()",
        "func _save_diagnostic_report()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_system_status()",
        "func get_error_log()",
        "func is_startup_complete()",
        "func run_health_check()",
        "func test_floodgate_system()",
        "func quick_test()"
      ]
    },
    {
      "file_path": "scripts/core/gamma_speech_bubble.gd",
      "class_name": "GammaSpeechBubble",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_speech_bubble()",
        "func _create_bubble_geometry()",
        "func _create_text_system()",
        "func _create_bubble_tail()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_text(text: String, style: String = \"manga\")",
        "func _style_text_for_bubble(text: String, style: String)",
        "func _adjust_bubble_size()",
        "func _setup_animations()",
        "func show_bubble()",
        "func _bounce_effect(progress: float)",
        "func _start_lifetime_timer()",
        "func _hide_bubble()",
        "func _bubble_finished()",
        "func _input_event(camera: Node, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int)",
        "func create_gamma_speech(text: String, position: Vector3, style: String = \"manga\")"
      ]
    },
    {
      "file_path": "scripts/core/gemma_vision_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_text_grid()",
        "func _create_text_cell(x: int, y: int)",
        "func _populate_initial_content()",
        "func _initialize_vision_layers()",
        "func _update_active_layers()",
        "func _connect_to_akashic_records()",
        "func _create_local_word_database()",
        "func _connect_to_notepad3d()",
        "func _link_to_seedling_gemma()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func gemma_look_at(position: Vector2)",
        "func _analyze_text_layer(cell: Dictionary, layer_id: String)",
        "func _get_akashic_connection(word: String)",
        "func _reveal_code_structure(cell: Dictionary)",
        "func scan_for_patterns()",
        "func _find_word_clusters()",
        "func _find_emotional_patterns()",
        "func _find_geometric_patterns()",
        "func increase_gemma_curiosity(amount: int = 1)",
        "func expand_vision_depth(new_depth: int)",
        "func get_gemma_vision_status()",
        "func feed_new_text_to_gemma(text: String, position: Vector2)"
      ]
    },
    {
      "file_path": "scripts/core/heightmap_world_generator.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_noise()",
        "func _create_containers()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func generate_world()",
        "func _generate_heightmap()",
        "func _create_terrain_mesh()",
        "func _create_terrain_collision()",
        "func _place_vegetation()",
        "func _place_tree(container: Node3D)",
        "func _place_bush(container: Node3D)",
        "func _create_tree_with_fruits(pos: Vector3)",
        "func _create_bush_with_fruits(pos: Vector3)",
        "func _create_fruit()",
        "func _create_water_sources()",
        "func _create_water_pool(pos: Vector3)",
        "func _check_slope_at(x: int, z: int, max_slope: float)",
        "func get_height_at_position(world_pos: Vector3)"
      ]
    },
    {
      "file_path": "scripts/core/interface_manifestation_system.gd",
      "class_name": "InterfaceManifestationSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_eden_records_references()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_3d_interface_from_eden_records(interface_type: String, properties: Dictionary = {})",
        "func _load_3d_blueprint(interface_type: String)",
        "func _create_3d_interface_from_blueprint(blueprint_data: Dictionary, interface_type: String)",
        "func _create_element_from_blueprint(element: Dictionary)",
        "func _create_3d_panel(position: Vector3, size: Vector2, text: String, color: String, properties: Dictionary)",
        "func _create_3d_button(position: Vector3, size: Vector2, text: String, color: String, properties: Dictionary)",
        "func _create_3d_text(position: Vector3, size: Vector2, text: String, color: String, properties: Dictionary)",
        "func _create_3d_slider(position: Vector3, size: Vector2, text: String, color: String, properties: Dictionary)",
        "func _create_3d_particles(position: Vector3, size: Vector2, text: String, color: String, properties: Dictionary)",
        "func _get_color_from_string(color_name: String)",
        "func _get_records_map_for_interface(interface_type: String)",
        "func _create_ui_from_records(records_map: Dictionary, interface_type: String)",
        "func _create_elements_from_records(container: Control, records_map: Dictionary, interface_type: String)",
        "func _create_interaction_area(interface_type: String)",
        "func _create_interface_soul_effects(interface_type: String)",
        "func _wire_interface_interactions(interface_3d: Node3D, ui_control: Control, interface_type: String)",
        "func _on_interface_button_pressed(button_text: String, interface_type: String)",
        "func _on_interface_area_clicked(camera: Node, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int)",
        "func _on_interface_hover_start(interface_type: String)",
        "func _on_interface_hover_end(interface_type: String)",
        "func _handle_creation_action()",
        "func _handle_settings_action()",
        "func _handle_exit_action()",
        "func _create_fallback_interface(interface_type: String)",
        "func _create_generic_interface_records(interface_type: String)",
        "func create_interface_for_universal_being(being: UniversalBeing, interface_type: String, properties: Dictionary = {})"
      ]
    },
    {
      "file_path": "scripts/core/material_library.gd",
      "class_name": "MaterialLibrary",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 0,
      "process_count": 0,
      "input_count": 0,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_default_materials()",
        "func _create_standard_material(color: Color)",
        "func get_material(material_type: String = \"default\")",
        "func _get_material_instance(material_type: String)",
        "func return_material(material: StandardMaterial3D)"
      ]
    },
    {
      "file_path": "scripts/core/miracle_declutterer.gd",
      "class_name": "MiracleDeclutterer",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _update_declutter()",
        "func _update_player_position()",
        "func _scan_for_new_objects()",
        "func _get_all_3d_nodes(from_node: Node)",
        "func _should_track(node: Node3D)",
        "func _start_tracking(node: Node3D)",
        "func _update_object_state(node: Node3D)",
        "func _get_zone_for_distance(distance: float)",
        "func _apply_zone_state(state: ObjectState)",
        "func _simplify_visuals(state: ObjectState, quality: float)",
        "func _restore_details(state: ObjectState)",
        "func _fade_object(node: Node3D, alpha: float)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_zone_report()",
        "func force_declutter_all()",
        "func register_console_commands()",
        "func _cmd_declutter_status(_args: Array)",
        "func _cmd_toggle_declutter(args: Array)",
        "func _cmd_show_zones(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/mouse_interaction_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _exit_tree()",
        "func _find_camera()",
        "func _create_debug_panel()",
        "func _unhandled_input(event: InputEvent)",
        "func _handle_mouse_click(mouse_pos: Vector2)",
        "func _select_object(obj: Node)",
        "func _clear_selection()",
        "func _update_debug_panel()",
        "func _update_panel_position()",
        "func _process(_delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_toggle_debug_panel()",
        "func cmd_inspect_scene()",
        "func cmd_set_panel_offset(x: float, y: float)",
        "func cmd_toggle_panel_follow()",
        "func _handle_mouse_release(mouse_pos: Vector2)",
        "func _handle_mouse_hover(mouse_pos: Vector2)",
        "func _get_object_at_position(mouse_pos: Vector2)",
        "func highlight_collision_shape(collider: Node, color: Color)",
        "func reset_debug_colors()",
        "func combo_checker(node: Node, state: int)",
        "func check_combo_patterns()",
        "func format_combo_for_display()",
        "func _on_combo_click(_node: Node)",
        "func _on_combo_double_click(node: Node)",
        "func _on_action_started(action_name: String, target: Node)",
        "func _on_action_completed(action_name: String, result: Dictionary)",
        "func _on_combo_triggered(combo_name: String, targets: Array)",
        "func _on_shape_detected(shape: String, confidence: float)",
        "func _on_spell_gesture(spell: String)",
        "func _create_shape_feedback(shape: String)",
        "func _create_spell_effect(spell: String)",
        "func _find_dimensional_ragdoll()"
      ]
    },
    {
      "file_path": "scripts/core/multi_layer_record_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func move_between_layers(data_key: String, from_layer: String, to_layer: String)",
        "func check_state_in_layers(data_key: String)",
        "func promote_to_active(data_key: String)",
        "func demote_from_active(data_key: String)",
        "func batch_operation(keys: Array, operation: String)",
        "func get_layer_stats()",
        "func cleanup_empty_entries()",
        "func store_with_metadata(key: String, data: Variant, layer: String = \"pending\")",
        "func access_data(key: String)"
      ]
    },
    {
      "file_path": "scripts/core/pentagon_initialization_queue.gd",
      "class_name": "PentagonInitializationQueue",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 0,
      "process_count": 0,
      "input_count": 0,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func register_pentagon_dependency(system_name: String, required_nodes: Array[String], callback: Callable, context_node: Node = null)",
        "func register_simple_pentagon_retry(system_name: String, callback: Callable, context_node: Node = null)",
        "func check_nodes_exist(required_nodes: Array[String])",
        "func _try_initialize_system(dependency_info: Dictionary)",
        "func _process_pending_queue()",
        "func _check_all_systems_status()",
        "func _mark_system_complete(system_name: String)",
        "func _mark_system_failed(system_name: String, reason: String)",
        "func _remove_from_pending(system_name: String)",
        "func force_retry_system(system_name: String)",
        "func force_retry_all_failed()",
        "func get_system_status(system_name: String)",
        "func get_all_systems_status()",
        "func get_pending_systems()",
        "func get_failed_systems()",
        "func register_console_commands()",
        "func _cmd_queue_status(_args: Array)",
        "func _cmd_retry_failed(_args: Array)",
        "func _cmd_force_retry(args: Array)",
        "func _cmd_show_dependencies(_args: Array)",
        "func _cmd_green_check(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/perfect_delta_process.gd",
      "class_name": "PerfectDeltaProcess",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_process(node: Node, callback: Callable, priority: int = 50, group: String = \"default\")",
        "func unregister_process(node: Node)",
        "func _optimize_process_order()",
        "func _apply_adaptive_skipping(info: ProcessorInfo)",
        "func get_processor_stats()",
        "func force_process_all()",
        "func _register_commands()",
        "func _cmd_show_stats(_args: Array)",
        "func _cmd_list_processors(_args: Array)",
        "func _cmd_force_process(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/perfect_pentagon_ui_integration.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _pentagon_ui_init()",
        "func _register_ui_systems()",
        "func _initialize_ui_systems()",
        "func _compare_priority(a: Dictionary, b: Dictionary)",
        "func _initialize_single_ui_system(system_data: Dictionary)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_ui_system(name: String, config: Dictionary)",
        "func get_ui_system_status()",
        "func _on_pentagon_ready()",
        "func _register_ui_console_commands()",
        "func _console_ui_status(_args: Array)",
        "func _console_ui_reload(_args: Array)",
        "func _console_ui_list(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/performance_guardian.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _check_performance()",
        "func _get_average_fps()",
        "func _standard_optimization()",
        "func _critical_optimization()",
        "func _emergency_optimization()",
        "func _reduce_optimization()",
        "func _reduce_nodes()",
        "func _reduce_beings()",
        "func _get_player_position()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_performance_stats()",
        "func force_optimization(level: int)"
      ]
    },
    {
      "file_path": "scripts/core/physics_state_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _physics_process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_object_state(object: Node3D, new_state: PhysicsState, force: bool = false)",
        "func get_object_state(object: Node3D)",
        "func _can_transition(from_state: PhysicsState, to_state: PhysicsState)",
        "func _process_state_transitions(delta: float)",
        "func _complete_state_transition(transition: Dictionary)",
        "func _update_state_transition(transition: Dictionary, _delta: float)",
        "func _apply_physics_state(object: Node3D, state: PhysicsState)",
        "func _make_static(object: Node3D)",
        "func _make_kinematic(object: Node3D)",
        "func _make_dynamic(object: Node3D)",
        "func _make_ethereal(object: Node3D)",
        "func _make_connected(object: Node3D)",
        "func _set_collision_enabled(object: Node3D, enabled: bool)",
        "func _find_collision_shapes(node: Node)",
        "func _apply_transition_physics(object: Node3D, transition: Dictionary, progress: float)",
        "func _apply_custom_physics(delta: float)",
        "func _apply_custom_gravity(object: RigidBody3D, _delta: float)",
        "func prepare_object_for_manipulation(object: Node3D, _astral_being: Node3D)",
        "func astral_being_manipulate(astral_being: Node3D, target_object: Node3D, force: Vector3)",
        "func set_scene_zero_point(point: Vector3)",
        "func set_gravity_center(center: Vector3, strength: float = 9.8)",
        "func set_player_reference(player: Node3D)",
        "func get_objects_in_state(state: PhysicsState)",
        "func _state_to_string(state: PhysicsState)",
        "func get_state_info()"
      ]
    },
    {
      "file_path": "scripts/core/scene_editor_integration.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_references()",
        "func _register_console_commands()",
        "func _cmd_scene_edit(args: Array)",
        "func _cmd_scene_save(args: Array)",
        "func _cmd_scene_load(args: Array)",
        "func _cmd_scene_new(_args: Array)",
        "func _cmd_scene_export(args: Array)",
        "func _cmd_select(args: Array)",
        "func _cmd_select_all(_args: Array)",
        "func _cmd_deselect(_args: Array)",
        "func _cmd_delete_selected(_args: Array)",
        "func _cmd_duplicate_selected(_args: Array)",
        "func _cmd_move(args: Array)",
        "func _cmd_rotate(args: Array)",
        "func _cmd_scale(args: Array)",
        "func _cmd_reset_transform(_args: Array)",
        "func _cmd_create_node(args: Array)",
        "func _cmd_create_mesh(args: Array)",
        "func _cmd_create_light(args: Array)",
        "func _cmd_create_camera(_args: Array)",
        "func _cmd_inspect(args: Array)",
        "func _cmd_set_property(args: Array)",
        "func _cmd_get_property(args: Array)",
        "func _cmd_grid(args: Array)",
        "func _cmd_grid_size(args: Array)",
        "func _cmd_snap_to_grid(_args: Array)",
        "func _enter_edit_mode()",
        "func _exit_edit_mode()",
        "func _save_scene(path: String)",
        "func _load_scene_for_editing(path: String)",
        "func _create_new_scene()",
        "func _export_scene(format: String, _path: String)",
        "func _queue_add_node_operation(node: Node)",
        "func _queue_delete_operation(node: Node)",
        "func _queue_move_operation(node: Node3D, new_position: Vector3)",
        "func _queue_rotate_operation(node: Node3D, new_rotation: Vector3)",
        "func _queue_scale_operation(node: Node3D, new_scale: Vector3)",
        "func _queue_duplicate_operation(node: Node)",
        "func _find_node_by_name(target_name: String)",
        "func _find_node_recursive(node: Node, search_name: String)",
        "func _select_object(obj: Node)",
        "func _deselect_all()",
        "func _select_all_children(node: Node)",
        "func _highlight_object(obj: Node, highlight: bool)",
        "func _create_node_of_type(type_name: String)",
        "func _parse_property_value(value_str: String)",
        "func _snap_to_grid_position(pos: Vector3)",
        "func _capture_scene_state()",
        "func _capture_node_state(node: Node, state_dict: Dictionary)",
        "func _track_scene_change(change_type: String, node: Node, data: Dictionary = {})",
        "func _track_property_change(node: Node, property: String, value: Variant)",
        "func _enable_edit_visuals()",
        "func _disable_edit_visuals()",
        "func _open_inspector_for_object(obj: Node)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/scene_setup.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_ragdoll_system()",
        "func _setup_astral_beings()",
        "func _setup_existing_ragdoll()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_test_objects()",
        "func cmd_setup_scene()",
        "func cmd_create_test_objects()"
      ]
    },
    {
      "file_path": "scripts/core/scene_tree_tracker.gd",
      "class_name": "SceneTreeTracker",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_up_scene_tree()",
        "func track_node(node: Node, category: String = \"\")",
        "func untrack_node(node: Node)",
        "func jsh_tree_get_node(node_path_get: String)",
        "func build_pretty_print(start_branch: Dictionary = {}, prefix: String = \"\", is_last: bool = true)",
        "func print_tree_structure()",
        "func get_nodes_by_type(jsh_type: String)",
        "func _collect_nodes_by_type(branches: Dictionary, jsh_type: String, nodes: Array[Node])",
        "func _remove_branch_by_path(path: String)",
        "func get_tree_stats()",
        "func _collect_stats(branches: Dictionary, stats: Dictionary)",
        "func has_branch(path: String)",
        "func get_branch(path: String)",
        "func _set_branch_unsafe(path: String, _data: Dictionary)",
        "func track_ragdoll_movement(ragdoll_id: String, position: Vector3, state: String)",
        "func _ensure_ragdoll_parent_structure()",
        "func get_ragdoll_status(ragdoll_id: String)",
        "func get_all_ragdolls()"
      ]
    },
    {
      "file_path": "scripts/core/self_repair_system.gd",
      "class_name": "SelfRepairSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(_delta: float)",
        "func _scan_all_scripts()",
        "func _find_all_scripts()",
        "func _scan_directory(path: String, scripts: Array)",
        "func _register_script(script_path: String)",
        "func _categorize_script(script_path: String)",
        "func _analyze_script_content(script_path: String)",
        "func _detect_potential_issues(content: String)",
        "func _perform_health_check()",
        "func _check_script_health(script_path: String)",
        "func _find_script_instances(script_path: String)",
        "func _find_instances_recursive(node: Node, script_path: String, instances: Array)",
        "func _setup_repair_strategies()",
        "func _attempt_repair(script_path: String, issue: String)",
        "func _repair_missing_file(script_path: String)",
        "func _repair_invalid_instance(script_path: String)",
        "func _repair_recent_modification(script_path: String)",
        "func _repair_null_access(_script_path: String)",
        "func _repair_double_free(_script_path: String)",
        "func _setup_python_integration()",
        "func _update_csv_data()",
        "func _create_python_updater()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func connect_variable_inspector(script_path: String, inspector: Node)",
        "func get_script_variables(script_path: String)",
        "func register_console_commands()",
        "func _cmd_scan(_args: Array)",
        "func _cmd_status(_args: Array)",
        "func _cmd_update_csv(_args: Array)",
        "func _cmd_run_python(_args: Array)",
        "func request_scene_closure()",
        "func _print(message: String)"
      ]
    },
    {
      "file_path": "scripts/core/shape_gesture_system.gd",
      "class_name": "ShapeGestureSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_gesture(start_pos: Vector2)",
        "func add_gesture_point(pos: Vector2)",
        "func end_gesture()",
        "func _detect_shape(points: Array)",
        "func _is_circle(points: Array)",
        "func _is_triangle(points: Array)",
        "func _is_square(points: Array)",
        "func _is_star(points: Array)",
        "func _is_spiral(points: Array)",
        "func _is_line(points: Array)",
        "func _is_zigzag(points: Array)",
        "func _find_corners(points: Array)",
        "func _calculate_angle(p1: Vector2, p2: Vector2, p3: Vector2)",
        "func _get_shape_size(points: Array)",
        "func get_gesture_direction(points: Array)",
        "func get_simplified_path(points: Array, max_simplified_points: int = 50)"
      ]
    },
    {
      "file_path": "scripts/core/skeleton_ragdoll_hybrid.gd",
      "class_name": "Anonymous",
      "extends_from": "Node3D",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_skeleton()",
        "func _create_physics_bodies()",
        "func _get_bone_length(bone_name: String)",
        "func _create_joints()",
        "func _create_joint(parent_bone: String, child_bone: String, joint_name: String, joint_type)",
        "func _create_visuals()",
        "func _physics_process(_delta: float)",
        "func _sync_skeleton_to_physics()",
        "func _sync_physics_to_skeleton()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_ragdoll_mode(mode: RagdollMode)",
        "func apply_impulse_to_bone(bone_name: String, impulse: Vector3)",
        "func get_bone_position(bone_name: String)",
        "func stand_up()"
      ]
    },
    {
      "file_path": "scripts/core/standardized_objects.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_object(object_type: String, position: Vector3, properties: Dictionary = {})",
        "func _add_visuals(obj: Node3D, def: Dictionary)",
        "func _add_collision(obj: Node3D, def: Dictionary)",
        "func _apply_property(obj: Node3D, property: String, value)",
        "func _setup_ragdoll(obj: Node3D)",
        "func _setup_skeleton_ragdoll(obj: Node3D)",
        "func _setup_sun(obj: Node3D)",
        "func _setup_astral_being(obj: Node3D)",
        "func _setup_fruit(obj: Node3D)",
        "func _setup_no_gravity(obj: Node3D)",
        "func _start_action(obj: Node3D, action: String)",
        "func _generate_unique_name(object_type: String)",
        "func _ready()",
        "func save_custom_assets()",
        "func _load_custom_assets()",
        "func add_custom_asset(asset_name: String, properties: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/core/synchronicity_pathfinder.gd",
      "class_name": "SynchronicityPathfinder",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _map_all_paths()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func synchronize(var_name: String, new_value: Variant, source: String = \"\")",
        "func _update_mirror(location: String, value: Variant)",
        "func follow_path(from_function: String, to_function: String, data: Variant = null)",
        "func get_available_paths(current_function: String)",
        "func trace_path_history(steps_back: int = 10)",
        "func find_variable_locations(var_name: String)",
        "func register_mirror(var_name: String, location: String)",
        "func check_harmony()",
        "func _establish_mirrors()",
        "func _get_mirror_value(location: String)",
        "func _set_nested_property(obj: Object, path: String, value: Variant)",
        "func generate_path_report()"
      ]
    },
    {
      "file_path": "scripts/core/the_universal_thing.gd",
      "class_name": "UniversalThing",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_as_point()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func become(what: Variant, properties: Dictionary = {})",
        "func _become_point_form(props: Dictionary)",
        "func _become_shape(props: Dictionary)",
        "func _become_ragdoll(props: Dictionary)",
        "func _become_word(props: Dictionary)",
        "func _become_connector(props: Dictionary)",
        "func _become_container(props: Dictionary)",
        "func _become_creator(props: Dictionary)",
        "func _become_data(props: Dictionary)",
        "func _become_anything(props: Dictionary)",
        "func _become_like(other)",
        "func _cleanup_current_form()",
        "func connect_to_thing(other: UniversalThing)",
        "func _on_thing_nearby(body: Node3D)",
        "func _on_awareness_overlap(area: Area3D)",
        "func create_thing(at_position: Vector3 = Vector3.ZERO)",
        "func contain_thing(thing: UniversalThing)",
        "func evolve()",
        "func sync_data(key: String, value: Variant)",
        "func get_possible_becomings()",
        "func serialize()",
        "func deserialize(save_data: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/core/timer_manager.gd",
      "class_name": "TimerManager",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 0,
      "process_count": 1,
      "input_count": 0,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_timer_pool()",
        "func get_timer()",
        "func _get_timer_instance()",
        "func _generate_timer_id()",
        "func return_timer(timer: Timer)",
        "func _return_timer_instance(timer: Timer)",
        "func cleanup_expired_timers()",
        "func _process(delta: float)",
        "func get_pool_status()",
        "func console_timer_status()"
      ]
    },
    {
      "file_path": "scripts/core/txt_rule_editor.gd",
      "class_name": "TxtRuleEditor",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_ui()",
        "func _load_file_list()",
        "func _scan_directory(path: String, category: String)",
        "func _on_file_selected(index: int)",
        "func _on_text_changed()",
        "func _save_current_file()",
        "func _notify_rule_change(file_path: String)",
        "func create_editor()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/unified_asset_manager.gd",
      "class_name": "UnifiedAssetManager",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _connect_to_legacy_systems()",
        "func _unify_all_assets()",
        "func _import_standardized_objects()",
        "func _import_asset_library()",
        "func _import_misc_assets()",
        "func _determine_akashic_category(obj_data: Dictionary)",
        "func _categorize_assets()",
        "func _create_akashic_manifest()",
        "func _register_asset_commands()",
        "func _cmd_unified_assets(_args: Array)",
        "func _cmd_asset_manifest(_args: Array)",
        "func _cmd_asset_categories(_args: Array)",
        "func _cmd_asset_details(args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_unified_asset(name: String)",
        "func get_all_assets()",
        "func get_assets_by_category(category: String)",
        "func create_asset(name: String, type: String, properties: Dictionary = {})",
        "func is_akashic_ready()"
      ]
    },
    {
      "file_path": "scripts/core/unified_being_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_commands()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_being(type: String = \"basic\", position: Vector3 = Vector3.ZERO, properties: Dictionary = {})",
        "func _create_visual_for_type(type: String)",
        "func _add_capabilities(being: Node3D, type: String)",
        "func transform_being(being: Node3D, new_type: String)",
        "func _migrate_existing_beings()",
        "func _cmd_being(args: Array)",
        "func _create_interface_being(interface_type: String, pos_args: Array)",
        "func _cmd_list_beings(_args: Array)",
        "func _cmd_transform_being(args: Array)",
        "func _cmd_container(args: Array)",
        "func _create_container_being(container_type: String, size: Vector3, pos: Vector3)",
        "func _cmd_list_containers(_args: Array)",
        "func _cmd_connect_containers(args: Array)",
        "func _find_container_by_name(container_name: String)"
      ]
    },
    {
      "file_path": "scripts/core/unified_creation_system.gd",
      "class_name": "UnifiedCreationSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create(what: String, where: Vector3 = Vector3.ZERO, properties: Dictionary = {})",
        "func _is_universal_being_type(type: String)",
        "func _create_universal_being(type: String, position: Vector3, _properties: Dictionary)",
        "func _create_standard_object(type: String, position: Vector3, properties: Dictionary)",
        "func _create_from_scene(scene_path: String, position: Vector3, _properties: Dictionary)",
        "func _register_object(obj: Node3D, type: String)",
        "func _apply_properties(obj: Node3D, properties: Dictionary)",
        "func _route_through_floodgate(obj: Node3D)",
        "func _generate_unique_name(base_type: String)",
        "func destroy(obj: Node3D)",
        "func get_all_of_type(type: String)",
        "func get_statistics()"
      ]
    },
    {
      "file_path": "scripts/core/unified_scene_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_containers()",
        "func _find_original_ground()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func clear_current_scene()",
        "func load_static_scene(scene_name: String)",
        "func generate_procedural_world(size: int = 128)",
        "func load_hybrid_scene(scene_name: String, with_procedural: bool = true)",
        "func restore_default_scene()",
        "func add_object_to_scene(object: Node3D, category: String = \"object\")",
        "func get_spawn_position()",
        "func get_ground_height_at(position: Vector3)",
        "func get_current_scene_info()",
        "func is_procedural_scene()",
        "func has_terrain()",
        "func _ensure_ground_visible()",
        "func _create_emergency_ground()"
      ]
    },
    {
      "file_path": "scripts/core/universal_being.gd",
      "class_name": "UniversalBeing",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func become(new_form: String)",
        "func manifest(form_type: String)",
        "func _create_basic_manifestation(form_type: String)",
        "func set_property(key: String, value: Variant)",
        "func get_property(key: String, default_value: Variant = null)",
        "func become_interface(interface_type: String, properties: Dictionary = {})",
        "func become_container(container_type: String, size: Vector3 = Vector3(10, 5, 10)",
        "func get_container()",
        "func connect_to(other: UniversalBeing)",
        "func freeze()",
        "func unfreeze()",
        "func _to_string()",
        "func become_conscious(level: int = 1)",
        "func _initialize_basic_consciousness()",
        "func _initialize_advanced_consciousness()",
        "func _initialize_collective_consciousness()",
        "func _create_simple_task_manager()",
        "func connect_to_body(body: Node3D)",
        "func think_and_act(delta: float)",
        "func _process_basic_thoughts(delta: float)",
        "func _process_advanced_thoughts(delta: float)",
        "func _process_collective_thoughts(delta: float)",
        "func _set_new_goal()",
        "func _execute_goal_with_brain()",
        "func _execute_tree_grow_fruit_conscious()",
        "func _spawn_conscious_fruit()",
        "func _execute_astral_seek_food_conscious()",
        "func _consume_food(food_item: Node3D)",
        "func _execute_ragdoll_balance_conscious()",
        "func _execute_ragdoll_walking_conscious()",
        "func _execute_bird_find_food_conscious()",
        "func _scan_for_food()",
        "func _react_to_urgent_need(need_name: String)",
        "func _update_needs(delta: float)",
        "func _share_consciousness_data(other_being: UniversalBeing)",
        "func receive_shared_information(info_type: String, _data: Variant)",
        "func _on_body_action_started(action: String)",
        "func _on_body_action_completed(action: String, success: bool)",
        "func get_consciousness_status()",
        "func _start_action(action_name: String)",
        "func _execute_grow_fruit_action()",
        "func _spawn_fruit_being()",
        "func _execute_seek_food_action()",
        "func _execute_walk_action()",
        "func _execute_balance_action()",
        "func _move_body_towards(target_position: Vector3)",
        "func _complete_action(action_name: String, success: bool)",
        "func _plan_new_goal()",
        "func _find_most_urgent_need()",
        "func _find_best_action_for_need(need_name: String)",
        "func connect_neural_pathway(other_being: UniversalBeing)",
        "func _share_information_with(other_being: UniversalBeing)",
        "func _create_asset_creator_interface(properties: Dictionary)",
        "func _create_console_interface(properties: Dictionary)",
        "func _create_grid_interface(properties: Dictionary)",
        "func _create_inspector_interface(properties: Dictionary)",
        "func _create_generic_interface(interface_type: String, properties: Dictionary)",
        "func _create_basic_interface_fallback(interface_type: String)",
        "func _on_interface_clicked(camera: Node, event: InputEvent, position: Vector3, normal: Vector3, shape_idx: int, panel: Control)",
        "func _on_interface_hover_start()",
        "func _on_interface_hover_end()",
        "func _on_interface_interaction(button_id: String, _data: Dictionary)",
        "func _on_interface_value_changed(element_id: String, new_value: Variant)",
        "func _handle_console_command(command: String)",
        "func _handle_asset_creation(asset_data: Dictionary)",
        "func _handle_quick_action(action: String)",
        "func _handle_neural_status_request()",
        "func _refresh_neural_displays()",
        "func _refresh_neural_interfaces_recursive(node: Node)",
        "func _create_neural_status_interface()",
        "func _run_consciousness_test()",
        "func evolve_to_system_interface(system_name: String)",
        "func _connect_interface_to_systems(interface: EnhancedInterfaceSystem, system_name: String)",
        "func _find_all_conscious_beings(node: Node, conscious_beings: Array)",
        "func make_interface_always_face_camera()",
        "func set_interface_transparency(alpha: float)",
        "func get_interface_type()",
        "func is_interface()"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_3d_blueprint_parser.gd",
      "class_name": "UniversalBeing3DBlueprintParser",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func parse_blueprint_file(file_path: String)",
        "func _parse_element_line(line: String, line_number: int)",
        "func _parse_properties(properties_string: String)",
        "func _convert_property_value(value_str: String)",
        "func get_elements_by_type(element_type: String)",
        "func get_element_by_text(text: String)",
        "func create_default_blueprint(interface_type: String)",
        "func _create_default_asset_creator()",
        "func _create_default_console()",
        "func _create_default_inspector()",
        "func _create_generic_blueprint(interface_type: String)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_asset_connector.gd",
      "class_name": "UniversalBeingAssetConnector",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func enhance_being_with_asset(being: Node3D, asset_type: String)",
        "func get_available_assets()",
        "func has_asset(asset_type: String)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_base.gd",
      "class_name": "UniversalBeingBase",
      "extends_from": "Node3D",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func _process(delta: float)",
        "func _input(event: InputEvent)",
        "func sewers()",
        "func pentagon_init()",
        "func pentagon_ready()",
        "func pentagon_process(delta: float)",
        "func pentagon_input(event: InputEvent)",
        "func pentagon_sewers()",
        "func _register_with_floodgate()",
        "func _generate_uuid()",
        "func universal_add_child(child: Node, parent: Node = null)",
        "func evolve_into(new_form: String, evolution_data: Dictionary = {})",
        "func _notify_evolution(from: String, to: String)",
        "func add_evolution_possibility(form: String)",
        "func connect_to_being(other_being: UniversalBeingBase, connection_type: String = \"default\")",
        "func _receive_connection(from_being: UniversalBeingBase, connection_type: String)",
        "func call_evolved_function(function_name: String, params: Array = [])",
        "func add_ability(function_name: String)",
        "func remove_ability(function_name: String)",
        "func store_memory(key: String, value: Variant)",
        "func get_memory(key: String, default_value: Variant = null)",
        "func clear_memory(key: String)",
        "func _log_pentagon_activity(function_name: String)",
        "func _on_pentagon_init()",
        "func _on_pentagon_ready()",
        "func _on_pentagon_process(delta: float)",
        "func _on_pentagon_input(event: InputEvent)",
        "func _on_pentagon_sewers()",
        "func get_universal_status()",
        "func console_info()",
        "func manifest_as_interface(interface_type: String, properties: Dictionary = {})",
        "func _setup_as_button(properties: Dictionary)",
        "func _setup_as_panel(properties: Dictionary)",
        "func _setup_as_window(properties: Dictionary)",
        "func _optimize_based_on_distance()",
        "func _set_optimization_state(new_state: String)",
        "func _notification(what: int)",
        "func _remove_connection(being: UniversalBeingBase)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_base_enhanced.gd",
      "class_name": "UniversalBeingBaseEnhanced",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func pentagon_ready_with_dependencies()",
        "func _delayed_pentagon_ready()",
        "func get_pentagon_dependencies()",
        "func pentagon_ready()",
        "func require_node(node_path: String)",
        "func require_autoload(autoload_name: String)",
        "func wait_for_node(node_path: String, callback: Callable)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func is_pentagon_ready()",
        "func get_pentagon_status()",
        "func force_pentagon_retry()"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_floodgate_integration.gd",
      "class_name": "UniversalBeingFloodgateIntegration",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_references()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_universal_being_through_floodgate(type: String, position: Vector3, properties: Dictionary = {})",
        "func _on_being_created(result: Dictionary)",
        "func _create_being_directly(type: String, position: Vector3, properties: Dictionary)",
        "func enhance_universal_being(being: UniversalBeing, asset_type: String)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_layer_system.gd",
      "class_name": "UniversalBeingLayerSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_commands()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func add_to_layer(node: Node3D, layer: LayerType)",
        "func remove_from_all_layers(node: Node3D)",
        "func _apply_world_layer(node: Node3D)",
        "func _apply_interface_layer(node: Node3D)",
        "func _apply_overlay_layer(node: Node3D)",
        "func _make_always_visible(node: Node3D)",
        "func _apply_always_visible_recursive(node: Node)",
        "func _get_always_visible_material()",
        "func _setup_interface_materials()",
        "func _apply_interface_materials_to_node(node: Node3D)",
        "func _apply_overlay_materials_to_node(node: Node3D)",
        "func _reset_node_rendering(node: Node3D)",
        "func _reset_rendering_recursive(node: Node)",
        "func auto_assign_gizmo_to_interface_layer()",
        "func auto_assign_interface_beings()",
        "func cmd_layer_add(args: Array)",
        "func cmd_layer_list(_args: Array)",
        "func cmd_layer_gizmo(_args: Array)",
        "func cmd_layer_show(args: Array)",
        "func _find_object_by_name(object_name: String)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_minimal.gd",
      "class_name": "UniversalBeingMinimal",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func become(new_form: String)",
        "func become_conscious(_level: int = 1)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_node_base.gd",
      "class_name": "UniversalBeingNodeBase",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func _process(delta: float)",
        "func _input(event: InputEvent)",
        "func sewers()",
        "func pentagon_init()",
        "func pentagon_ready()",
        "func pentagon_process(_delta: float)",
        "func pentagon_input(_event: InputEvent)",
        "func pentagon_sewers()",
        "func pentagon_log(message: String)",
        "func get_floodgate()",
        "func get_console()",
        "func get_akashic()",
        "func pentagon_create_child(child: Node, parent: Node = null)",
        "func pentagon_get_timer()",
        "func pentagon_get_material(material_type: String = \"default\")",
        "func get_pentagon_type()",
        "func get_pentagon_version()",
        "func is_pentagon_compliant()",
        "func can_become(evolution_type: String)",
        "func become(evolution_type: String)",
        "func register_with_pentagon()",
        "func connect_to_akashic()",
        "func get_pentagon_status()"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_scene_container.gd",
      "class_name": "UniversalBeingSceneContainer",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_spatial_points()",
        "func _create_visual_elements()",
        "func _create_boundary_visualization()",
        "func _create_connection_point_visualization()",
        "func _create_point_marker(marker_position: Vector3, color: Color, size: float, marker_name: String)",
        "func _create_connection_point_visualizer(connection_data: Dictionary, index: int)",
        "func _get_face_normal(side_index: int)",
        "func _setup_interaction_area()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func add_being_to_container(being: UniversalBeing, target_position: Vector3 = Vector3.ZERO)",
        "func remove_being_from_container(being: UniversalBeing)",
        "func get_snap_position(world_position: Vector3)",
        "func _is_position_within_bounds(check_position: Vector3)",
        "func create_connection_point(point_position: Vector3, connection_type: String, properties: Dictionary = {})",
        "func connect_to_container(other_container: UniversalBeingSceneContainer, my_connection_id: int, other_connection_id: int)",
        "func _on_being_entered_container(body: Node3D)",
        "func _on_being_exited_container(body: Node3D)",
        "func _on_connection_point_clicked(connection_data: Dictionary, index: int, _camera: Node, event: InputEvent, _position: Vector3, _normal: Vector3, _shape_idx: int)",
        "func get_available_connection_points()",
        "func get_beings_near_position(target_position: Vector3, radius: float = 2.0)",
        "func set_container_size(new_size: Vector3)",
        "func get_container_info()",
        "func handle_console_command(command: String, args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/universal_being_visualizer.gd",
      "class_name": "UniversalBeingVisualizer",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _generate_uuid()",
        "func _create_star_visualization()",
        "func _create_star_texture()",
        "func _create_interaction_area()",
        "func _setup_transformation_system()",
        "func _register_with_systems()",
        "func _on_input_event(_camera: Node, event: InputEvent, event_position: Vector3, _normal: Vector3, _shape_idx: int)",
        "func _on_clicked()",
        "func _create_click_effect()",
        "func _on_body_entered(body: Node3D)",
        "func _on_body_exited(body: Node3D)",
        "func _on_area_entered(area: Area3D)",
        "func _on_area_exited(area: Area3D)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func transform_into(new_form: String, properties: Dictionary = {})",
        "func _start_transformation_visual()",
        "func _complete_transformation()",
        "func _create_new_manifestation()",
        "func _analyze_transformation_possibilities()",
        "func get_full_state()",
        "func _print(message: String)",
        "func register_console_commands()",
        "func _cmd_transform(args: Array)",
        "func _cmd_status(_args: Array)",
        "func _cmd_nearby(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/core/universal_data_hub.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_system(system_name: String, system: Node)",
        "func get_system(system_name: String)",
        "func register_object(obj: Node, type: String = \"generic\")",
        "func get_object(uuid: String)",
        "func get_objects_by_type(type: String)",
        "func unregister_object(uuid: String)",
        "func get_all_beings()",
        "func get_beings_by_form(form: String)",
        "func register_rule(rule_name: String, callable: Callable)",
        "func execute_rule(rule_name: String, params: Array = [])",
        "func set_global(var_name: String, value: Variant)",
        "func get_global(var_name: String, default: Variant = null)",
        "func check_limits()",
        "func cleanup_invalid()",
        "func _generate_uuid()",
        "func _estimate_memory()",
        "func get_stats()",
        "func find_nearest_object(pos: Vector3, type: String = \"\")",
        "func broadcast_to_systems(message: String, _data: Dictionary = {})"
      ]
    },
    {
      "file_path": "scripts/core/universal_gizmo_system.gd",
      "class_name": "UniversalGizmoSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func attach_to_object(object: Node3D)",
        "func detach()",
        "func _unhandled_input(event: InputEvent)",
        "func _create_translation_gizmos()",
        "func _create_rotation_gizmos()",
        "func _create_scale_gizmos()",
        "func _create_gizmo_being(being_name: String)",
        "func _setup_arrow_visual(arrow_being: Node3D, axis: String)",
        "func _setup_plane_visual(plane_being: Node3D, plane: String)",
        "func _setup_ring_visual(ring_being: Node3D, axis: String)",
        "func _setup_scale_visual(scale_being: Node3D, axis: String)",
        "func _setup_uniform_scale_visual(uniform_being: Node3D)",
        "func _setup_gizmo_interaction(gizmo_being: Node3D, axis: String, mode: String)",
        "func _process(_delta: float)",
        "func _update_gizmo_position()",
        "func _find_mesh_instance(node: Node)",
        "func _handle_drag()",
        "func set_mode(mode: String)",
        "func _ready_commands()",
        "func _cmd_gizmo(args: Array)",
        "func _find_object_by_name(object_name: String)",
        "func _recursive_find_by_name(node: Node, target_name: String)",
        "func _connect_to_mouse_system()",
        "func _is_gizmo_component(obj: Node)",
        "func _handle_gizmo_click(obj: Node)",
        "func _find_gizmo_being(clicked_obj: Node)",
        "func _on_gizmo_selected(gizmo_being: Node3D, axis: String, mode: String)",
        "func _update_drag(mouse_pos: Vector2)",
        "func _end_drag()",
        "func _apply_translation(delta: Vector2, camera: Camera3D)",
        "func _apply_rotation(delta: Vector2)",
        "func _apply_scale(delta: Vector2)",
        "func _cmd_gizmo_scale(args: Array)",
        "func _cmd_gizmo_offset(args: Array)",
        "func _assign_to_interface_layer()"
      ]
    },
    {
      "file_path": "scripts/core/universal_inspection_bridge.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _connect_to_systems()",
        "func _find_inspector_in_scene()",
        "func _setup_scene_tree_monitoring()",
        "func _on_any_node_added(node: Node)",
        "func _should_make_inspectable(node: Node)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func any_keyword_in_string(text: String, keywords: Array)",
        "func _make_object_inspectable(object: Node, source: String = \"unknown\")",
        "func _get_object_position(object: Node)",
        "func _connect_floodgate_signals()",
        "func _connect_universal_signals()",
        "func _on_floodgate_object_created(object: Node)",
        "func _on_universal_object_spawned(object: Node)",
        "func _register_bridge_commands()",
        "func _cmd_list_inspectable(_args: Array)",
        "func _cmd_inspect_by_name(args: Array)",
        "func _cmd_bridge_status(_args: Array)",
        "func _find_and_list_inspectors()"
      ]
    },
    {
      "file_path": "scripts/core/universal_workflow_analyzer.gd",
      "class_name": "UniversalWorkflowAnalyzer",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func analyze_entire_project()",
        "func _scan_all_scripts()",
        "func _scan_directory_recursive(dir: DirAccess, path: String)",
        "func _analyze_script(script_path: String)",
        "func _determine_purpose(script_path: String)",
        "func _map_execution_flows()",
        "func _trace_execution_path(func_name: String, visited: Array = [])",
        "func _find_duplicates()",
        "func _suggest_combinations()",
        "func _generate_workflow_graph()",
        "func _get_files_with_substring(substring: String)",
        "func generate_complete_report()",
        "func generate_combination_script(suggestion: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/debug/consciousness_bridge.gd",
      "class_name": "ConsciousnessBridge",
      "extends_from": "UniversalBeing",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _connect_existing_systems()",
        "func _register_human_consciousness()",
        "func _register_gamma_consciousness()",
        "func _setup_natural_language_processing()",
        "func _enable_shared_console()",
        "func _cmd_where_am_i(_args: Array)",
        "func _cmd_what_am_i_looking_at(_args: Array)",
        "func _cmd_who_else_is_here(_args: Array)",
        "func _cmd_examine(args: Array)",
        "func _cmd_gamma_analyze(args: Array)",
        "func _cmd_shared_focus(args: Array)",
        "func _find_universal_being_by_name(name: String)",
        "func _set_shared_focus(target: UniversalBeing)",
        "func _gamma_analyze_target(target: UniversalBeing)",
        "func _gamma_deep_analysis(target: UniversalBeing)",
        "func _gamma_ai_analysis(target: String)",
        "func _generate_random_recommendation()",
        "func _get_human_actions()",
        "func _get_gamma_actions()",
        "func _check_pentagon_compliance(target: UniversalBeing)",
        "func _estimate_performance_impact(target: UniversalBeing)",
        "func _analyze_connection_density(target: UniversalBeing)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/debug/godot_remote_bridge.gd",
      "class_name": "GodotRemoteBridge",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_http_server()",
        "func _process(delta)",
        "func _handle_http_request(client: StreamPeerTCP)",
        "func _process_http_request(request_data: String)",
        "func _extract_http_body(request_data: String)",
        "func _get_system_status()",
        "func _get_gamma_response()",
        "func _send_gamma_message(body: String)",
        "func _get_sewers_status()",
        "func _get_pentagon_status()",
        "func _create_universal_being(body: String)",
        "func _error_response(message: String)",
        "func _setup_file_communication()",
        "func _check_file_commands()",
        "func _process_file_command(file_path: String)",
        "func _connect_pentagon_systems()",
        "func _find_gamma_controller()",
        "func _ensure_communication_directories()",
        "func _fallback_to_file_only()",
        "func _setup_command_processor()",
        "func _process_command_queue()",
        "func _execute_claude_command(command: Dictionary)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_bridge_status()"
      ]
    },
    {
      "file_path": "scripts/debug/movement_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func test_movement_stacking()"
      ]
    },
    {
      "file_path": "scripts/debug/ragdoll_debug_visualizer.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_materials()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_ragdoll(ragdoll: Node3D)",
        "func _process(_delta: float)",
        "func _clear_debug_elements()",
        "func _visualize_joints(body_parts: Dictionary)",
        "func _visualize_center_of_mass(body_parts: Dictionary)",
        "func _visualize_velocities(body_parts: Dictionary)",
        "func _visualize_walker_state()",
        "func _visualize_support_polygon(body_parts: Dictionary)",
        "func _draw_line(start: Vector3, end: Vector3, material: Material, thickness: float = 0.02)",
        "func _draw_sphere(pos: Vector3, radius: float, material: Material)",
        "func _create_label(pos: Vector3, text: String, color: Color)",
        "func toggle_debug_option(option: String)"
      ]
    },
    {
      "file_path": "scripts/debug/ragdoll_physics_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func test_configuration(config_name: String)",
        "func _apply_config_to_ragdoll(config: Dictionary)",
        "func _find_rigid_bodies_recursive(node: Node, bodies: Array)",
        "func show_physics_info()",
        "func adjust_single_property(property: String, value: float)",
        "func run_movement_test()",
        "func compare_all_configs()",
        "func handle_physics_command(args: Array)"
      ]
    },
    {
      "file_path": "scripts/debug/universal_entity_debug.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/effects/blink_animation_controller.gd",
      "class_name": "BlinkAnimationController",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _find_node_by_class(node, class_name_str)",
        "func _initialize_timers()",
        "func _create_default_animations()",
        "func _schedule_next_blink()",
        "func _schedule_next_wink()",
        "func _schedule_next_flicker()",
        "func _execute_blink()",
        "func _execute_wink()",
        "func _execute_flicker()",
        "func _blink_node(node_name: String, blink_count: int)",
        "func _wink_node(node_name: String, is_left: bool)",
        "func _flicker_node(node_name: String, flicker_count: int)",
        "func _on_blink_timer_timeout()",
        "func _on_wink_timer_timeout()",
        "func _on_flicker_timer_timeout()",
        "func _on_turn_started(turn_number)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_node(node_name: String, node: Node)",
        "func unregister_node(node_name: String)",
        "func trigger_blink(node_name: String = \"\", blink_count: int = 1)",
        "func trigger_wink(node_name: String = \"\", is_left: bool = true)",
        "func trigger_flicker(node_name: String = \"\", flicker_count: int = 3)",
        "func set_enabled(is_enabled: bool)",
        "func set_wink_enabled(is_enabled: bool)",
        "func set_flicker_enabled(is_enabled: bool)",
        "func on_turn_changed(turn_number: int, turn_data: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/effects/dimensional_color_system.gd",
      "class_name": "DimensionalColorSystemEffect",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _generate_tertiary_colors()",
        "func _initialize_frequency_color_map()",
        "func _initialize_mesh_point_map()",
        "func _generate_color_palettes()",
        "func _find_systems()",
        "func _find_node_by_class(node, class_name_str)",
        "func _process(delta)",
        "func _update_animations(delta)",
        "func _update_pulse_animation(animation, progress)",
        "func _update_fade_animation(animation, progress)",
        "func _update_cycle_animation(animation, progress)",
        "func _update_rainbow_animation(animation, progress)",
        "func _update_mesh_point_animation(animation, progress)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_color_for_frequency(frequency: int)",
        "func get_mesh_point_type(frequency: int)",
        "func get_closest_harmonic_frequency(frequency: int)",
        "func get_color_palette(palette_name: String = \"default\")",
        "func start_pulse_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, pulse_freq: float = DEFAULT_PULSE_FREQUENCY, amplitude: float = DEFAULT_AMPLITUDE)",
        "func start_fade_animation(frequency: int, target_color: Color, duration: float = DEFAULT_ANIMATION_DURATION)",
        "func start_cycle_animation(frequency: int, palette_name: String = \"default\", duration: float = DEFAULT_ANIMATION_DURATION, cycle_speed: float = 1.0)",
        "func start_rainbow_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, rainbow_speed: float = 1.0, saturation: float = 1.0, brightness: float = 1.0)",
        "func start_mesh_point_animation(frequency: int, duration: float = DEFAULT_ANIMATION_DURATION, pulse_freq: float = DEFAULT_PULSE_FREQUENCY)",
        "func stop_animation(animation_id: String)",
        "func stop_all_animations()",
        "func get_colored_text(text: String, frequency: int)",
        "func get_gradient_text(text: String, start_freq: int, end_freq: int)",
        "func colorize_line(line: String, base_frequency: int, symbol_boost: int = 10)",
        "func colorize_mesh_points(text: String)",
        "func start_line_animation(line_index: int, frequency: int = 120, animation_type: String = \"pulse\", duration: float = DEFAULT_ANIMATION_DURATION)",
        "func animate_text_typing(text: String, base_freq: int = 120, duration: float = 2.0, delay_per_char: float = 0.05)",
        "func highlight_mesh_points(frequencies: Array, duration: float = 5.0)",
        "func highlight_mesh_centers(duration: float = 5.0)",
        "func highlight_mesh_edges(duration: float = 5.0)",
        "func highlight_mesh_corners(duration: float = 5.0)",
        "func get_mesh_visualization_colors()",
        "func sync_with_ethereal_bridge()",
        "func get_frequency_info(frequency: int)",
        "func _frequency_has_animation(frequency: int)"
      ]
    },
    {
      "file_path": "scripts/effects/visual_indicator_system.gd",
      "class_name": "VisualIndicatorEffects",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_timers()",
        "func _find_time_tracker()",
        "func _find_node_by_class(node: Node, target_class: String)",
        "func _apply_mode_settings(mode_index)",
        "func _set_symbol(symbol_index)",
        "func _on_blink_timer_timeout()",
        "func _on_color_cycle_timer_timeout()",
        "func _on_animation_timer_timeout()",
        "func _on_time_updated(_session_time, total_time)",
        "func _on_hour_limit_reached(_hours)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_mode(mode_index: int)",
        "func cycle_mode()",
        "func toggle_enabled()",
        "func get_current_symbol()",
        "func get_current_mode_name()",
        "func get_visual_state()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/jsh_adapter.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func initialize_jsh_for_ragdoll()",
        "func create_simple_container(container_name: String)",
        "func create_simple_datapoint(data: Dictionary)",
        "func get_scene_tree_summary(root: Node = null)",
        "func _build_tree_string(node: Node, depth: int)"
      ]
    },
    {
      "file_path": "scripts/neural/simple_task_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_task(task_name: String, priority: int = 1)",
        "func add_task(task: Dictionary)",
        "func add_task_step(task: Dictionary, step_action: String, duration: float = 1.0)",
        "func start_next_task()",
        "func complete_current_task(success: bool = true)",
        "func _process(_delta: float)",
        "func _sort_tasks_by_priority()",
        "func get_task_status()",
        "func has_active_task()",
        "func get_queue_size()",
        "func plan_action(needs: Dictionary)",
        "func create_action_chain(goal: String)"
      ]
    },
    {
      "file_path": "scripts/passive_mode/autonomous_developer.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_passive_mode()",
        "func stop_passive_mode()",
        "func _process(_delta: float)",
        "func _check_limits()",
        "func _process_idle()",
        "func _process_planning()",
        "func _process_coding()",
        "func _process_testing()",
        "func _process_documenting()",
        "func _process_reviewing()",
        "func _process_committing()",
        "func _process_resting()",
        "func _select_next_task()",
        "func _generate_passive_tasks()",
        "func _estimate_task_tokens(task: Dictionary)",
        "func _create_task_plan(_task: Dictionary)",
        "func _execute_coding_task(_task: Dictionary)",
        "func _run_tests(_task: Dictionary)",
        "func _update_documentation(_task: Dictionary)",
        "func _generate_task_report(task: Dictionary)",
        "func _requires_approval(task: Dictionary)",
        "func _queue_for_approval(task: Dictionary)",
        "func _commit_changes(_task: Dictionary)",
        "func _update_version()",
        "func _revert_changes(_task: Dictionary)",
        "func _complete_task(success: bool)",
        "func _change_state(new_state: DevelopmentState)",
        "func _generate_daily_report()",
        "func _save_state()",
        "func _load_state()",
        "func _load_approval_queue()",
        "func _save_approval_queue(queue: Array)",
        "func _log_activity(message: String)",
        "func add_task(task: Dictionary)",
        "func get_status()",
        "func approve_task(_task_id: String)",
        "func set_project(project_name: String)"
      ]
    },
    {
      "file_path": "scripts/passive_mode/multi_project_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_waiting_for_user()",
        "func user_responded()",
        "func _on_user_timeout()",
        "func _start_background_work()",
        "func _select_background_project()",
        "func _priority_value(priority: String)",
        "func _perform_background_tasks()",
        "func _execute_background_task(task: Dictionary)",
        "func switch_project(project_id: String)",
        "func get_project_todos(project_id: String)",
        "func add_task_to_project(project_id: String, task: Dictionary)",
        "func get_current_project_status()",
        "func get_all_projects_status()",
        "func _initialize_todo_lists()",
        "func _cleanup_project_files()",
        "func _update_documentation()",
        "func _research_feature(topic: String)",
        "func _optimize_code(target: String)",
        "func _load_project_data()",
        "func save_project_data()",
        "func list_projects()",
        "func get_timing_report()"
      ]
    },
    {
      "file_path": "scripts/passive_mode/passive_mode_controller.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_passive_mode()",
        "func stop_passive_mode()",
        "func get_status()",
        "func add_task(task_name: String, priority: String = \"medium\")",
        "func create_branch(branch_name: String)",
        "func switch_branch(branch_name: String)",
        "func commit(message: String)",
        "func create_mr(title: String)",
        "func approve_mr(mr_id: String)",
        "func merge(mr_id: String)",
        "func show_diff()",
        "func set_token_budget(budget: int)",
        "func set_auto_commit(enabled: bool)",
        "func set_require_approval(enabled: bool)",
        "func _state_to_string(state: int)",
        "func _parse_priority(priority: String)",
        "func _infer_task_type(task_name: String)",
        "func _on_task_completed(task: Dictionary)",
        "func _on_daily_report(report: String)",
        "func _on_merge_requested(mr_id: String)"
      ]
    },
    {
      "file_path": "scripts/passive_mode/passive_mode_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func run_test()"
      ]
    },
    {
      "file_path": "scripts/passive_mode/threaded_test_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _initialize_test_containers()",
        "func _get_test_dependencies(feature: String)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_zone_test(zone: String)",
        "func _dependencies_met(feature: String)",
        "func _process_tests_this_frame()",
        "func _process_test_step(feature: String, container: Dictionary)",
        "func _run_feature_test(feature: String)",
        "func _test_console_system()",
        "func _test_physics_system()",
        "func _test_object_spawning()",
        "func _test_ragdoll_physics()",
        "func _test_ragdoll_walking()",
        "func _test_scene_loading()",
        "func _test_dialogue_system()",
        "func _test_astral_beings()",
        "func _test_passive_mode()",
        "func _test_workflow_system()",
        "func _test_version_control()",
        "func _check_zone_completion()",
        "func _should_start_new_zone()",
        "func _has_next_zone()",
        "func _start_next_zone()",
        "func _finalize_all_tests()",
        "func run_full_test_suite()",
        "func run_zone_test(zone: String)",
        "func get_test_status()",
        "func get_zone_progress(zone: String)"
      ]
    },
    {
      "file_path": "scripts/passive_mode/version_backup_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func run_test_suite()",
        "func _test_feature(feature: String)",
        "func _test_console_system()",
        "func _test_object_spawning()",
        "func _test_ragdoll_physics()",
        "func _test_ragdoll_walking()",
        "func _test_scene_loading()",
        "func _test_scene_saving()",
        "func _test_dialogue_system()",
        "func _test_astral_beings()",
        "func _test_passive_mode()",
        "func _test_version_control()",
        "func _create_version_backup(test_results: Dictionary)",
        "func _get_files_snapshot()",
        "func find_last_working_version(feature: String)",
        "func compare_versions(version1: String, version2: String)",
        "func restore_version(version_number: String)",
        "func generate_feature_report()",
        "func _find_version_data(version_number: String)",
        "func _array_diff(arr1: Array, arr2: Array)",
        "func _ensure_backup_directory()",
        "func _load_version_history()",
        "func _cleanup_old_backups()",
        "func increment_version(bump_type: String = \"patch\")",
        "func get_current_version()",
        "func get_working_features()",
        "func get_broken_features()"
      ]
    },
    {
      "file_path": "scripts/passive_mode/workflow_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_feature_branch(branch_name: String, description: String = \"\")",
        "func switch_branch(branch_name: String)",
        "func track_change(file_path: String, change_type: ChangeType, content: String = \"\")",
        "func commit_changes(message: String, author: String = \"Autonomous Developer\")",
        "func create_merge_request(title: String, description: String = \"\")",
        "func review_merge_request(mr_id: String, approved: bool, comments: String = \"\")",
        "func merge_branch(mr_id: String)",
        "func _perform_merge(source: String, target: String)",
        "func _check_conflicts(source: String, target: String)",
        "func _bump_version(merge_request: Dictionary)",
        "func get_workflow_status()",
        "func get_change_diff(branch: String = \"\")",
        "func _get_change_symbol(type: ChangeType)",
        "func _find_merge_request(mr_id: String)",
        "func _get_open_merge_requests()",
        "func _generate_commit_hash()",
        "func _allow_direct_main_commit()",
        "func _reset_change_summary()",
        "func _log_workflow(message: String)",
        "func _save_workflow_state()",
        "func _load_workflow_state()"
      ]
    },
    {
      "file_path": "scripts/patches/add_commands_directly.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _cmd_spawn_biowalker(args: Array)",
        "func _cmd_walker_debug(args: Array)",
        "func _cmd_layers(_args: Array)",
        "func _cmd_layer(args: Array)",
        "func _print(text: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/advanced_inspector_integration.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_integration()",
        "func _create_advanced_inspector()",
        "func _create_scene_editor()",
        "func _register_advanced_commands()",
        "func _cmd_inspect(args: Array)",
        "func _cmd_inspector_control(args: Array)",
        "func _cmd_edit_property(args: Array)",
        "func _cmd_select(args: Array)",
        "func _cmd_select_all(args: Array)",
        "func _cmd_deselect(args: Array)",
        "func _cmd_show_selection(_args: Array)",
        "func _cmd_set_position(args: Array)",
        "func _cmd_set_rotation(args: Array)",
        "func _cmd_set_scale(args: Array)",
        "func _cmd_save_scene(args: Array)",
        "func _cmd_load_scene(args: Array)",
        "func _find_object_by_name(object_name: String)",
        "func _find_node_recursive(node: Node, target_name: String, exact_match: bool)",
        "func _find_objects_by_pattern(pattern: String)",
        "func _find_objects_by_type(type_name: String)",
        "func _collect_matching_nodes(node: Node, pattern: String, results: Array)",
        "func _collect_nodes_by_type(node: Node, type_name: String, results: Array)",
        "func _get_object_under_mouse()",
        "func _parse_value(value_str: String)",
        "func _on_property_changed(object: Node, property: String, value: Variant)",
        "func _on_scene_save_requested(_scene_data: Dictionary)",
        "func _on_object_deleted(object: Node)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/console_command_extension.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _find_and_hook_input_field(node: Node)",
        "func _on_extended_input_submitted(text: String)",
        "func _clear_input_field()",
        "func _clear_input_recursive(node: Node)",
        "func _cmd_spawn_biowalker(args: Array)",
        "func _cmd_walker_debug(args: Array)",
        "func _cmd_layers(_args: Array)",
        "func _cmd_layer(args: Array)",
        "func _print(text: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/console_debug_overlay.gd",
      "class_name": "Anonymous",
      "extends_from": "CanvasLayer",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(_delta: float)",
        "func _input(event: InputEvent)",
        "func _init()",
        "func pentagon_init()",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/console_diagnostic.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/console_layer_integration.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_layer_commands()",
        "func _cmd_layer(args: Array)",
        "func _apply_layer_action(layer: int, action: String, layer_name: String)",
        "func _cmd_layers(_args: Array)",
        "func _cmd_reality(_args: Array)",
        "func _cmd_debug_point(args: Array)",
        "func _cmd_debug_line(args: Array)",
        "func _cmd_debug_clear(_args: Array)",
        "func _cmd_world_view(args: Array)",
        "func _cmd_map_view(args: Array)",
        "func _print(text: String)",
        "func _get_view_mode_name()",
        "func _parse_color(color_str: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/console_spam_filter.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func should_show_message(message: String)",
        "func _get_message_key(message: String)",
        "func _get_message_priority(message: String)",
        "func _apply_filtering_rules(message_key: String, priority: MessagePriority, time_since_last: float, current_time: float)",
        "func _cleanup_old_messages()",
        "func filter_message(message: String)",
        "func get_filter_stats()",
        "func _count_total_suppressions()",
        "func setup_console_commands()",
        "func _cmd_filter_stats(_args: Array)",
        "func _cmd_filter_reset(_args: Array)",
        "func _cmd_filter_config(args: Array)",
        "func _print(text: String)"
      ]
    },
    {
      "file_path": "scripts/patches/console_ui_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _apply_console_fixes()",
        "func _fix_console_sizing()",
        "func _center_console()",
        "func _find_node_by_type(parent: Node, type_name: String)",
        "func _on_viewport_changed(_new_size: Vector2i)",
        "func _notification(what: int)",
        "func _cmd_fix_console(_args: Array)",
        "func _cmd_console_scale(args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/debug_integration_patch.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func patch_console_manager(_console: Node)",
        "func patch_jsh_systems()",
        "func add_debug_commands()",
        "func _init()"
      ]
    },
    {
      "file_path": "scripts/patches/debug_test_commands.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _test_command(args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/delayed_command_injector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/emergency_performance_commands.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _cmd_emergency_performance(_args: Array)",
        "func _cmd_disable_heavy_systems(_args: Array)",
        "func _cmd_performance_report(_args: Array)",
        "func _cmd_fix_fps(_args: Array)",
        "func _disable_heavy_processes(node: Node)",
        "func _count_nodes_recursive(node: Node)",
        "func _count_process_nodes(node: Node)",
        "func _get_active_systems()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/floodgate_console_bridge.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_floodgate_commands()",
        "func _cmd_create_node(args: Array)",
        "func _cmd_delete_node(args: Array)",
        "func _cmd_duplicate_node(args: Array)",
        "func _cmd_move_node(args: Array)",
        "func _cmd_rotate_node(args: Array)",
        "func _cmd_scale_node(args: Array)",
        "func _cmd_reparent_node(args: Array)",
        "func _cmd_set_property(args: Array)",
        "func _cmd_get_property(args: Array)",
        "func _cmd_list_properties(args: Array)",
        "func _cmd_call_method(args: Array)",
        "func _cmd_list_methods(args: Array)",
        "func _cmd_connect_signal(args: Array)",
        "func _cmd_disconnect_signal(args: Array)",
        "func _cmd_emit_signal(args: Array)",
        "func _cmd_list_signals(args: Array)",
        "func _cmd_load_asset(args: Array)",
        "func _cmd_unload_asset(args: Array)",
        "func _cmd_list_assets(_args: Array)",
        "func _cmd_save_scene(args: Array)",
        "func _cmd_load_scene(args: Array)",
        "func _cmd_clear_scene(_args: Array)",
        "func _cmd_list_nodes(args: Array)",
        "func _cmd_floodgate_status(_args: Array)",
        "func _cmd_floodgate_queue(_args: Array)",
        "func _cmd_floodgate_history(_args: Array)",
        "func _parse_value(value_str: String)",
        "func _get_operation_name(op_type)",
        "func _print_node_tree(node: Node, depth: int)",
        "func _print(text: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_collision_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _fix_gizmo_collisions()",
        "func _add_collision_to_gizmo(gizmo_being: Node3D, axis: String, mode: String)",
        "func _visualize_collision_shapes(enable: bool = true)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_debug_commands.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_debug_commands()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_gizmo_debug(_args: Array)",
        "func cmd_list_gizmo_parts(_args: Array)",
        "func cmd_show_gizmo_layers(_args: Array)",
        "func cmd_test_gizmo_click(_args: Array)",
        "func cmd_toggle_collision_debug(args: Array)",
        "func fix_gizmo_layers()",
        "func cmd_test_rotation_fix(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_direct_interaction_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_gizmo_fix()",
        "func _ensure_gizmo_collision_layers()",
        "func _unhandled_input(event: InputEvent)",
        "func _on_mouse_pressed(mouse_pos: Vector2)",
        "func _on_mouse_released()",
        "func _on_mouse_dragged(mouse_pos: Vector2)",
        "func _raycast_for_gizmo(mouse_pos: Vector2)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_debug_gizmo_collisions()",
        "func cmd_list_gizmo_components()"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_perfect_fix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_perfect_gizmo(_args: Array)",
        "func cmd_gizmo_show(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_reset_command.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_gizmo_reset(_args: Array)",
        "func cmd_gizmo_create(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/patches/gizmo_system_finder.gd",
      "class_name": "GizmoSystemFinder",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_console_commands()",
        "func find_gizmo_system()",
        "func _recursive_find_gizmo(node: Node)",
        "func create_gizmo_system()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func cmd_find_gizmo(args: Array)",
        "func cmd_gizmo_status(_args: Array)",
        "func cmd_force_show(_args: Array)",
        "func cmd_gizmo_target(args: Array)",
        "func _find_object_by_name(object_name: String)",
        "func _recursive_find_by_name(node: Node, target_name: String)"
      ]
    },
    {
      "file_path": "scripts/patches/pentagon_command_tester.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_test_command()",
        "func _cmd_test_pentagon(_args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/ragdoll_neural_integration.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_neural_commands()",
        "func _scan_integration_status()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func copy_neural_files()",
        "func enhance_biomechanical_walker()",
        "func _add_blinking_to_ragdoll(ragdoll: Node)",
        "func _add_health_indicators(ragdoll: Node)",
        "func _add_emotional_colors(ragdoll: Node)",
        "func _migrate_to_perfect_delta(ragdoll: Node)",
        "func spawn_perfect_ragdoll()",
        "func _cmd_activate_neural(_args: Array)",
        "func _cmd_neural_status(_args: Array)",
        "func _cmd_copy_neural_files(_args: Array)",
        "func _cmd_spawn_perfect_ragdoll(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/patches/scene_command_injector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/simple_console_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _test_command(_args: Array)",
        "func _hello_command(_args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/spawn_limiter.gd",
      "class_name": "Anonymous",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _count_existing_objects()",
        "func _on_node_added(node: Node)",
        "func _make_clickable(node: Node3D)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func reset_counts()",
        "func get_status()"
      ]
    },
    {
      "file_path": "scripts/patches/txt_window_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_test_window(_args: Array)",
        "func _create_gamma_bubble(args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/unified_walker_commands.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _register_walker_commands()",
        "func _cmd_spawn_walker(args: Array)",
        "func _cmd_walker_speed(args: Array)",
        "func _cmd_walker_teleport(args: Array)",
        "func _cmd_walker_info(_args: Array)",
        "func _cmd_walker_destroy(_args: Array)",
        "func _cmd_walker_debug(args: Array)",
        "func _on_step_completed(foot: String)",
        "func _on_phase_changed(leg: String, phase: String)",
        "func _print(message: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/universal_console_helper.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _ensure_universal_commands()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/patches/universal_quickfix.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/automated_warning_fixer.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func fix_unused_parameters_in_file(file_path: String)",
        "func should_prefix_parameter(content: String, func_name: String, param_name: String)",
        "func fix_all_warnings(base_path: String = \"res://scripts/\")",
        "func _scan_directory(path: String)",
        "func analyze_warning_patterns()",
        "func test_on_sample()",
        "func _process(delta: float)",
        "func _on_body_entered(body: Node2D)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func calculate_damage(attacker: Node, defender: Node, weapon: String)",
        "func _process(_delta: float)",
        "func _on_body_entered(_body: Node2D)",
        "func calculate_damage(_attacker: Node, defender: Node, _weapon: String)"
      ]
    },
    {
      "file_path": "scripts/test/batch_parameter_fixer.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func fix_file(file_path: String, dry_run: bool = false)",
        "func _process_line(line: String, file_path: String)",
        "func _fix_parameters(func_name: String, params_str: String)",
        "func batch_fix(file_paths: Array, dry_run: bool = false)",
        "func find_files_to_fix(base_path: String = \"res://scripts/\")",
        "func _scan_for_files(path: String, files: Array)",
        "func quick_fix_common()",
        "func test()",
        "func _process(delta: float)",
        "func _process(_delta: float)",
        "func _on_button_pressed()",
        "func _on_button_pressed()",
        "func _on_body_entered(body: Node2D)",
        "func _on_body_entered(_body: Node2D)",
        "func custom_function(param1: int, param2: String)",
        "func custom_function(param1: int, param2: String)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/debug_scene_inspector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func inspect_scene()",
        "func _print_tree(node: Node, indent: int, max_depth: int)",
        "func get_node_info(path: String)"
      ]
    },
    {
      "file_path": "scripts/test/final_universal_check.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/fix_knowledge_base.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func apply_known_fix(error_message: String, _file_path: String)",
        "func get_file_fix_history(file_name: String)",
        "func get_prevention_tips()",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/floodgate_test.gd",
      "class_name": "FloodgateTest",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func run_all_tests()",
        "func test_first_dimensional_magic()",
        "func test_second_dimensional_magic()",
        "func test_third_dimensional_magic()",
        "func test_fourth_dimensional_magic()",
        "func test_sixth_dimensional_magic()",
        "func test_asset_library()",
        "func test_stress_operations()",
        "func show_test_results()",
        "func _on_operation_completed(operation, success)",
        "func _exit_tree()"
      ]
    },
    {
      "file_path": "scripts/test/function_flow_tracker.gd",
      "class_name": "JSHConsole",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func trace_function_call(script_name: String, function_name: String, params: Array = [])",
        "func trace_function_return(script_name: String, function_name: String, return_value = null)",
        "func _check_floodgate_trigger(script_name: String, function_name: String)",
        "func generate_flow_report()",
        "func test_execution_path(path_name: String)",
        "func record_fix_applied(error_type: String, file_path: String, fix_description: String)",
        "func simulate_user_action(action: String)",
        "func get_test_recommendations()"
      ]
    },
    {
      "file_path": "scripts/test/integration_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _test_jsh_systems()",
        "func _test_ragdoll_enhancements()",
        "func _test_console_commands()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/layer_system_demo.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_demo_ragdoll()",
        "func _create_demo_environment()",
        "func _setup_demo_path()",
        "func _print_instructions()",
        "func _physics_process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func handle_console_command(command: String, args: Array)"
      ]
    },
    {
      "file_path": "scripts/test/minimal_universal_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _test_command(_args: Array)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/run_warning_fixes.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _analyze_files()",
        "func _create_backups()",
        "func _apply_fixes()",
        "func _generate_report()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func show_examples()",
        "func _process(delta: float)",
        "func _process(_delta: float)",
        "func _on_button_pressed()",
        "func _on_button_pressed()",
        "func _on_body_entered(body: Node2D)",
        "func _on_body_entered(_body: Node2D)",
        "func test_single_file(file_path: String)"
      ]
    },
    {
      "file_path": "scripts/test/startup_diagnostic.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _check_autoloads()",
        "func _check_input_actions()",
        "func _check_critical_nodes()",
        "func _check_common_issues()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/startup_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/test_universal_being_assets.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func run_tests()",
        "func _check_manifestation(being: Node3D, expected_type: String)"
      ]
    },
    {
      "file_path": "scripts/test/universal_entity_test.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/universal_launcher.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/universal_ready_check.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/test/warning_scanner.gd",
      "class_name": "Anonymous",
      "extends_from": "RefCounted",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func parse_godot_output(output_text: String)",
        "func _categorize_warning(warning_line: String, results: Dictionary)",
        "func _track_unused_parameter(param_name: String, file_path: String, results: Dictionary)",
        "func _track_unused_variable(var_name: String, file_path: String, results: Dictionary)",
        "func _track_unreachable_code(file_path: String, results: Dictionary)",
        "func _analyze_patterns(results: Dictionary)",
        "func generate_fix_script(results: Dictionary)",
        "func generate_report(results: Dictionary)",
        "func suggest_fix(param_name: String)",
        "func test_scan()",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/tools/optimize_autoloads.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func analyze_autoloads()",
        "func disable_heavy_autoloads()"
      ]
    },
    {
      "file_path": "scripts/tools/organize_project_files.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func organize_files()",
        "func _move_files_to_folder(dir: DirAccess, files: Array, target_folder: String)"
      ]
    },
    {
      "file_path": "scripts/tools/script_migration_helper.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 2,
      "init_count": 1,
      "process_count": 2,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (2)",
        "Multiple _process() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func scan_all_scripts()",
        "func _scan_directory(path: String)",
        "func _analyze_script(script_path: String)",
        "func generate_migration_plan(script_analysis: Dictionary)",
        "func process_managed(delta: float)",
        "func _process(delta)",
        "func _physics_process(delta)",
        "func auto_migrate_script(script_path: String)",
        "func _ready()",
        "func _process(\", \"func process_managed(\")",
        "func _physics_process(\", \"func process_managed(\")",
        "func migrate_all_scripts()",
        "func get_migration_report()",
        "func register_console_commands()",
        "func _cmd_scan_scripts(_args: Array)",
        "func _cmd_show_report(_args: Array)",
        "func _cmd_migrate_all(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/tutorial/tutorial_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_tutorial_ui()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_tutorial()",
        "func stop_tutorial()",
        "func _load_tutorial_scene(phase: TutorialPhase)",
        "func _update_instructions()",
        "func _process(_delta: float)",
        "func _update_progress()",
        "func _is_phase_complete()",
        "func _advance_to_next_phase()",
        "func _show_phase_transition()",
        "func _on_command_executed(command: String, args: Array)",
        "func _log_action(action_type: String, data: Dictionary)",
        "func _save_log()",
        "func _calculate_completion_percentage()",
        "func show_hint(hint_text: String, duration: float = 3.0)",
        "func is_tutorial_active()",
        "func get_current_phase()",
        "func log_custom_action(action: String, data: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/ui/advanced_object_inspector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_ui()",
        "func _create_title_bar(parent: VBoxContainer)",
        "func _create_properties_tab()",
        "func _create_transform_tab()",
        "func _create_materials_tab()",
        "func _create_physics_tab()",
        "func _create_scene_tab()",
        "func _create_vector3_editor()",
        "func _apply_advanced_style()",
        "func _connect_signals()",
        "func _setup_shortcuts()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func inspect_object(object: Node)",
        "func _update_properties_tab()",
        "func _update_transform_tab()",
        "func _update_materials_tab()",
        "func _update_physics_tab()",
        "func _update_scene_tab()",
        "func _build_scene_tree(node: Node, parent_item: TreeItem)",
        "func _populate_properties()",
        "func _categorize_properties(property_list: Array)",
        "func _create_category_section(category_name: String, properties: Array)",
        "func _create_enhanced_property_editor(property: Dictionary, parent: Control)",
        "func _create_advanced_editor_for_type(type: int, current_value: Variant, property: Dictionary)",
        "func _create_vector2_editor(value: Vector2)",
        "func _create_vector3_editor_with_value(value: Vector3)",
        "func _on_save_scene()",
        "func _on_load_scene()",
        "func _on_scene_file_selected(path: String)",
        "func _save_scene_to_file(path: String)",
        "func _load_scene_from_file(path: String)",
        "func request_floodgate_operation(operation: Dictionary)",
        "func _on_create_node()",
        "func _on_duplicate_node()",
        "func _on_delete_node()",
        "func _humanize_property_name(prop_name: String)",
        "func _get_type_name(type: int)",
        "func _setup_range_from_hint(control: Range, hint_string: String)",
        "func _is_property_modified(_prop_name: String, _value: Variant)",
        "func _reset_property(_prop_name: String)",
        "func _add_to_history(object: Node)",
        "func _undo_last_change()",
        "func _redo_last_change()",
        "func _open_array_editor(_prop_name: String, _array: Array)",
        "func _on_close_pressed()",
        "func _on_pin_toggled(pressed: bool)",
        "func _on_menu_item_selected(id: int)",
        "func _on_search_changed(text: String)",
        "func _on_global_transform_toggled(_enabled: bool)",
        "func _on_transform_reset()",
        "func _on_scene_tree_item_selected()",
        "func _connect_advanced_editor_signal(editor: Control, prop_name: String, prop_type: int)",
        "func _on_color_changed(color: Color, prop_name: String)",
        "func _on_vector3_component_changed(value: float, prop_name: String, component: int)",
        "func _on_bool_changed(value: bool, prop_name: String)",
        "func _on_number_changed(value: float, prop_name: String)",
        "func _on_string_changed(text: String, prop_name: String)",
        "func _on_vector2_changed(value: float, prop_name: String, component: String)",
        "func _apply_property_change(prop_name: String, new_value: Variant)",
        "func _clear_properties()",
        "func _should_show_property(property: Dictionary)",
        "func _export_properties()",
        "func _import_properties()",
        "func _reset_all_properties()"
      ]
    },
    {
      "file_path": "scripts/ui/asset_creator_panel.gd",
      "class_name": "AssetCreatorPanel",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_spectrum_color(value: float)",
        "func _on_spectrum_changed(value: float, color_preview: Panel)",
        "func _ready()",
        "func _setup_ui()",
        "func _create_ui_elements()",
        "func _create_preview()",
        "func _update_preview_mesh()",
        "func _on_type_changed(index: int)",
        "func _on_mesh_changed(_index: int)",
        "func _on_size_changed(_value: float)",
        "func _on_create_pressed()",
        "func _on_cancel_pressed()",
        "func show_panel()"
      ]
    },
    {
      "file_path": "scripts/ui/blink_animation_controller.gd",
      "class_name": "BlinkAnimationController",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _find_node_by_class(node, class_name_str)",
        "func _initialize_timers()",
        "func _create_default_animations()",
        "func _schedule_next_blink()",
        "func _schedule_next_wink()",
        "func _schedule_next_flicker()",
        "func _execute_blink()",
        "func _execute_wink()",
        "func _execute_flicker()",
        "func _blink_node(node_name: String, blink_count: int)",
        "func _wink_node(node_name: String, is_left: bool)",
        "func _flicker_node(node_name: String, flicker_count: int)",
        "func _on_blink_timer_timeout()",
        "func _on_wink_timer_timeout()",
        "func _on_flicker_timer_timeout()",
        "func _on_turn_started(turn_number)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_node(node_name: String, node: Node)",
        "func unregister_node(node_name: String)",
        "func trigger_blink(node_name: String = \"\", blink_count: int = 1)",
        "func trigger_wink(node_name: String = \"\", is_left: bool = true)",
        "func trigger_flicker(node_name: String = \"\", flicker_count: int = 3)",
        "func set_enabled(is_enabled: bool)",
        "func set_wink_enabled(is_enabled: bool)",
        "func set_flicker_enabled(is_enabled: bool)",
        "func on_turn_changed(turn_number: int, turn_data: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/ui/bryce_grid_interface.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _calculate_grid_layout()",
        "func _create_grid_cells()",
        "func _create_cell(col: int, row: int)",
        "func _on_cell_input(event: InputEvent, cell_index: int)",
        "func _on_cell_hover(cell_index: int)",
        "func _on_cell_unhover(cell_index: int)",
        "func _select_cell(cell_index: int)",
        "func _update_cell_visual(cell_index: int)",
        "func _on_window_resized()",
        "func _load_sample_entities()",
        "func _populate_grid()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_grid_info()"
      ]
    },
    {
      "file_path": "scripts/ui/console_world_view.gd",
      "class_name": "ConsoleWorldView",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_world_grid()",
        "func _process(delta: float)",
        "func _update_world_display()",
        "func _place_entity_on_grid(entity_data: Dictionary)",
        "func _world_to_grid(world_pos: Vector2)",
        "func _generate_display_text()",
        "func _init()",
        "func pentagon_init()",
        "func sewers()",
        "func pentagon_sewers()",
        "func update_entity(entity_id: String, data: Dictionary)",
        "func remove_entity(entity_id: String)",
        "func clear_entities()",
        "func pan_view(direction: Vector2)",
        "func zoom_view(factor: float)",
        "func center_on_position(world_pos: Vector3)",
        "func _input(event: InputEvent)",
        "func _on_layer_visibility_changed(layer: int, is_visible: bool)",
        "func handle_console_command(command: String, args: Array)"
      ]
    },
    {
      "file_path": "scripts/ui/creative_mode_inventory.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_ui()",
        "func _unhandled_input(event: InputEvent)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func toggle_inventory()",
        "func show_inventory()",
        "func hide_inventory()",
        "func _populate_inventory()",
        "func _get_filtered_items()",
        "func _create_item_slot(item_id: String, item_data: Dictionary)",
        "func _generate_placeholder_icon(item_id: String)",
        "func _on_category_selected(category_id: String)",
        "func _on_item_selected(item_id: String, item_data: Dictionary)",
        "func _on_close_pressed()",
        "func refresh_inventory()",
        "func set_category(category_id: String)"
      ]
    },
    {
      "file_path": "scripts/ui/enhanced_object_inspector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _position_panel()",
        "func _create_inspector_ui()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func inspect_object(obj: Node)",
        "func _add_basic_properties()",
        "func _add_transform_properties()",
        "func _add_physics_properties()",
        "func _add_metadata_properties()",
        "func _add_custom_properties()",
        "func _add_section_header(text: String)",
        "func _add_label_property(label: String, value: String)",
        "func _add_string_property(label: String, property: String, value: String)",
        "func _add_float_property(label: String, property: String, value: float)",
        "func _add_bool_property(label: String, property: String, value: bool, is_metadata: bool = false)",
        "func _add_vector3_property(label: String, property: String, value: Vector3)",
        "func _add_action_button(action: String)",
        "func _on_property_changed(property: String, value: Variant)",
        "func _on_vector3_component_changed(property: String, component: String, value: float)",
        "func _trigger_action(action: String)",
        "func _update_live_values()",
        "func _on_close_pressed()",
        "func setup_mouse_integration()",
        "func get_inspected_object()"
      ]
    },
    {
      "file_path": "scripts/ui/feature_test_panel.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_ui()",
        "func _create_buttons()",
        "func _setup_references()",
        "func _on_button_pressed(button: Button)",
        "func _test_console(button: Button)",
        "func _test_commands(button: Button)",
        "func _test_console_fix(button: Button)",
        "func _test_inspector(button: Button)",
        "func _test_selection(button: Button)",
        "func _test_edit(button: Button)",
        "func _spawn_astral_being()",
        "func _test_astral_spawn(button: Button)",
        "func _test_astral_move(button: Button)",
        "func _test_astral_organize(button: Button)",
        "func _test_astral_light(button: Button)",
        "func _test_ragdoll_spawn(button: Button)",
        "func _test_ragdoll_walk(button: Button)",
        "func _test_ragdoll_debug(button: Button)",
        "func _test_create_object(button: Button)",
        "func _test_save_scene(button: Button)",
        "func _test_clear_scene(button: Button)",
        "func _test_floodgate_status(button: Button)",
        "func _test_floodgate_queue(button: Button)",
        "func _test_performance(button: Button)",
        "func _mark_success(button: Button)",
        "func _mark_failure(button: Button)",
        "func _mark_result(button: Button, success: bool)",
        "func _update_status(text: String, color: Color = Color.WHITE)",
        "func _update_test_count()",
        "func _toggle_minimize()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/ui/global_variable_spreadsheet.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_ui()",
        "func _create_autoloads_tab()",
        "func _create_scene_nodes_tab()",
        "func _create_scripts_tab()",
        "func _create_performance_tab()",
        "func _scan_everything()",
        "func _scan_autoloads()",
        "func _scan_scene_tree()",
        "func _scan_node_recursive(node: Node, path: String = \"\")",
        "func _scan_scripts()",
        "func _get_all_properties(obj: Object)",
        "func _get_all_methods(obj: Object)",
        "func _get_script_static_vars(_script: Script)",
        "func _update_all_displays()",
        "func _update_autoloads_display()",
        "func _update_scene_nodes_display()",
        "func _update_scripts_display()",
        "func _update_performance_display()",
        "func _create_object_expander(obj_name: String, data: Dictionary)",
        "func _create_node_expander(path: String, data: Dictionary)",
        "func _create_property_editor(obj_name: String, prop_name: String, prop_data: Dictionary)",
        "func _on_value_changed(obj_name: String, prop_name: String, value: Variant)",
        "func _on_search_changed(_text: String)",
        "func _on_auto_refresh_toggled(pressed: bool)",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func toggle_visibility()"
      ]
    },
    {
      "file_path": "scripts/ui/grid_list_console_bridge.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_grid_cell(x: int, y: int, page: int, command: String)",
        "func register_list_item(index: int, page: int, command: String)",
        "func visual_to_command(action: String, target: Dictionary)",
        "func execute_unified_command(command: String, source: String = \"console\")",
        "func get_command_suggestions(partial: String)",
        "func get_item_from_page(page: int, index: int)",
        "func grid_to_list_index(x: int, y: int, columns: int)",
        "func list_to_grid_pos(index: int, columns: int)",
        "func _handle_select(args: Array)",
        "func _handle_create(args: Array)",
        "func _handle_page_change(args: Array)",
        "func _get_entity_types()",
        "func _get_page_numbers()",
        "func _get_selectable_items()",
        "func _log_command(command: String, source: String, result: Dictionary)",
        "func _handle_move(args: Array)",
        "func _handle_delete(args: Array)",
        "func _handle_mode_change(args: Array)"
      ]
    },
    {
      "file_path": "scripts/ui/height_map_overlay.gd",
      "class_name": "HeightMapOverlay",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_map()",
        "func _create_height_gradient()",
        "func _setup_legend()",
        "func _process(delta: float)",
        "func _update_map()",
        "func _fade_map()",
        "func _update_terrain_heights()",
        "func _draw_entities()",
        "func _world_to_pixel(world_pos: Vector2)",
        "func _pixel_to_world(pixel_pos: Vector2i)",
        "func _is_valid_pixel(pos: Vector2i)",
        "func _height_to_color(height: float)",
        "func _draw_circle_on_map(center: Vector2i, radius: int, color: Color)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func update_entity_position(entity_id: String, position: Vector3)",
        "func remove_entity(entity_id: String)",
        "func set_world_bounds(bounds: Rect2)",
        "func set_height_range(min_h: float, max_h: float)",
        "func _gui_input(event: InputEvent)"
      ]
    },
    {
      "file_path": "scripts/ui/interactive_tutorial_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _save_initial_state()",
        "func _create_ui()",
        "func _start_tutorial()",
        "func _update_test_ui()",
        "func _add_test_buttons(tests: Array)",
        "func _run_test(test_name: String, command: String)",
        "func _record_result(test_name: String, success: bool)",
        "func _next_test()",
        "func _reset_scene()",
        "func _update_results(text: String)",
        "func _show_final_results()",
        "func _save_results_to_file()",
        "func _close_tutorial()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func show_tutorial()"
      ]
    },
    {
      "file_path": "scripts/ui/object_inspector.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_ui()",
        "func _apply_inspector_style()",
        "func _connect_signals()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func inspect_object(object: Node)",
        "func _clear_properties()",
        "func _populate_properties()",
        "func _create_category_section(category_name: String, properties: Array)",
        "func _create_property_editor(property: Dictionary)",
        "func _create_editor_for_type(type: int, current_value: Variant)",
        "func _connect_editor_signal(editor: Control, prop_name: String, prop_type: int)",
        "func _should_show_property(property: Dictionary)",
        "func _on_bool_changed(value: bool, prop_name: String)",
        "func _on_number_changed(value: float, prop_name: String)",
        "func _on_string_changed(text: String, prop_name: String)",
        "func _on_vector2_changed(value: float, prop_name: String, component: String)",
        "func _on_vector3_changed(value: float, prop_name: String, component: String)",
        "func _apply_property_change(prop_name: String, new_value: Variant)",
        "func _on_close_pressed()",
        "func _on_search_changed(text: String)",
        "func toggle_hidden_properties()",
        "func set_target_object(object: Node)",
        "func close_inspector()",
        "func is_inspecting()"
      ]
    },
    {
      "file_path": "scripts/ui/script_orchestra_interface.gd",
      "class_name": "ScriptOrchestraInterface",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _input(event: InputEvent)",
        "func _create_interface()",
        "func _setup_monitoring()",
        "func _update_orchestra()",
        "func _scan_node_recursive(node: Node, player_pos: Vector3)",
        "func _get_player_position()",
        "func _analyze_creation_state(node: Node)",
        "func _get_creation_icon(info: ScriptInfo)",
        "func _update_miracle_ratio()",
        "func _on_script_selected(index: int)",
        "func _on_distance_changed(value: float)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()",
        "func toggle_visibility()",
        "func get_orchestra_report()",
        "func _ready_console_commands()",
        "func _cmd_toggle_orchestra(_args: Array)",
        "func _cmd_create_miracle(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/ui/simple_testing_guide.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_draggable_guide_window()",
        "func _on_window_close_requested()",
        "func _on_close_pressed()",
        "func _update_guide_content()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()",
        "func show_guide_temporarily()",
        "func _update_test_message()",
        "func _fade_out_guide()",
        "func _hide_guide()",
        "func _input(event: InputEvent)",
        "func update_test_message(new_message: String)",
        "func show_success_message(feature: String)"
      ]
    },
    {
      "file_path": "scripts/ui/systematic_test_tutorial.gd",
      "class_name": "SystematicTestTutorial",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_tutorial_ui()",
        "func _position_ui()",
        "func _start_tutorial()",
        "func _update_current_test()",
        "func _run_current_test()",
        "func _record_test_result(test_name: String, result: String, success: bool)",
        "func _next_test()",
        "func _previous_test()",
        "func _finish_tutorial()",
        "func _generate_final_report()",
        "func _restart_tutorial()",
        "func _close_tutorial()",
        "func _count_scene_objects()",
        "func _count_children_recursive(node: Node)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/ui/unified_grid_list_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 1,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _load_page(page_num: int)",
        "func _generate_page_data(page_num: int)",
        "func _get_item_type(index: int)",
        "func _get_item_icon(index: int)",
        "func _cycle_display_mode()",
        "func _move_cursor(direction: Vector2i)",
        "func _update_cursor_visual()",
        "func _execute_console_command(command: String)",
        "func _goto_item(global_index: int)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_player_state(state_name: String, value: bool)",
        "func _unhandled_input(event: InputEvent)",
        "func _cycle_focus(direction: int)",
        "func _setup_grid_container()",
        "func _setup_list_container()",
        "func _refresh_display()",
        "func _populate_grid(items: Array)",
        "func _populate_list(items: Array)",
        "func _create_grid_cell(item: Dictionary)",
        "func _create_list_row(item: Dictionary)",
        "func _select_current()",
        "func _execute_current()",
        "func _next_page()",
        "func _prev_page()",
        "func _toggle_console()",
        "func _highlight_item(item: Control)",
        "func _on_item_clicked(item: Dictionary)",
        "func _setup_console_overlay()",
        "func _wait_for_pending_page(page_num: int)",
        "func _select_item_by_id(item_id: String)",
        "func _set_display_mode(mode_name: String)"
      ]
    },
    {
      "file_path": "scripts/ui/universal_being_creator_ui.gd",
      "class_name": "Anonymous",
      "extends_from": "Control",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _process(delta: float)",
        "func _input(event: InputEvent)",
        "func sewers()",
        "func pentagon_init()",
        "func pentagon_ready()",
        "func pentagon_process(delta: float)",
        "func pentagon_input(event: InputEvent)",
        "func pentagon_sewers()",
        "func _ready()",
        "func _perfect_pentagon_init()",
        "func _direct_initialization()",
        "func _create_interface_layout()",
        "func _create_asset_browser()",
        "func _create_property_editor()",
        "func _add_property_controls()",
        "func _create_preview_area()",
        "func _setup_preview_scene()",
        "func _create_creation_toolbar()",
        "func _on_being_type_selected(index: int)",
        "func _on_property_changed(property_name: String, value)",
        "func _set_creation_mode(mode: String)",
        "func _update_preview()",
        "func _create_preview_being(being_type: String)",
        "func _rotate_preview(being: Node3D, angle: float)",
        "func _clear_preview()",
        "func _create_being_at_cursor()",
        "func _create_being_at_position(position: Vector3)",
        "func _setup_input_handling()",
        "func _on_title_input(event: InputEvent)",
        "func toggle_interface()",
        "func _close_interface()",
        "func _connect_to_systems()",
        "func _console_open_interface(_args: Array)",
        "func _console_create_being(args: Array)",
        "func _console_reset_interface(_args: Array)",
        "func _console_force_close(_args: Array)",
        "func _console_debug_interface(_args: Array)",
        "func _console_cursor_info(_args: Array)",
        "func _console_cursor_help(_args: Array)",
        "func _console_debug_beings(_args: Array)",
        "func _console_center_interface(_args: Array)"
      ]
    },
    {
      "file_path": "scripts/ui/universal_object_inspector.gd",
      "class_name": "UniversalObjectInspector",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_ui()",
        "func _create_transform_section()",
        "func _create_axis_control(label_text: String, axis: String, color: Color)",
        "func _create_gizmo_section()",
        "func _create_properties_section()",
        "func _apply_inspector_style()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func inspect_object(object: Node)",
        "func _update_transform_controls()",
        "func _update_properties()",
        "func _add_property_control(label: String, property: String, value: Variant)",
        "func _on_transform_changed(transform_type: String, axis: String, value: float)",
        "func _on_property_changed(property: String, value: Variant)",
        "func _on_gizmo_requested()",
        "func _update_gizmo_button_text(is_active: bool)",
        "func _on_close_pressed()",
        "func handle_command(command: String, args: Array)",
        "func toggle()",
        "func _on_attach_gizmo_pressed()",
        "func _set_gizmo_mode(mode: String)"
      ]
    },
    {
      "file_path": "scripts/ui/visual_indicator_system.gd",
      "class_name": "VisualIndicatorSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _setup_timers()",
        "func _find_time_tracker()",
        "func _find_node_by_class(node: Node, class_name: String)",
        "func _apply_mode_settings(mode_index)",
        "func _set_symbol(symbol_index)",
        "func _on_blink_timer_timeout()",
        "func _on_color_cycle_timer_timeout()",
        "func _on_animation_timer_timeout()",
        "func _on_time_updated(session_time, total_time)",
        "func _on_hour_limit_reached(hours)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func set_mode(mode_index: int)",
        "func cycle_mode()",
        "func toggle_enabled()",
        "func get_current_symbol()",
        "func get_current_mode_name()",
        "func get_visual_state()"
      ]
    },
    {
      "file_path": "scripts/zones/creation_zone.gd",
      "class_name": "CreationZone",
      "extends_from": "Zone",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_consciousness()",
        "func setup_creative_systems()",
        "func setup_as_universal_being()",
        "func set_partner_zone(viz_zone: VisualizationZone)",
        "func _think_about_creation()",
        "func add_point(local_pos: Vector3)",
        "func add_shape_primitive(type: String, params: Dictionary)",
        "func generate_creative_data()",
        "func _generate_conscious_points()",
        "func _generate_conscious_shapes()",
        "func _generate_mathematical_patterns()",
        "func _store_creative_memory(mode: String, data: Dictionary)",
        "func generate_noise_field()"
      ]
    },
    {
      "file_path": "scripts/zones/visualization_zone.gd",
      "class_name": "VisualizationZone",
      "extends_from": "Zone",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_consciousness()",
        "func setup_visualization_systems()",
        "func setup_as_universal_being()",
        "func set_partner_zone(creation_zone: CreationZone)",
        "func _think_about_interpretation()",
        "func process_incoming_data(data: Dictionary, _from_zone: Zone)",
        "func _choose_visualization_method(data: Dictionary)",
        "func _analyze_data_type(data: Dictionary)",
        "func _explain_visualization_choice(data: Dictionary, method: String)",
        "func _choose_based_on_memory(data_type: String, possible_methods: Array)",
        "func _store_interpretation_memory(data: Dictionary, method: String, reasoning: String)",
        "func receive_data(data: Dictionary)",
        "func _visualize_as_marching_cubes(data: Dictionary)",
        "func _visualize_as_points(data: Dictionary)",
        "func _clear_current_visualization()",
        "func _visualize_as_sdf_mesh(data: Dictionary)",
        "func _visualize_as_voxels(data: Dictionary)",
        "func _visualize_as_particle_flow(data: Dictionary)",
        "func _visualize_as_connections(data: Dictionary)",
        "func _visualize_as_surface(data: Dictionary)",
        "func _create_connection_line(from: Vector3, to: Vector3, distance: float)",
        "func _generate_surface_mesh(pattern_data: Array)",
        "func _visualize_shapes_as_sdf(shapes: Array)"
      ]
    },
    {
      "file_path": "scripts/zones/zone.gd",
      "class_name": "Zone",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_boundary_visualization()",
        "func _create_info_label()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func serialize()"
      ]
    },
    {
      "file_path": "scripts/zones/zone_system.gd",
      "class_name": "ZoneSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_zone_pair(zone_position: Vector3)",
        "func connect_zones(from_zone: Zone, to_zone: Zone)",
        "func _setup_data_flow(from_zone: Zone, to_zone: Zone)",
        "func _transfer_data(from_zone: Zone, to_zone: Zone, data: Dictionary)",
        "func _create_connection_visual(from_zone: Zone, to_zone: Zone)",
        "func _create_tube_mesh(curve: Curve3D)",
        "func _setup_visual_feedback()",
        "func _spawn_data_particles(from_pos: Vector3, to_pos: Vector3)",
        "func _generate_zone_id()",
        "func get_all_zones()",
        "func save_zone_configuration(path: String)",
        "func load_zone_configuration(path: String)"
      ]
    },
    {
      "file_path": "scripts/archive/deprecated/astral_beings_OLD_DEPRECATED.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init(spawn_pos: Vector3)",
        "func _ready()",
        "func _spawn_initial_beings()",
        "func _create_being_visualization(being: AstralBeing)",
        "func _process(delta: float)",
        "func _update_being(being: AstralBeing, delta: float)",
        "func _assist_ragdoll_support(being: AstralBeing, delta: float)",
        "func _help_ragdoll_stand_up(ragdoll_body: RigidBody3D, being: AstralBeing)",
        "func _assist_object_manipulation(being: AstralBeing, delta: float)",
        "func _assist_scene_organization(being: AstralBeing, delta: float)",
        "func _assist_environmental_harmony(being: AstralBeing, delta: float)",
        "func _assist_creative_work(being: AstralBeing, delta: float)",
        "func _create_assistance_effect(position: Vector3)",
        "func _on_player_needs_help()",
        "func _on_object_interaction(object: RigidBody3D)",
        "func _find_available_being()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func summon_assistance(mode: AssistanceMode, target: Node = null)",
        "func set_all_beings_mode(mode: AssistanceMode)",
        "func get_beings_status()",
        "func cmd_beings_status()",
        "func cmd_beings_help_ragdoll()",
        "func cmd_beings_organize()",
        "func cmd_beings_harmony()"
      ]
    },
    {
      "file_path": "scripts/archive/deprecated/astral_being_enhanced_OLD_DEPRECATED.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _create_star_being()",
        "func _physics_process(delta: float)",
        "func _process_free_flight(delta: float)",
        "func _process_orbiting(delta: float)",
        "func _process_creating(delta: float)",
        "func _process_following(delta: float)",
        "func _process_blinking(delta: float)",
        "func _update_connection_awareness()",
        "func _is_connected_to(obj: Node3D)",
        "func _create_trail_light()",
        "func _find_closest_object()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_orbiting(target: Node3D)",
        "func stop_orbiting()",
        "func enter_creation_mode()",
        "func manipulate_object(target: Node3D, direction: Vector3)",
        "func set_following_target(target: Node3D)",
        "func _on_body_entered(body: Node3D)",
        "func _on_body_exited(body: Node3D)",
        "func _on_area_entered(area: Area3D)",
        "func _on_area_exited(area: Area3D)"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/global_variable_inspector.gd",
      "class_name": "GlobalVariableInspector",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func scan_all_variables()",
        "func _scan_autoloads()",
        "func _scan_project_settings()",
        "func _scan_engine_settings()",
        "func _scan_scene_variables()",
        "func _scan_node_properties(node: Node)",
        "func _scan_node_recursive(node: Node, max_depth: int = 3, current_depth: int = 0)",
        "func get_variable(path: String)",
        "func set_variable(path: String, value)",
        "func _set_autoload_variable(parts: Array, value)",
        "func _set_project_setting(parts: Array, value)",
        "func _set_engine_setting(parts: Array, value)",
        "func watch_variable(path: String, callback: Callable)",
        "func unwatch_variable(path: String, callback: Callable)",
        "func export_to_txt(filepath: String)",
        "func _write_variables_recursive(file: FileAccess, data: Dictionary, indent: String)",
        "func get_all_variables()",
        "func search_variables(search_term: String)",
        "func _search_recursive(data: Dictionary, path: String, search: String, results: Array)",
        "func _print(message: String)"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/initialize_universal_entity.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/lists_viewer_system.gd",
      "class_name": "ListsViewerSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _ensure_directories()",
        "func _create_example_files()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func load_all_lists()",
        "func load_list(filename: String)",
        "func _parse_list_line(line: String)",
        "func load_all_rules()",
        "func load_rules(filename: String)",
        "func _parse_rule(line: String)",
        "func _parse_condition(condition_str: String)",
        "func _parse_interval(interval_str: String)",
        "func check_and_execute_rules()",
        "func _check_condition(condition: Dictionary)",
        "func _compare_values(value1, operator: String, value2)",
        "func _check_proximity(target_type: String)",
        "func _execute_action(action: String, rule_id: String)",
        "func _spawn_from_list(list_filename: String)",
        "func _spawn_object(item: Dictionary)",
        "func _spawn_object_old_method(item: Dictionary)",
        "func _save_game_state()",
        "func _make_nearby_tree_talk()",
        "func _check_file_changes()",
        "func _reload_file(filepath: String)",
        "func _print(message: String)",
        "func get_list(list_name: String)",
        "func add_rule(rule_text: String, rule_id: String = \"\")"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/system_health_monitor.gd",
      "class_name": "SystemHealthMonitor",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _perform_health_check()",
        "func _estimate_memory_usage()",
        "func _check_floodgate_queues()",
        "func _apply_fps_fix()",
        "func _apply_node_limit_fix()",
        "func _apply_memory_fix()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_health_status()",
        "func get_health_report()",
        "func set_auto_fix(enabled: bool)",
        "func force_health_check()",
        "func _status_to_string(status: HealthStatus)",
        "func _print(message: String)"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/universal_entity.gd",
      "class_name": "UniversalEntitySystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _initialize_core_systems()",
        "func _register_universal_commands()",
        "func _realize_the_dream()",
        "func _self_regulate()",
        "func _check_perfection()",
        "func _update_satisfaction()",
        "func _cmd_universal_status(_args: Array)",
        "func _cmd_evolve(args: Array)",
        "func _cmd_make_perfect(_args: Array)",
        "func _cmd_check_satisfaction(_args: Array)",
        "func _cmd_health_check(_args: Array)",
        "func _cmd_list_variables(args: Array)",
        "func _cmd_show_lists(_args: Array)",
        "func _cmd_optimize_now(_args: Array)",
        "func _cmd_export_variables(args: Array)",
        "func _on_system_warning(severity: String, message: String)",
        "func _on_performance_warning(message: String)",
        "func _on_rule_executed(rule_name: String, _result)",
        "func _print(message: String)",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/core/universal_entity/universal_loader_unloader.gd",
      "class_name": "UniversalLoaderUnloader",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func load_node(path: String, parent: Node = null, priority: int = 0)",
        "func load_node_immediate(path: String, parent: Node = null)",
        "func unload_node(node: Node, priority: UnloadPriority = UnloadPriority.NORMAL)",
        "func unload_nodes_by_distance(center: Vector3, max_distance: float)",
        "func unload_heavy_nodes(memory_threshold_mb: float = 50)",
        "func freeze_node_scripts(node: Node)",
        "func unfreeze_node_scripts(node: Node)",
        "func _process(_delta: float)",
        "func _process_load_queue()",
        "func _process_unload_queue()",
        "func _perform_unload(node: Node)",
        "func _can_load_new_node()",
        "func _optimize_memory()",
        "func _emergency_optimization()",
        "func _get_average_fps()",
        "func _estimate_node_memory(node: Node)",
        "func get_performance_report()",
        "func force_cleanup(aggressive: bool = false)",
        "func _print(message: String)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/ai/ai_module.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/actions_bank.gd",
      "class_name": "ActionsBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/banks_combiner.gd",
      "class_name": "BanksCombiner",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/container.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func containter_start_up(con_num, data)",
        "func get_datapoint()",
        "func containter_get_data()",
        "func container_get_additional_datapoints()",
        "func containers_connections(data)",
        "func get_containers_connected()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/data_point.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func create_new_task(function_name: String, data)",
        "func first_dimensional_magic(type_of_action_to_do : String, datapoint_node : Node, additional_node : Node = null)",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_terminal()",
        "func terminal_blink_cursor()",
        "func handle_terminal_key_press(key: String)",
        "func handle_terminal_backspace()",
        "func update_terminal_display()",
        "func history_up()",
        "func history_down()",
        "func execute_command()",
        "func _init()",
        "func process_delta_fake()",
        "func connect_keyboard_to_field(target_container, target_thing)",
        "func receive_keyboard_connection(connection_info)",
        "func on_keyboard_ready()",
        "func set_connection_target(target_container, target_thing, target_datapoint)",
        "func finishied_setting_up_datapoint(_my_name)",
        "func check_amount_of_container()",
        "func check_state_of_dictionary_and_three_ints_of_doom()",
        "func new_datapoint_layer_system(deep_state_copy_of_apples)",
        "func check_dictionary_from_datapoint()",
        "func check_if_datapoint_moved_once()",
        "func initialize_loading_file(file_name)",
        "func settings_labels_start()",
        "func receive_a_message(message)",
        "func singular_lines_added()",
        "func change_dual_text()",
        "func connect_keyboard_string()",
        "func setup_text_handling()",
        "func add_cursor()",
        "func setup_cursor_timer()",
        "func blink_cursor()",
        "func create_new_task(function_name: String, data)",
        "func create_new_task_empty(function_name: String)",
        "func handle_key_press(key: String)",
        "func handle_backspace()",
        "func return_string_from_keyboards()",
        "func find_label_in_node(node: Node)",
        "func update_connected_target()",
        "func update_text_and_cursor(key)",
        "func update_text_cursor_after(text_label)",
        "func update_cursor_position()",
        "func get_text_width(text_label: Label3D)",
        "func change_numbers_letters(scene_to_pull)",
        "func shift_keyboard(scene_to_pull)",
        "func undo_a_character(_data)",
        "func write_on_keyboard(data_of_key_pressed)",
        "func power_up_data_point(datapoint_name, datapoint_number, array_of_data)",
        "func datapoint_check()",
        "func datapoint_assign_priority(send_priority_number)",
        "func add_thing_to_datapoint(array_from_main)",
        "func datapoint_max_things_number_setter(sended_max_number)",
        "func upload_scenes_frames(header_line, information_lines)",
        "func upload_interactions(header_line, information_lines)",
        "func setup_main_reference(main_ref: Node)",
        "func check_all_things_inside_datapoint()",
        "func get_datapoint_info_for_containter_connection()",
        "func check_things_in_scene(scene_we_wanna)",
        "func scene_to_set_number_later(number_int_eh)",
        "func set_maximum_interaction_number(mode : String, amount : int)",
        "func thing_interaction(thing)",
        "func check_possible_interactions(thing)",
        "func check_possible_actions(thing)",
        "func do_action_found(action_page, thing_name)",
        "func safe_get(array: Array, indices: Array, default = null)",
        "func create_new_task(function_name: String, data)",
        "func create_new_task_empty(function_name: String)",
        "func lets_move_them_again()",
        "func the_checking_stuff()",
        "func prepare_to_move_things_around(scene_to_set)",
        "func move_things_around(scene_number: int)",
        "func check_multi_stuff(scene_number)",
        "func prepare_data_for_unloading(scene_stuff)",
        "func some_snake_game()",
        "func check_possible_interactions_old(thing)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/functions_database.gd",
      "class_name": "FunctionChainManager",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_command(command_name: String, target_node: Node, function_name: String)",
        "func create_chain(chain_name: String, commands: Array)",
        "func execute_chain(chain_name: String, args = null)",
        "func _init(func_name: String)",
        "func analyze_name()",
        "func get_char_type(c: String)",
        "func add_function(func_text: String)",
        "func extract_function_name(declaration: String)",
        "func count_parameters(declaration: String)",
        "func extract_return_type(declaration: String)",
        "func get_function_analysis(func_name: String)",
        "func print_analysis(func_name: String)",
        "func get_type_name(type_code: int)",
        "func analyze_function_requirements(function_name: String)",
        "func check_function_compatibility(function_name: String)",
        "func get_dependency_chain(function_name: String, chain: Array = [])",
        "func get_function_usage(var_name: String)",
        "func generate_function_report(function_name: String)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/function_metadata.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func get_function_metadata(script_path: String, function_name: String)",
        "func get_category_functions(category: String)",
        "func get_mutex_dependencies(script_path: String, function_name: String)",
        "func get_global_variables(script_path: String, function_name: String)",
        "func get_function_dependencies(script_path: String, function_name: String)",
        "func generate_report(script_path: String = \"\", category: String = \"\")",
        "func _generate_function_report(script_path: String, function_name: String)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/godot_timers_system.gd",
      "class_name": "GodotTimersSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init(p_timer: Timer, p_duration: float, p_callback: Callable = Callable()",
        "func _ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func create_timer(timer_id: String, duration: float, callback: Callable = Callable()",
        "func start_timer(timer_id: String)",
        "func stop_timer(timer_id: String)",
        "func pause_timer(timer_id: String)",
        "func resume_timer(timer_id: String)",
        "func remove_timer(timer_id: String)",
        "func clear_all_timers()",
        "func get_time_left(timer_id: String)",
        "func get_progress(timer_id: String)",
        "func is_timer_active(timer_id: String)",
        "func is_timer_paused(timer_id: String)",
        "func get_active_timers()",
        "func _on_timer_timeout(timer_id: String)",
        "func _exit_tree()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/init_function.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/instructions_bank.gd",
      "class_name": "InstructionsBank",
      "extends_from": "Node3D",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments",
        "Core node type should integrate with Floodgate system"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/interactions_bank.gd",
      "class_name": "InteractionsBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_Akashic_Records.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_console.gd",
      "class_name": "JSHConsoleSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready_add()",
        "func _process_add(delta)",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()",
        "func update_cursor()",
        "func update_input_display()",
        "func update_output_display()",
        "func update_status(status: String)",
        "func update_memory_display(percentage: int)",
        "func handle_key_input(key: String)",
        "func history_up()",
        "func history_down()",
        "func execute_command()",
        "func process_command(command_text: String)",
        "func setup_terminal()",
        "func terminal_blink_cursor()",
        "func handle_terminal_key_press(key: String)",
        "func handle_terminal_backspace()",
        "func update_terminal_display()",
        "func history_upp()",
        "func history_downn()",
        "func execute_commandd()",
        "func _readyy()",
        "func _init()",
        "func _readyyy()",
        "func _processs(delta)",
        "func _input(event)",
        "func _process_cmd(delta)",
        "func initialize_terminal()",
        "func setup_terminal_variables()",
        "func setup_cursor_timer()",
        "func register_command_aliases()",
        "func setup_terminal_visual_components()",
        "func update_cursorr()",
        "func update_input_displayy()",
        "func update_output_displayy()",
        "func update_statuss(status: String)",
        "func update_memory_displayy(percentage: int)",
        "func blink_cursor()",
        "func handle_key_press(key: String)",
        "func handle_backspace()",
        "func history_uppp()",
        "func history_downnn()",
        "func execute_commanddd()",
        "func process_commandddd(command_text: String)",
        "func show_help(args: Array)",
        "func get_command_usage(cmd: String)",
        "func clear_terminal()",
        "func show_command_history()",
        "func list_things(args: Array)",
        "func create_thing(args: Array)",
        "func delete_thing(thing_name: String)",
        "func connect_things(thing1: String, thing2: String)",
        "func show_container(container_name: String)",
        "func hide_container(container_name: String)",
        "func move_object(args: Array)",
        "func rotate_object(args: Array)",
        "func load_scene(scene_name: String)",
        "func unload_scene(scene_name: String)",
        "func find_objects(query: String)",
        "func display_system_status()",
        "func display_memory_usage()",
        "func set_variable(var_name: String, value: String)",
        "func get_variable_value(name: String)",
        "func register_command(command: String, handler_object: Object, handler_method: String)",
        "func set_command_help(command: String, usage: String, help_text: String)",
        "func process_command_new(command_text: String)",
        "func add_output_line(text: String)",
        "func get_output_history(count: int = -1)",
        "func clear_output()",
        "func register_command_add(command_name: String, object: Object, method: String, \n\t\t\t\t\t description: String = \"\", args: Array = [])",
        "func execute_commandddd()",
        "func add_command_character(character: String)",
        "func remove_command_character()",
        "func navigate_history(direction: int)",
        "func update_command_line()",
        "func add_text_line(text: String)",
        "func create_delimiter_instance(position: Vector3)",
        "func remove_floating_word(text: String)",
        "func clean_word_connections(text_key: String)",
        "func reposition_text_lines()",
        "func toggle_visibility()",
        "func clear_terminall()",
        "func set_terminal_shape(shape: String)",
        "func log_message(message: String, type: int = LogType.INFO)",
        "func _cmd_help(args: Array)",
        "func _cmd_clear(_args: Array)",
        "func _cmd_shape(args: Array)",
        "func _cmd_snake(_args: Array)",
        "func _cmd_list(args: Array)",
        "func _ready_older()",
        "func _ready_old()",
        "func _ready_new_v1()",
        "func _ready_new()",
        "func _ready_new_v2()",
        "func check_terminal_combo_pattern()",
        "func _init_new()",
        "func _init_new_v2()",
        "func _init_new_v1()",
        "func _init_old()",
        "func update_letter_visuals_new_v2()",
        "func update_letter_visuals_new()",
        "func update_word_connections_new_v2()",
        "func update_letter_visuals_new_v1()",
        "func update_primitive_shape(shape_type: String, params: Dictionary)",
        "func update_command_line_new()",
        "func update_word_connections()",
        "func update_letter_visuals()",
        "func remove_floating_word_new_v2(text: String)",
        "func reposition_text_lines_new_v2()",
        "func reposition_text_lines_new_v1()",
        "func remove_floating_word_new_v1(text: String)",
        "func launch_snake_game_new()",
        "func remove_command_character_new_v1()",
        "func execute_command_new_v3()",
        "func create_word_connection(text1: String, word_idx1: int, text2: String, word_idx2: int, \n\t\t\t\t\t\t   global_pos1: Vector3, global_pos2: Vector3)",
        "func create_snake_game()",
        "func create_3d_text_terminal(position: Vector3, size: Vector2)",
        "func create_grid_primitive(data)",
        "func create_function_connection(source_func: String, target_func: String)",
        "func create_delimiter_instance_new(position: Vector3)",
        "func create_floating_text_new_v2(text: String, position: Vector3)",
        "func create_3d_letter_new_v2(letter: String, position: Vector3)",
        "func create_3d_letter(letter: String, position: Vector3)",
        "func create_delimiter_instance_new_v1(position: Vector3)",
        "func create_floating_text_new_v1(text: String, position: Vector3)",
        "func create_snake_game_new()",
        "func create_delimiter_instance_new_v2(position: Vector3)",
        "func create_delimiter_instance_new_v23(position: Vector3)",
        "func create_floating_text_new(text: String, position: Vector3)",
        "func create_3d_letter_new(letter: String, position: Vector3)",
        "func create_3d_letter_new_v1(letter: String, position: Vector3)",
        "func create_floating_text(text: String, position: Vector3)",
        "func add_command_character_new(character: String)",
        "func add_command_character_new_v1(character: String)",
        "func add_text_line_new_v1(text: String)",
        "func add_text_line_n3(text: String)",
        "func add_path_to_network(data)",
        "func add_node_to_network(data)",
        "func add_command_character_n3(character: String)",
        "func add_log(message: String, type: int = LogType.INFO)",
        "func add_text_line_new(text: String)",
        "func add_text_line_new_v2(text: String)",
        "func execute_command_new_v1(text)",
        "func clear_terminal_n3()",
        "func launch_snake_game()",
        "func execute_command_new()",
        "func remove_command_character_n3()",
        "func execute_command_new_n1()",
        "func setup_grid()",
        "func setup_shape_viewer()",
        "func setup_containers()",
        "func setup_material_cache()",
        "func setup_grid_viewer()",
        "func setup_containers_new()",
        "func setup_material_cache_new()",
        "func setup_terminal_container_new()",
        "func setup_combo_rules()",
        "func setup_shape_viewer_new()",
        "func _setup_ui()",
        "func setup_terminal_container()",
        "func check_combos(text: String)",
        "func activate_combo(combo: String)",
        "func set_terminal_shape_new(shape: String)",
        "func clear_terminal_new()",
        "func remove_floating_word_new(text: String)",
        "func reposition_text_lines_new()",
        "func toggle_gravity_effects_new()",
        "func toggle_gravity_effects()",
        "func toggle_light_mode()",
        "func toggle_dimension_mode()",
        "func remove_command_character_new()",
        "func _process_new(delta)",
        "func _process_old(delta)",
        "func _process_new_v1(_delta)",
        "func process_terminal_command_(data)",
        "func process_grid_command(data)",
        "func process_shape_command(data)",
        "func process_command_add(args)",
        "func process_command_neww(args)",
        "func process_keywords_new(text: String)",
        "func _inpu(event)",
        "func _input_old(event)",
        "func clean_word_connections_new(text_key: String)",
        "func look_at(data0, data_1)",
        "func load_function_network(data)",
        "func remove_floating_wor(text: String)",
        "func clean_word_connection(text_key: String)",
        "func reposition_text_line()",
        "func process_keywords(text: String)",
        "func process_function_references(text: String)",
        "func process_terminal_command_new(data)",
        "func register_console_commands(main: Node)",
        "func navigate_historyy(direction: int)",
        "func initialize_3d_terminal()",
        "func _on_input_submitted(text: String)",
        "func _on_visibility_changed()",
        "func _navigate_history(direction: int)",
        "func toggle_console()",
        "func register_comman(command_name: String, object: Object, method: String, \n\t\t\t\t\t description: String = \"\", args: Array = [])",
        "func execute_command_new_v2(command_text: String)",
        "func log_messag(message: String, type: int = LogType.INFO)",
        "func _cmd_hel(args: Array)",
        "func _cmd_clea(_args: Array)",
        "func _cmd_history(_args: Array)",
        "func _cmd_echo(args: Array)",
        "func _cmd_status(_args: Array)",
        "func _cmd_memory(_args: Array)",
        "func _cmd_threads(_args: Array)",
        "func _cmd_create(args: Array)",
        "func _cmd_unload(args: Array)",
        "func _cmd_scene(args: Array)",
        "func update_command_line_new_v1()",
        "func update_command_line_ne()",
        "func navigate_history_new(direction: int)",
        "func _cmd_statu(_args: Array)",
        "func _cmd_load(args: Array)",
        "func _cmd_creat(args: Array)",
        "func setup_terminal_containe()",
        "func setup_material_cach()",
        "func register_default_commands()",
        "func update_letter_visuals_ne()",
        "func create_floating_text_ne(text: String, position: Vector3)",
        "func create_3d_letter_ne(letter: String, position: Vector3)",
        "func process_command_ne(args)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_database_system.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init(func_name: String)",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func analyze_name()",
        "func get_char_type(c: String)",
        "func add_function(func_text: String)",
        "func extract_function_name(declaration: String)",
        "func count_parameters(declaration: String)",
        "func extract_return_type(declaration: String)",
        "func get_function_analysis(func_name: String)",
        "func print_analysis(func_name: String)",
        "func get_type_name(type_code: int)",
        "func _ready()",
        "func check_all_things()",
        "func initialize_parser()",
        "func collect_system_stats()",
        "func get_parse_stats()",
        "func register_node(node, identifier)",
        "func connect_nodes(sender_id, receiver_id)",
        "func send_signal(sender_id, action)",
        "func get_function_metadata(script_path: String, function_name: String)",
        "func get_category_functions(category: String)",
        "func get_mutex_dependencies(script_path: String, function_name: String)",
        "func get_global_variables(script_path: String, function_name: String)",
        "func get_function_dependencies(script_path: String, function_name: String)",
        "func generate_report(script_path: String = \"\", category: String = \"\")",
        "func _generate_function_report(script_path: String, function_name: String)",
        "func analyze_function_requirements(function_name: String)",
        "func check_function_compatibility(function_name: String)",
        "func get_dependency_chain(function_name: String, chain: Array = [])",
        "func get_function_usage(var_name: String)",
        "func generate_function_report(function_name: String)",
        "func process_directory(path: String = \"\")",
        "func process_file(file_path: String)",
        "func update_parse_stats(success: bool, file_path: String)",
        "func parse_jsh_file(content: String)",
        "func parse_block_metadata(metadata_str: String)",
        "func validate_file_format(content: String)",
        "func analyze_file_content(content: String)",
        "func split_by_rules(content: String, level: String)",
        "func parse_function_data(function_content: String)",
        "func get_function_name(function_content: String)",
        "func get_function_inputs(function_content: String)",
        "func get_function_body(function_content: String)",
        "func process_with_limits(content: String)",
        "func generate_ender_version(content: String)",
        "func compare_versions(old_content: String, new_content: String)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_data_splitter.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func check_all_things()",
        "func initialize_parser()",
        "func process_directory(path: String = \"\")",
        "func process_file(file_path: String)",
        "func update_parse_stats(success: bool, file_path: String)",
        "func get_parse_stats()",
        "func parse_jsh_file(content: String)",
        "func parse_block_metadata(metadata_str: String)",
        "func validate_file_format(content: String)",
        "func collect_system_stats()",
        "func analyze_file_content(content: String)",
        "func split_by_rules(content: String, level: String)",
        "func parse_function_data(function_content: String)",
        "func get_function_name(function_content: String)",
        "func get_function_inputs(function_content: String)",
        "func get_function_body(function_content: String)",
        "func process_with_limits(content: String)",
        "func generate_ender_version(content: String)",
        "func compare_versions(old_content: String, new_content: String)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_digital_earthlings.gd",
      "class_name": "JSHDataGrid",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready_add()",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func initialize_grid()",
        "func set_grid_size(width, height)",
        "func set_data(data_array)",
        "func update_cell_value(x, y, value)",
        "func highlight_cell(x, y, highlight = true)",
        "func set_title(title_text)",
        "func set_data_properties(label, units)",
        "func animate_to_new_data(new_data, duration = 1.0)",
        "func generate_wave_pattern()",
        "func generate_ripple_pattern()",
        "func generate_random_pattern()",
        "func generate_gradient_pattern()",
        "func generate_mountain_pattern()",
        "func create_grid_cells()",
        "func create_cell(x, y)",
        "func create_axis_labels()",
        "func create_title()",
        "func create_info_panel()",
        "func create_color_legend()",
        "func update_grid_visualization()",
        "func update_cell_visualization(x, y)",
        "func update_info_panel()",
        "func clear_grid()",
        "func _on_cell_input_event(x, y, _camera, event, event_position, _normal, _shape_idx)",
        "func _on_cell_mouse_entered(x, y)",
        "func _on_cell_mouse_exited(x, y)",
        "func setup_main_reference(main_ref)",
        "func create_from_records(record_map_id, record_index)",
        "func _ready_old()",
        "func initialize_integration()",
        "func connect_signals()",
        "func register_records()",
        "func initialize_reality_systems()",
        "func initialize_command_system()",
        "func setup_command_processor()",
        "func initialize_game()",
        "func show_welcome_message()",
        "func find_interface_text_node()",
        "func _process(delta)",
        "func parse_command(command_text: String)",
        "func _cmd_help(_args)",
        "func _cmd_create(args)",
        "func _cmd_transform(args)",
        "func _cmd_remember(_args)",
        "func _cmd_shift(_args)",
        "func _cmd_speak(_args)",
        "func _cmd_glitch(_args)",
        "func _cmd_spawn(_args)",
        "func _cmd_guardian(_args)",
        "func _cmd_reality(_args)",
        "func _cmd_deja_vu(_args)",
        "func shift_reality(new_reality)",
        "func toggle_reality_containers(old_reality, new_reality)",
        "func get_reality_color(reality)",
        "func create_glitch_effect(parameter, intensity, duration_str)",
        "func apply_visual_glitch(intensity, duration)",
        "func apply_physics_glitch(_intensity, _duration)",
        "func apply_audio_glitch(_intensity, _duration)",
        "func handle_snake_menu_interaction(option, difficulty = \"normal\")",
        "func launch_snake_game(difficulty)",
        "func display_high_scores()",
        "func process_snake_button_click(button_name)",
        "func get_current_menu_context()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_digital_earthlings.gd.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_mainframe_database.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 2,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _init() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func update_ram(usage: int)",
        "func update_cpu(usage: float)",
        "func update_nodes(count: int)",
        "func update_file_ops(count: int)",
        "func get_ram_percentage()",
        "func get_cpu_percentage()",
        "func get_node_percentage()",
        "func get_file_percentage()",
        "func _init(p_name: String, p_type: int, p_execution_time: float = 5.0)",
        "func add_dependency(func_name: String)",
        "func set_resource_requirement(resource: String, amount)",
        "func set_error_probability(probability: float)",
        "func execute()",
        "func _init(p_name: String)",
        "func add_pack(pack_name: String)",
        "func start()",
        "func advance()",
        "func get_current_pack()",
        "func reset()",
        "func _ready()",
        "func _initialize_mutexes()",
        "func _initialize_system()",
        "func _initialize_functions()",
        "func _initialize_combos()",
        "func _initialize_corner_indicators()",
        "func _register_node_path(key: String, path: String)",
        "func _build_connection_matrix()",
        "func _start_turn_system()",
        "func _can_execute_pack(pack_name: String)",
        "func _execute_function_pack(pack_name: String)",
        "func _update_memory_tracking()",
        "func _register_corner_markers()",
        "func _add_system_function(func_name: String, execution_time: float = 5.0)",
        "func _add_input_function(func_name: String, execution_time: float = 2.0)",
        "func _add_file_function(func_name: String, execution_time: float = 4.0)",
        "func _add_render_function(func_name: String, execution_time: float = 3.0)",
        "func _add_process_function(func_name: String, execution_time: float = 4.0)",
        "func _add_memory_function(func_name: String, execution_time: float = 3.0)",
        "func _execute_init_system()",
        "func _execute_check_resources()",
        "func _execute_verify_paths()",
        "func _execute_poll_input()",
        "func _execute_process_keys()",
        "func _execute_handle_mouse()",
        "func _execute_load_config()",
        "func _execute_parse_data()",
        "func _execute_save_state()",
        "func _execute_update_display()",
        "func _execute_render_frame()",
        "func _execute_update_corners()",
        "func _process_turn()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_marching_shapes_system.gd",
      "class_name": "JSHDataGrid",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready_add()",
        "func _process_add(delta)",
        "func _ready_old()",
        "func _process_old(delta)",
        "func _ready_old_0()",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func add_quad_seven(vertices, indices, v1, v2, v3, v4, _v5)",
        "func setup_nodes()",
        "func initialize_scalar_field()",
        "func update_scalar_field()",
        "func get_noise_value(x, y)",
        "func generate_mesh()",
        "func set_iso_level(value)",
        "func lerp_vertex(x1, y1, x2, y2, val1, val2)",
        "func add_triangle(vertices, indices, v1, v2, v3)",
        "func add_quad(vertices, indices, v1, v2, v3, v4)",
        "func add_pentagon_nine(vertices, indices, v1, v2, v3, v4, v5, _v6, _v7)",
        "func add_pentagon(vertices, indices, v1, v2, v3, v4, v5)",
        "func add_wireframe_line(wireframe_vertices, start, end)",
        "func set_noise_parameters(scale, octaves, persistence, lacunarity, seed_value)",
        "func set_animation(enabled, speed = 1.0)",
        "func set_wireframe(enabled)",
        "func set_grid_points(enabled)",
        "func setup_main_reference(main_ref)",
        "func generate_gradient_pattern(data)",
        "func generate_mountain_pattern(data)",
        "func generate_random_pattern(data)",
        "func setup_task_manager()",
        "func create_data_grid()",
        "func create_pattern_controls()",
        "func create_pattern_button(label_text, position, pattern_index)",
        "func _on_pattern_selected(pattern_index)",
        "func _on_update_timer()",
        "func _on_cell_selected(x, y, value)",
        "func generate_data(pattern)",
        "func generate_gradient_pattern_old(data)",
        "func generate_mountain_pattern_old(data)",
        "func generate_wave_pattern(data)",
        "func generate_ripple_pattern(data)",
        "func generate_random_pattern_old(data)",
        "func initialize_grid()",
        "func set_grid_size(width, height)",
        "func set_data(data_array)",
        "func update_cell_value(x, y, value)",
        "func highlight_cell(x, y, highlight = true)",
        "func set_title(title_text)",
        "func set_data_properties(label, units)",
        "func animate_to_new_data(new_data, duration = 1.0)",
        "func create_grid_cells()",
        "func create_cell(x, y)",
        "func create_axis_labels()",
        "func create_title()",
        "func create_info_panel()",
        "func create_color_legend()",
        "func update_grid_visualization()",
        "func update_cell_visualization(x, y)",
        "func update_info_panel()",
        "func clear_grid()",
        "func _on_cell_input_event(x, y, _camera, event, position, _normal, _shape_idx)",
        "func _on_cell_mouse_entered(x, y)",
        "func _on_cell_mouse_exited(x, y)",
        "func setup_main_reference_old(main_ref)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/JSH_reality_shaders.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func load_reality_shader(reality_name)",
        "func start_transition(from_reality, to_reality)",
        "func process_transition(delta)",
        "func finish_transition()",
        "func get_next_reality()",
        "func create_glitch_effect(parameter, intensity, duration_str)",
        "func remove_glitch_effect(parameter)",
        "func apply_color_palette(palette_name)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_scene_tree_system.gd",
      "class_name": "JSHSceneTreeSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func start_up_scene_tree()",
        "func add_branch(branch_path: String, branch_data: Dictionary)",
        "func remove_branch(branch_path: String)",
        "func get_branch(branch_path: String)",
        "func set_branch_status(branch_path: String, status: String)",
        "func get_branch_status(branch_path: String)",
        "func disable_branch(branch_path: String)",
        "func activate_branch(branch_path: String)",
        "func set_branch_node(branch_path: String, node: Node)",
        "func get_branch_node(branch_path: String)",
        "func jsh_tree_get_node(node_path: String)",
        "func validate_branch_nodes(branch_path: String)",
        "func cache_branch_data(branch_path: String, branch_data: Dictionary)",
        "func restore_cached_branch(branch_name: String)",
        "func has_cached_branch(branch_name: String)",
        "func _append_branch_to_output(branch: Dictionary, output: String, prefix: String)",
        "func build_pretty_print(node: Node, prefix: String = \"\", is_last: bool = true)",
        "func capture_tree_state()",
        "func capture_node_structure(node: Node)",
        "func match_node_type(type: String)",
        "func check_if_container_available(container: String)",
        "func check_if_datapoint_available(container: String)",
        "func check_if_datapoint_node_available(container: String)",
        "func jsh_tree_get_node_status_changer(node_path: String, _node_name: String, node_to_check: Node)",
        "func print_tree_pretty()",
        "func the_pretender_printer(node_name: String, node_path_jsh_tree: String, godot_node_type: String, node_type: String = \"Node3D\")",
        "func find_branch_to_unload(thing_path: String)",
        "func disable_all_branches(branch_to_disable: Dictionary)",
        "func _setup_scene_tree_monitoring()",
        "func _on_godot_node_added(node: Node)",
        "func _on_godot_node_removed(node: Node)",
        "func _on_godot_node_renamed(node: Node)",
        "func _sync_with_godot_tree()",
        "func _sync_node_recursive(node: Node, jsh_path: String)",
        "func _get_jsh_path_for_node(node: Node)",
        "func _create_branch_data_from_node(node: Node)",
        "func _get_jsh_type_for_node(node: Node)",
        "func force_full_sync()",
        "func get_sync_status()",
        "func _count_godot_nodes(node: Node)",
        "func _count_jsh_nodes(tree_dict: Dictionary)",
        "func _cleanup_node_path_cache()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_snake_game.gd",
      "class_name": "JSHSnakeGame",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready_add()",
        "func _process_add(delta)",
        "func _ready_add0()",
        "func _process_add0(delta)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func sewers()",
        "func pentagon_sewers()",
        "func initialize_console()",
        "func initialize_keyboard()",
        "func initialize_menu_system()",
        "func initialize_camera()",
        "func initialize_thread_system()",
        "func initialize_records_system()",
        "func setup_window_layers()",
        "func show_scene(scene_number)",
        "func upload_scene_data(container_name, scene_data)",
        "func show_main_menu()",
        "func hide_menu_container(container_name)",
        "func show_menu_scene(menu_name, page_index)",
        "func launch_snake_game(difficulty = \"normal\")",
        "func create_snake_game(difficulty = \"normal\")",
        "func show_snake_game()",
        "func set_view_mode(mode)",
        "func update_camera(delta)",
        "func register_console_commands()",
        "func _input(event)",
        "func toggle_console()",
        "func create_new_task(function_name, data)",
        "func three_stages_of_creation(set_name)",
        "func log_message(message, type = \"info\")",
        "func first_dimensional_magic(action_to_do, datapoint_node, additional_node = null)",
        "func fourth_dimensional_magic(type_of_stuff, node, data)",
        "func fifth_dimensional_magic(type_of_unload, container_name)",
        "func sixth_dimensional_magic(type_of_action, node_path_or_nodes, function_name, data = null)",
        "func seventh_dimensional_magic(action_type, path, data)",
        "func eighth_dimensional_magic(name_of_action, data_to_send, container_name)",
        "func initialize_materials()",
        "func create_grid()",
        "func create_grid_line(start, end)",
        "func create_ui_elements()",
        "func initialize_snake()",
        "func add_snake_segment(grid_pos, is_head = false)",
        "func initialize_animator()",
        "func start_game()",
        "func reset_game()",
        "func handle_input()",
        "func move_snake()",
        "func _ready_snake()",
        "func _process_snake(delta)",
        "func create_meshes()",
        "func create_cube_mesh(color: Color)",
        "func start_new_game()",
        "func spawn_food()",
        "func handle_game_over()",
        "func update_info_text(text: String)",
        "func update_score_display()",
        "func create_grid_add()",
        "func add_snake_segment_add(grid_pos: Vector2)",
        "func move_snake_add()",
        "func handle_input_add(input_type: String)",
        "func handle_snake_menu_interaction(option, difficulty = \"normal\")",
        "func launch_snake_game_add(difficulty)",
        "func display_high_scores()",
        "func process_snake_button_click(button_name)",
        "func get_current_menu_context()",
        "func _input_snake(event)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_task_manager.gd",
      "class_name": "SpatialEvolutionSystem",
      "extends_from": "UniversalBeingBase",
      "ready_count": 3,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (3)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func generate_container_mesh(container : SpatialContainer)",
        "func generate_base_shape(_rng)",
        "func apply_evolutionary_rules(shape, _history)",
        "func simplify_for_lod(shape, _lod_level)",
        "func _init(init_seed : int, pos : Vector3)",
        "func sewers()",
        "func pentagon_sewers()",
        "func evolve(turn : int, command)",
        "func apply_scale_pattern(data)",
        "func serialize()",
        "func _ready()",
        "func add_task(task_name, priority = 0, dependencies = [])",
        "func start_task(task_id)",
        "func complete_task(task_id, success = true)",
        "func track_data_flow(source_path, target_path, data_type, amount = 1.0)",
        "func record_interaction(position, type, data = null)",
        "func track_scene_movement(scene_path, from_position, to_position, duration)",
        "func complete_scene_movement(scene_path, movement_index)",
        "func generate_statistics()",
        "func export_data(file_path = \"user://task_manager_data.json\")",
        "func create_3d_visualization(parent_node)",
        "func _find_task_index(task_id)",
        "func prune_completed_tasks()",
        "func _update_flow_visualization(flow_key)",
        "func _create_flow_line(flow_key)",
        "func _visualize_interaction(interaction)",
        "func _visualize_movement(scene_path, movement)",
        "func new_task_appeared(task_id, function_called, data_send_to_function)",
        "func collect_tasks(function_name, task_data)",
        "func check_if_that_task_was(function_name)",
        "func check_all_things()",
        "func initialize_task_system()",
        "func parse_code_structure(content: String)",
        "func create_tasks_from_structure(structure: Dictionary)",
        "func generate_task_id(base_name: String)",
        "func determine_category(system_name: String)",
        "func get_task_info(task_id: String)",
        "func update_task_status_now(task_id: String, new_status: String)",
        "func update_task_status(task_id: String, new_status: String)",
        "func get_category_tasks(category: String)",
        "func generate_task_report()",
        "func initialize_world_seed(master_seed : int)",
        "func store_container(container : SpatialContainer)",
        "func save_container_states()",
        "func apply_scale_pattern(data, _pattern_seed)",
        "func load_from_rom(def)",
        "func check_scale(_data)",
        "func check_history(_data)",
        "func generate_initial_rules(rng_number)",
        "func generate_initial_containers(world_rng)",
        "func check_rules_of_container(container_rules)",
        "func process_turn()",
        "func apply_procedural_rules()",
        "func unload_distant_containers()",
        "func update_container_lod()",
        "func calculate_lod(distance : float)",
        "func load_required_containers()",
        "func process_commands()",
        "func execute_command(command)",
        "func apply_global_scale(command)",
        "func inherit_rules(source_container)",
        "func detect_repetition_patterns()",
        "func mutate_rule(data, _mutation_seed)",
        "func check_pattern_repetition(data)",
        "func apply_pattern_response(data)",
        "func store_container_old(container : SpatialContainer)",
        "func save_container_states_old()",
        "func _ready()",
        "func _input(event)",
        "func _process(delta)",
        "func _ready()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_thread_pool_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func check_all_things()",
        "func store_thread_check(thread_data: Dictionary)",
        "func analyze_thread_performance()",
        "func store_thread_check(thread_data: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/jsh_world.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/line.gd",
      "class_name": "Anonymous",
      "extends_from": "MeshInstance3D",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func change_points_of_line(start_end_points)",
        "func send_any_message()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/main.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 4,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _init() functions (4)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init(parent_node = null)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_command(cmd_name, target, method_name)",
        "func parse(raw_input: String)",
        "func call_command(cmd: String, args: Array)",
        "func _init()",
        "func _ready()",
        "func _input(event: InputEvent)",
        "func _input_event(event: InputEvent)",
        "func _process(delta)",
        "func _physics_process(delta)",
        "func process_system()",
        "func each_blimp_of_delta()",
        "func update_delta_history(delta: float)",
        "func calculate_time(_delta_current, time, _hour, _minute, _second)",
        "func before_time_blimp(_how_many_finished, _how_many_shall_been_finished)",
        "func blimp_time_for_some_reason()",
        "func _on_interval_tick(interval_name: String)",
        "func track_delta_timing(_validation)",
        "func _setup_retry_timer()",
        "func _on_retry_timer_completed(timer_id: String)",
        "func ready_for_once()",
        "func process_pending_sets()",
        "func handle_creation_task(target_argument)",
        "func handle_unload_task(target_argument)",
        "func check_status()",
        "func check_status_just_timer()",
        "func track_task_status(task_id)",
        "func track_task_completion(task_id)",
        "func handle_task_timeout(task_id)",
        "func clear_task_queues()",
        "func first_dimensional_magic(type_of_action_to_do : String, datapoint_node : Node, additional_node : Node = null)",
        "func the_fourth_dimensional_magic(type_of_operation : String, node : Node, data_of_movement)",
        "func fifth_dimensional_magic(type_of_unloading : String, node_path_for_unload : String)",
        "func sixth_dimensional_magic(type_of_function, node_to_call, function_name : String, additional_data = null)",
        "func seventh_dimensional_magic(type_of_action : String, kind_of_action : String, amount_of_actions : int)",
        "func check_magical_array(path_of_the_node)",
        "func eight_dimensional_magic(type_of_message : String, message_now, receiver_name : String)",
        "func ninth_dimensional_magic(operation, path, texture = null)",
        "func newer_even_function_for_dictionary(name_of_container)",
        "func task_to_send_data_to_datapoint(data_for_sending)",
        "func interactions_upload_to_datapoint(header_line, information_lines, datapoint)",
        "func scene_frames_upload_to_datapoint(header_line, information_lines, datapointi, containeri)",
        "func load_cached_data_second_impact(data_set: String)",
        "func load_cached_data_second_impact_old(data_set: String)",
        "func instructions_analiser(metadata_parts, second_line, third_line, datapoint, container)",
        "func data_to_be_send_processing(container_name, data_id, path_for_datapoint, place_for_data, first_line, lines_parsed, data_set_name)",
        "func check_type_of_container(data_set_name)",
        "func check_scene_container(data_set_name)",
        "func test_single_core()",
        "func test_multi_threaded()",
        "func check_thread_status()",
        "func check_thread_status_type()",
        "func multi_threads_start_checker()",
        "func prepare_akashic_records()",
        "func create_new_task(function_name: String, data)",
        "func create_new_task_empty(function_name: String)",
        "func check_three_tries_for_threads(threads_0, threads_1, threads_2)",
        "func validate_thread_system()",
        "func three_stages_of_creation(data_set_name)",
        "func check_if_we_are_adding_container(path_of_the_node)",
        "func check_if_already_loading_one(set_name)",
        "func the_current_state_of_tree(set_name_now, the_state)",
        "func change_creation_set_name(record_type, additional_set_name_)",
        "func process_creation_further(record_type : String, amount : int)",
        "func whip_out_set_by_its_name(set_name_to_test)",
        "func attempt_creation(set_name: String)",
        "func queue_pusher_adder(task)",
        "func check_currently_being_created_sets()",
        "func process_stages()",
        "func first_stage_of_creation_(data_set_name_0, sets_to_create_0)",
        "func second_stage_of_creation_(data_set_name_1, sets_to_create_1)",
        "func second_impact_for_real(set_to_do_thingy)",
        "func third_stage_of_creation_(data_set_name_2, sets_to_create_2)",
        "func third_impact_right_now(data_set_thingiess)",
        "func fourth_impact_of_creation_(data_set_name_3, sets_to_create_3)",
        "func fourth_impact_right_now(data_set_nameeee)",
        "func fifth_impact_of_creation_(data_set_name_4, sets_to_create_4)",
        "func fifth_impact_right_now(data_set_nameeeeee)",
        "func sixth_impact_of_creation(data_set_name_6, sets_to_create_6)",
        "func sixth_impact_right_now(data_set_name_here)",
        "func file_creation(file_content,  path_for_file, name_for_file)",
        "func create_file(array_with_data: Array, lines_amount: int, name_for_file: String)",
        "func save_file_list_text(scan_results: Dictionary, output_file: String, target_directory: String)",
        "func create_default_settings(file_path_c_d_s)",
        "func save_file_list_json(scan_results: Dictionary, output_file: String = \"user://file_list.json\")",
        "func find_or_create_eden_directory()",
        "func file_finder(file_name, path_to_file, list_of_files, type_of_data)",
        "func check_folder(folder_path)",
        "func check_folder_content(directory)",
        "func check_settings_file(type_of_file)",
        "func update_main_path(updated_path)",
        "func update_database_path(updated_db_path)",
        "func scan_eden_directory(directory: String = \"D:/Eden\", indent: int = 0)",
        "func scan_available_storage()",
        "func scan_res_directory(directory: String = \"res://\", indent: int = 0)",
        "func scan_directory_with_sizes(directory: String, indent: int = 0)",
        "func get_data_structure_size(data)",
        "func get_jsh(property_name: String)",
        "func check_memory_state()",
        "func setup_settings()",
        "func clean_array(array_name: String)",
        "func clean_dictionary(dict_name: String)",
        "func data_splitter_some_function()",
        "func zippy_unzipper_data_center()",
        "func check_record_in_active(records_set_name)",
        "func check_record_in_cached(records_set_name)",
        "func check_set_limit(records_set_name)",
        "func check_current_set_container_count(record_set_name)",
        "func check_record_set_type(record_set_name)",
        "func check_if_first_time(set_name_first, the_current_of_energy)",
        "func containers_states_checker()",
        "func the_basic_sets_creation()",
        "func get_every_basic_set()",
        "func get_every_basic_set_()",
        "func check_if_every_basic_set_is_loaded()",
        "func container_finder(set_name)",
        "func initialize_menu(record_type: String)",
        "func find_record_set(record_type: String)",
        "func find_instructions_set(record_type: String)",
        "func find_scene_frames(record_type: String)",
        "func find_interactions_list(record_type: String)",
        "func record_mistake(mistake_data: Dictionary)",
        "func get_record_type_id(record_type: String)",
        "func get_cache_total_size()",
        "func get_dictionary_memory_size(dict: Dictionary)",
        "func find_highest_in_array(numbers: Array)",
        "func new_function_for_creation_recovery(record_type_now, first_stage_of_creation_now, stage_of_creation_now)",
        "func create_additional_record_set(record_type, current_container_count_check)",
        "func continue_recreation(data_to_work_on_additional_set, datapoint_name_thing, container_name_thing, set_name_to_work_on, current_container_count_check, record_type, amount_of_things, container_name)",
        "func create_record_from_script(record_type)",
        "func find_record_set_new_file_finder(data)",
        "func process_creation_request(set_name: String)",
        "func prepare_akashic_records_init()",
        "func load_record_set(records_part: String, record_type: String, type_of_data : int, records : Dictionary)",
        "func load_cached_data(data_set: String)",
        "func load_cached_record_to_active(records_set_name)",
        "func deep_copy_dictionary(original: Dictionary)",
        "func clean_oldest_dataset()",
        "func process_to_unload_records(container_name_to_unload)",
        "func unload_record_set(records_sets_name : String, record_type: String)",
        "func cache_data(records_sets_name: String, record_type: String, data, meta_data)",
        "func add_container_count(records_set_name)",
        "func recreator(number_to_add, data_to_process, data_set_name, new_name_for_set)",
        "func check_if_container_available(container)",
        "func check_if_datapoint_available(container)",
        "func check_if_datapoint_node_available(container)",
        "func build_pretty_print(node: Node, prefix: String = \"\", is_last: bool = true)",
        "func find_branch_to_unload(thing_path)",
        "func check_tree_branches()",
        "func print_tree_structure(branch: Dictionary, indent: int = 0)",
        "func jsh_tree_get_node(node_path_get_node: String)",
        "func containers_list_creator()",
        "func validate_container_state(container_name)",
        "func capture_tree_state()",
        "func capture_node_structure(node: Node)",
        "func start_up_scene_tree()",
        "func recreator_of_singular_thing(data_set)",
        "func recreate_missing_nodes(array_of_recreation)",
        "func unload_node_branch(path_for_node_to_unload, recreation_of_node_data)",
        "func attempt_container_repair(container_name, missing_nodes)",
        "func recreate_node_from_records(container_name: String, node_type: String, records: Dictionary)",
        "func tasked_children(node_to_be_added, node_to_be_added_path)",
        "func process_active_records_for_tree(active_records: Dictionary, set_name_to_process : String, container_name_here : String)",
        "func match_node_type(type: String)",
        "func the_pretender_printer(node_name: String, node_path_jsh_tree: String, godot_node_type, node_type: String = \"Node3D\")",
        "func unload_container(container_to_unload)",
        "func unload_nodes(array_of_thingiess_that_shall_remain)",
        "func cache_tree_branch_fully(container_to_unload)",
        "func cache_branch(branch_name, child_name, branch_part)",
        "func the_finisher_for_nodes(data_to_be_parsed)",
        "func disable_all_branches_reset_counters(branch_to_disable, container_name_for_array)",
        "func traverse_branch(branch: Dictionary)",
        "func traverse_branch(branch: Dictionary)",
        "func jsh_tree_get_node_status_changer(node_path_jsh_tree_status: String, node_name: String, node_to_check: Node)",
        "func connect_containers(container_name_0, container_name_1)",
        "func disable_all_branches(branch_to_disable)",
        "func traverse_branch(branch: Dictionary)",
        "func check_quick_functions()",
        "func check_short_functions()",
        "func preparer_for_combos(data_to_understand)",
        "func call_some_thingy()",
        "func process_turn_0(delta: float)",
        "func process_system_0()",
        "func process_system_1()",
        "func process_system_2()",
        "func process_system_3()",
        "func process_system_4()",
        "func process_system_5()",
        "func process_system_6()",
        "func process_system_7()",
        "func process_system_8()",
        "func process_system_9()",
        "func change_material_settings(material)",
        "func apply_texture_with_proper_settings(node_to_apply_texture, texture, node_type=\"default\")",
        "func get_ray_points(mouse_position: Vector2)",
        "func another_ray_cast(result)",
        "func process_ray_cast(stuff)",
        "func reset_debug_colors()",
        "func reset_collider_debug_color(collider)",
        "func highlight_collision_shape(collider)",
        "func combo_checker(node_to_check, state_of_button)",
        "func format_combo_for_display()",
        "func check_combo_patterns()",
        "func ray_cast_data_preparer(data_ray_cast)",
        "func multi_threaded_ray_cast(result, to, from)",
        "func old_multi_thread_thingy(result, to, from)",
        "func secondary_interaction_after_rc(array_of_data)",
        "func analise_data(thing_name_, type, data_to_analyze, second_part, group_number, verion_of_thing, information_lines_parsed)",
        "func create_circle_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func generate_circle_points(radius: float, num_points: int)",
        "func create_flat_shape(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_text_label(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_array_mesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_textmesh(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func generate_rounded_rect(width: float, height: float, corner_radius: float, depth: float = 0.0)",
        "func create_rounded_button(node_name: String, first_line: Array, data_to_write: Array, group_name: String, version_of_thing: String, information_lines_parsed: Array, corner_radius: float = 0.1)",
        "func create_button_with_rounded_corners(node_name: String, first_line: Array, data_to_write: Array, \n\t\t\t\t\t\t\t\t\t\tgroup_name: String, version_of_thing: String, \n\t\t\t\t\t\t\t\t\t\tinformation_lines_parsed: Array, corner_radius: float = 0.1)",
        "func create_button(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_cursor(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_connection(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_screen(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_datapoint(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func create_container(node_name: String, first_line : Array, data_to_write : Array, group_name : String, version_of_thing : String, information_lines_parsed : Array)",
        "func get_spectrum_color(value: float)",
        "func node_creation(node_name, crafted_data, coords, to_rotate, group_number, node_type, path_of_thing)",
        "func add_texture_to_thing_task_creator(thing_node, node_type, color_params, path_for_thing)",
        "func add_texture_to_thing_preparer(data_to_create)",
        "func initialize_base_textures()",
        "func generate_rounded_rect_texture(width, height, corner_radius, color_value=0.5, alpha_value=1.0)",
        "func add_texture_to_thing(thing_node, node_type, mesh_data, color_params)",
        "func get_mesh_data(node)",
        "func toggle_textures()",
        "func is_textures_enabled()",
        "func generate_texture_for_shape(shape_data, node_type, default_params=null)",
        "func draw_polygon_texture(img, vertices, color_value, alpha_value)",
        "func draw_gradient_fill(img, base_color)",
        "func draw_ring(img, center, radius, color, thickness=2.0)",
        "func is_point_in_polygon(point, polygon)",
        "func draw_circle_texture(img, radius, num_points, color_value, alpha_value)",
        "func draw_button_texture(img, vertices, color_value, alpha_value)",
        "func draw_screen_texture(img, vertices, color_value, alpha_value)",
        "func draw_gradient_texture(img, color_value, alpha_value)",
        "func add_noise_pattern(img, base_color, intensity)",
        "func closest_point_on_segment(p, a, b)",
        "func generate_uvs_for_mesh(mesh_instance)",
        "func add_collision_to_thing(thing_node, node_type, path_of_thingy, name_of_thingy)",
        "func check_system_function(check_name: String)",
        "func check_if_scene_was_set(container_now)",
        "func setup_system_checks()",
        "func test_init()",
        "func retry_thread_initialization()",
        "func validate_system_environment()",
        "func log_error_state(error_type, details)",
        "func start_health_checks()",
        "func check_system_health()",
        "func handle_random_errors()",
        "func trigger_deep_repair(error_type: String)",
        "func breaks_and_handles_check()",
        "func breaks_and_handles_check_issue()",
        "func unlock_stuck_mutexes()",
        "func check_first_time_status(status_name: String)",
        "func is_creation_possible()",
        "func check_system_state(state_name: String)",
        "func set_system_state(state_name: String, new_state: SystemState)",
        "func check_system_readiness()",
        "func check_if_all_systems_are_green()",
        "func process_pre_delta_check()",
        "func get_system_state(state_name: String)",
        "func print_system_metrics()",
        "func first_turn_validation()",
        "func get_system_metrics()",
        "func initialize_integration()",
        "func register_records()",
        "func initialize_command_system()",
        "func initialize_reality_systems()",
        "func initialize_physical_reality(settings)",
        "func initialize_digital_reality(settings)",
        "func initialize_astral_reality(settings)",
        "func initialize_game()",
        "func initialize_digital_earthlings()",
        "func initialize_ai_system()",
        "func load_gemma_model(model_path)",
        "func generate_ai_response(data)",
        "func _on_ai_error(error_message)",
        "func query_ai(prompt)",
        "func generate_from_word(word: String)",
        "func generate_guardian_message(action: String)",
        "func simulate_gemma_response(message, context)",
        "func simulate_basic_response(message)",
        "func _cmd_reality(args)",
        "func _cmd_help(args)",
        "func setup_command_processor()",
        "func show_welcome_message()",
        "func register_command_handlers()",
        "func cmd_help(args)",
        "func get_lod(distance)",
        "func generate_icosphere(lod)",
        "func load_chunk(position)",
        "func generate_icosphere_old(lod: int, time: float)",
        "func _init(pos: Vector3, seed_hash: String)",
        "func _init(pos: Vector3, dir: Vector3, word: String)",
        "func load_chunk_old(position: Vector3, word_seed: String)",
        "func march_cubes()",
        "func generate_density_field(word: String, time: float)",
        "func check_for_deja_vu(concept, details)",
        "func trigger_normal_cleanup()",
        "func trigger_emergency_cleanup()",
        "func spawn_guardian(guardian_data)",
        "func shift_reality(new_reality)",
        "func apply_reality_rules(reality_type)",
        "func apply_color_palette(palette_name)",
        "func trigger_transition_effect(from_reality, to_reality)",
        "func spawn_entity(data)",
        "func transform_entity(data)",
        "func trigger_deja_vu(action, location)",
        "func select_guardian_type(action: String)",
        "func process_entity_interaction(interaction_data, entity_path)",
        "func remember(concept, details)",
        "func recall(concept)",
        "func _on_command_processed(command, result)",
        "func _cmd_create(args)",
        "func _cmd_transform(args)",
        "func _cmd_remember(args)",
        "func _cmd_shift(args)",
        "func initialize_command_parser()",
        "func create_command_parser(_unused)",
        "func register_command(data)",
        "func parse_command(input_text)",
        "func find_interface_text_node()",
        "func enter_command()",
        "func _cmd_guardian(args)",
        "func _cmd_deja_vu(args)",
        "func _cmd_spawn(args)",
        "func create_anomaly()",
        "func toggle_reality_containers(old_reality, new_reality)",
        "func cycle_reality()",
        "func get_spatiotemporal_hash(pos: Vector3, time_window: float)",
        "func get_spatiotemporal_hash_old(pos: Vector3, time_window: float)",
        "func handle_snake_menu_interaction(option, difficulty = \"normal\")",
        "func launch_snake_game(difficulty)",
        "func display_high_scores()",
        "func process_snake_button_click(button_name)",
        "func get_current_menu_context()",
        "func show_snake_game()",
        "func hide_snake_game()",
        "func position_camera_for_snake_game()",
        "func restore_camera_position()",
        "func setup_snake_input_handling()",
        "func restore_normal_input_handling()",
        "func _input_snake(event)",
        "func _cmd_glitch(args)",
        "func apply_visual_glitch(intensity, duration)",
        "func apply_physics_glitch(intensity, duration)",
        "func apply_audio_glitch(intensity, duration)",
        "func apply_time_glitch(intensity, duration)",
        "func create_glitch_effect(parameter, intensity, duration_str)",
        "func _cmd_speak(args)",
        "func calculate_word_density(word: String, pos: Vector3, time: float)",
        "func initialize_volume(size: int)",
        "func get_guardian_color(guardian_type)",
        "func get_reality_color(reality)",
        "func _on_main_node_signal(signal_name, signal_data)",
        "func _on_task_discarded(task)",
        "func _on_task_started(task)",
        "func _on_reality_shifted(old_reality, new_reality)",
        "func _on_guardian_spawned(guardian_type, location)",
        "func _on_deja_vu_triggered(trigger_data)",
        "func connect_signals()",
        "func apply_reality_shader(reality_type)",
        "func register_with_banks_combiner()",
        "func register_digital_earthlings_records()",
        "func test_thread_system()",
        "func initialize_thread_system()",
        "func cmd_threads(args)",
        "func cmd_thread_status(args)",
        "func cmd_reset_threads(args)",
        "func process_system_snake(delta)",
        "func character_move_forward()",
        "func character_move_backward()",
        "func character_move_left()",
        "func character_move_right()",
        "func character_stop()",
        "func first_dimensional_magic_snake(type_of_action_to_do, datapoint_node, additional_node = null)",
        "func three_stages_of_creation_snake(set_name: String)",
        "func create_character()",
        "func create_racing_game_integrator()",
        "func create_records_entries()",
        "func add_available_record_sets()",
        "func initialize_console_system()",
        "func start_racing_game()",
        "func position_camera_for_racing_game()",
        "func setup_racing_game_input_handling()",
        "func set_up_racing_game(container_name, visibility)",
        "func hide_racing_game()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/modules_bank.gd",
      "class_name": "ModulesBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func change_multi_threading_mode(new_value)",
        "func check_multi_threading_mode()",
        "func change_jsh_tasker_mode(new_value)",
        "func check_jsh_tasker_mode()",
        "func change_jsh_records_mode(new_value)",
        "func check_settings_file_name()",
        "func change_jsh_terminal_mode(new_value)",
        "func check_jsh_terminal_mode()",
        "func change_jsh_database_mode(new_value)",
        "func check_jsh_database_mode()",
        "func check_all_settings_data()",
        "func load_settings_file(file_path: String)",
        "func save_settings_file(file_path: String)",
        "func save_settings_data(settings_data: Dictionary)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/pallets_racing_game.gd",
      "class_name": "PalletsRacingGame",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_main_reference(main_ref)",
        "func _ready()",
        "func initialize_racing_game()",
        "func setup_race_track()",
        "func create_pallet_obstacle(spawn_position: Vector3)",
        "func setup_checkpoints()",
        "func setup_player_vehicle()",
        "func setup_race_ui()",
        "func start_race()",
        "func process_input(delta)",
        "func _process(delta)",
        "func finish_race()",
        "func reset_race()",
        "func exit_to_menu()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/project_architecture.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/racing_menu_integrator.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_racing_actions()",
        "func add_racing_to_menu()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/records_bank.gd",
      "class_name": "RecordsBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/record_set_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _process(_delta)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func check_all_things()",
        "func add_stuff_to_basic(list_of_things)",
        "func check_basic_set_if_loaded()",
        "func add_record_set_to_list(key_input_a, key_input_b, record_pack)",
        "func get_all_records_packs()",
        "func get_one_records_pack(key_input_a, key_input_b)",
        "func compare_list_of_records(key_input_a, _key_input_b, record_pack)",
        "func add_record_set(record_set_name: String, data: Dictionary)",
        "func get_record_set(record_set_name: String)",
        "func cache_record_set(record_set_name: String)",
        "func cleanup_cache()",
        "func get_record_size(record: Dictionary)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/scenes_bank.gd",
      "class_name": "ScenesBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/scene_tree_check.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _init()",
        "func pentagon_init()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/settings_bank.gd",
      "class_name": "SettingsBank",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func change_path_to_main_directory(new_path)",
        "func check_main_directory_path()",
        "func change_path_to_settings_file(new_path)",
        "func check_settings_file_path()",
        "func change_settings_file_name(new_name)",
        "func check_settings_file_name()",
        "func check_all_settings_data()",
        "func load_settings_file(file_path: String)",
        "func save_settings_file(file_path: String)",
        "func save_settings_data(settings_data: Dictionary)",
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/system_check.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func check_all_things()",
        "func _init()",
        "func _ready()",
        "func find_matching_symbols(text: String, start_symbol: String, end_symbol: String)",
        "func verify_system_component(_component_name: String)",
        "func _on_system_ready(system_name: String)",
        "func verify_system(system_name: String)",
        "func get_data_structure_size(data)",
        "func get_jsh(property_name: String)",
        "func check_memory_state()",
        "func clean_dictionary(dict_name: String)",
        "func clean_array(array_name: String)",
        "func scan_available_storage()",
        "func initialize_word_system()",
        "func get_next_word()",
        "func map_data_to_word(data_type: String, data_path: String)",
        "func create_zip_archive(archive_name: String, source_path: String)",
        "func _create_zip_file(zip_path: String, source_path: String)",
        "func extract_zip_archive(zip_path: String, extract_path: String)",
        "func get_file_by_word(word: String)",
        "func generate_word_report()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/system_interfaces.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/text_label.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _ready()",
        "func _process(delta: float)",
        "func _init()",
        "func pentagon_init()",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/text_screen.gd",
      "class_name": "JSHTextWindow",
      "extends_from": "UniversalBeingBase",
      "ready_count": 3,
      "init_count": 1,
      "process_count": 2,
      "input_count": 2,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": true,
      "has_universal_being_pattern": true,
      "violations": [
        "Multiple _ready() functions (3)",
        "Multiple _process() functions (2)",
        "Multiple _input() functions (2)"
      ],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func sewers()",
        "func pentagon_sewers()",
        "func register_command(command_name: String, callback: Callable)",
        "func unregister_command(command_name: String)",
        "func execute_command(command_name: String, _args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func _process(delta)",
        "func _input(event)",
        "func _ready_0()",
        "func _process_0(delta)",
        "func _input_0(event)",
        "func _setup_components()",
        "func _create_border()",
        "func _setup_signals()",
        "func find_integration_nodes()",
        "func setup_window()",
        "func setup_signals()",
        "func find_integration_nodes_0()",
        "func register_default_commands()",
        "func _cmd_help(args: Array)",
        "func create_window_background()",
        "func create_border()",
        "func create_title_bar()",
        "func create_text_area()",
        "func create_control_buttons()",
        "func create_input_line()",
        "func create_cursor()",
        "func create_button(button_name, button_position, size, color, label_text)",
        "func add_window_collision()",
        "func _on_window_input_event(_camera, event, event_position, _normal, _shape_idx)",
        "func _on_window_mouse_entered()",
        "func _on_window_mouse_exited()",
        "func _on_button_input_event(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func _on_cursor_timer_timeout()",
        "func _submit_text()",
        "func _navigate_command_history(up: bool)",
        "func _update_cursor_position()",
        "func _process_command(command_text: String)",
        "func _update_display()",
        "func _update_border_color()",
        "func toggle_minimized()",
        "func scroll_messages_up()",
        "func scroll_messages_down()",
        "func update_text_display()",
        "func add_text(text: String)",
        "func clear_text()",
        "func focus()",
        "func unfocus()",
        "func register_command(command_name: String, callback: Callable)",
        "func resize(new_width, new_height)",
        "func set_text(text_content, format_links = true)",
        "func process_text_links()",
        "func _submit_text_0()",
        "func _navigate_command_history_0(up: bool)",
        "func _update_cursor_position_0()",
        "func _process_command_0(command_text: String)",
        "func _on_cursor_timer_timeout_0()",
        "func _update_display_0()",
        "func _update_border_color_0()",
        "func add_text_0(text: String)",
        "func clear_text_0()",
        "func focus_0()",
        "func unfocus_0()",
        "func register_command_0(command_name: String, callback: Callable)",
        "func resize_0(new_width, new_height)",
        "func set_text_0(text_content, format_links = true)",
        "func update_text_display_0()",
        "func process_text_links_0()",
        "func create_control_buttons_0()",
        "func create_button_0(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_0(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func toggle_minimized_0()",
        "func scroll_messages_up_0()",
        "func scroll_messages_down_0()",
        "func add_system_message(message)",
        "func add_message(message, sender_name = \"User\")",
        "func link_to_datapoint(datapoint_path: String)",
        "func update_from_datapoint(datapoint_path: String)",
        "func create_text_area_0()",
        "func add_window_collision_0()",
        "func _setup_components_old()",
        "func _create_border_old()",
        "func _setup_signals_old()",
        "func find_integration_nodes_old()",
        "func _process_old_v3(delta)",
        "func _input_old_v4(event)",
        "func _submit_text_old()",
        "func _navigate_command_history_old(up: bool)",
        "func _update_cursor_position_old()",
        "func _process_command_old(command_text: String)",
        "func _on_cursor_timer_timeout_old()",
        "func _update_display_old()",
        "func _update_border_color_old()",
        "func add_text_old(text: String)",
        "func clear_text_old()",
        "func focus_old()",
        "func unfocus_old()",
        "func register_command_old(command_name: String, callback: Callable)",
        "func resize_old(new_width, new_height)",
        "func set_text_old(text_content, format_links = true)",
        "func update_text_display_old()",
        "func process_text_links_old()",
        "func create_control_buttons_old()",
        "func create_button_old(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_old(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func toggle_minimized_old()",
        "func scroll_messages_up_old()",
        "func scroll_messages_down_old()",
        "func add_system_message_old(message)",
        "func add_message_old(message, sender_name = \"User\")",
        "func create_text_window_container(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func setup_text_window_commands(window_node: JSHTextWindow)",
        "func _cmd_help_0(args: Array)",
        "func _cmd_clear(_args: Array)",
        "func change_color_of_letter_or_s(string)",
        "func _on_window_input_event_0(camera, event, position, normal, shape_idx)",
        "func _on_window_mouse_entered_0()",
        "func _on_window_mouse_exited_0()",
        "func setup_window_0()",
        "func register_command(command_name: String, callback: Callable)",
        "func unregister_command(command_name: String)",
        "func _ready_old_v3()",
        "func _ready_old_v2()",
        "func _ready_old()",
        "func _ready_old_v1()",
        "func _process_old(delta)",
        "func _process_old_v1(delta)",
        "func _input_old(event)",
        "func _input_old_v1(event)",
        "func _setup_signals_old_v1()",
        "func clear_text_old_v1()",
        "func focus_old_v1()",
        "func unfocus_old_v1()",
        "func register_command_old_v1(command_name: String, callback: Callable)",
        "func add_system_message_old_v1(message)",
        "func _cmd_teleport(args: Array)",
        "func _cmd_resize(args: Array)",
        "func _cmd_color(args: Array)",
        "func setup_input_handling()",
        "func process_keyboard_input()",
        "func _on_cursor_blink()",
        "func setup_text_window_commands_old(window_node: JSHTextWindow)",
        "func setup_cursor_blink()",
        "func update_cursor_position()",
        "func setup_main_reference(main_ref)",
        "func create_window_background_0()",
        "func create_title_bar_0()",
        "func create_message_area()",
        "func create_input_field()",
        "func update_message_display()",
        "func execute_command(name: String, args: Array)",
        "func _on_window_input_event(camera, event, position, normal, shape_idx)",
        "func execute_command(name: String, args: Array)",
        "func _cmd_teleport(args: Array)",
        "func _cmd_resize(args: Array)",
        "func _cmd_color(args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func execute_command(name: String, args: Array)",
        "func execute_command(name: String, args: Array)",
        "func register_command(name: String, callback: Callable)",
        "func unregister_command(name: String)",
        "func _ready()",
        "func _process(delta)",
        "func _input(event)",
        "func setup_window()",
        "func _setup_components()",
        "func _create_border()",
        "func _setup_signals()",
        "func find_integration_nodes()",
        "func _submit_text()",
        "func _navigate_command_history(up: bool)",
        "func _update_cursor_position()",
        "func _process_command(command_text: String)",
        "func _on_cursor_timer_timeout()",
        "func _update_display()",
        "func _update_border_color()",
        "func add_text(text: String)",
        "func clear_text()",
        "func focus()",
        "func unfocus()",
        "func register_command(command_name: String, callback: Callable)",
        "func resize(new_width, new_height)",
        "func set_text(text_content, format_links = true)",
        "func update_text_display()",
        "func process_text_links()",
        "func create_control_buttons()",
        "func create_button(name, position, size, color, label_text)",
        "func _on_button_input_event(name, camera, event, pos, normal, shape_idx)",
        "func toggle_minimized()",
        "func scroll_messages_up()",
        "func scroll_messages_down()",
        "func add_system_message(message)",
        "func add_message(message, sender_name = \"User\")",
        "func create_text_window_container(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func setup_text_window_commands(window_node: JSHTextWindow)",
        "func _cmd_help(args: Array)",
        "func _cmd_clear(_args: Array)",
        "func change_color_of_letter_or_s(string)",
        "func _on_window_mouse_entered()",
        "func _on_window_mouse_exited()",
        "func _on_window_input_event(camera, event, position, normal, shape_idx)",
        "func resize_old_v1(new_width, new_height)",
        "func setup_input_handling_old()",
        "func set_text_old_v1(string_text)",
        "func change_color_of_letter_or_s_old(string)",
        "func create_control_buttons_old_v1()",
        "func create_text_area_old()",
        "func create_title_bar_old_v1()",
        "func _setup_components_old_v1()",
        "func _create_border_old_v1()",
        "func _submit_text_old_v1()",
        "func _navigate_command_history_old_v1(up: bool)",
        "func add_text_old_v1(text: String)",
        "func _update_display_old_v1()",
        "func _update_border_color_old_v1()",
        "func _update_cursor_position_old_v1()",
        "func _process_command_old_v1(command_text: String)",
        "func _on_cursor_timer_timeout_old_v1()",
        "func create_text_window_container_old(container_name: String, position: Vector3, size: Vector2 = Vector2(4, 3)",
        "func _cmd_help_old(args: Array)",
        "func _cmd_clear_old(_args: Array)",
        "func _cmd_teleport_old(args: Array)",
        "func _cmd_resize_old(args: Array)",
        "func _cmd_color_old(args: Array)",
        "func find_integration_nodes_old_v1()",
        "func scroll_messages_up_old_v1()",
        "func scroll_messages_down_old_v1()",
        "func create_text_area_old_v1()",
        "func create_control_buttons_old_v2()",
        "func create_button_old_v1(button_name, button_position, size, color, label_text)",
        "func _on_button_input_event_old_v1(button_name, _camera, event, _pos, _normal, _shape_idx)",
        "func add_window_collision_old()",
        "func set_text_old_v2(text_content, format_links = true)",
        "func update_text_display_old_v1()",
        "func process_text_links_old_v2()",
        "func create_window_background_old()",
        "func create_title_bar_old()",
        "func create_control_buttons_old_v3()",
        "func create_button_old_v2(button_name, button_position, size, color, label_text)",
        "func add_window_collision_old_v1()",
        "func add_message_old_v1(message, sender_name = \"User\")",
        "func toggle_minimized_old_v1()",
        "func create_window_background_old_v1()",
        "func setup_window_old()",
        "func setup_window_old_v1()",
        "func _setup_signals_old_v2()",
        "func clear_text_old_v2()",
        "func focus_old_v2()",
        "func unfocus_old_v2()",
        "func register_command_old_v2(command_name: String, callback: Callable)",
        "func add_system_message_old_v2(message)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/things_creator.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/thread_pool_manager.gd",
      "class_name": "Anonymous",
      "extends_from": "UniversalBeingBase",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": true,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()",
        "func setup_thread_pool()",
        "func add_task(task_data)",
        "func process_queue()",
        "func find_available_thread()",
        "func start_task(thread_id, task)",
        "func cleanup_thread(thread_id)",
        "func check_timeouts()",
        "func handle_timeout(thread_id)"
      ]
    },
    {
      "file_path": "scripts/jsh_framework/core/tree_blueprints_bank.gd",
      "class_name": "TreeBlueprints",
      "extends_from": "Node",
      "ready_count": 1,
      "init_count": 1,
      "process_count": 1,
      "input_count": 1,
      "unhandled_input_count": 0,
      "has_pentagon_header": true,
      "has_phase_comments": false,
      "has_floodgate_integration": false,
      "has_universal_being_pattern": false,
      "violations": [],
      "warnings": [
        "Missing Perfect Pentagon phase comments"
      ],
      "function_signatures": [
        "func _init()",
        "func pentagon_init()",
        "func _ready()",
        "func pentagon_ready()",
        "func _process(delta: float)",
        "func pentagon_process(delta: float)",
        "func _input(event: InputEvent)",
        "func pentagon_input(event: InputEvent)",
        "func sewers()",
        "func pentagon_sewers()"
      ]
    }
  ],
  "compliant_scripts": [
    "scripts/ai/gamma_controller.gd",
    "scripts/autoload/perfect_init.gd",
    "scripts/autoload/perfect_input.gd",
    "scripts/autoload/perfect_ready.gd",
    "scripts/autoload/sewers_monitor.gd",
    "scripts/core/logic_connector.gd",
    "scripts/core/txt_universal_database.gd",
    "scripts/core/universal_being_3d.gd",
    "scripts/core/universal_being_system.gd",
    "scripts/core/universal_being_ui.gd",
    "scripts/examples/pentagon_dependency_examples.gd",
    "scripts/patches/gizmo_comprehensive_diagnostics.gd",
    "scripts/patches/pentagon_debug_commands.gd",
    "scripts/test/perfect_pentagon_integration_test.gd"
  ]
}