Advanced Solutions Beyond Basic Best Practices:
1. The Living Documentation System
Create a dynamic context system that Claude must read before ANY code work:
markdown# /docs/ai_context/ACTIVE_WORK_SESSION.md

## Current Feature: Ragdoll System
- Status: MODIFYING existing system (not creating new)
- Location: scripts/physics/ragdoll_controller.gd
- Integration Points: 
  - FloodGateController (line 234)
  - UniversalBeing (line 567)
  - Pentagon Architecture compliant

## DO NOT CREATE:
- ragdoll_system.gd (exists)
- ragdoll_physics.gd (exists)
- player_ragdoll.gd (exists)

## CURRENT IMPLEMENTATION:
[paste actual code here]

## MODIFICATION NEEDED:
- Add visual feedback on activation
- Preserve ALL existing functionality
2. The Surgical Modification Protocol
Instead of "add ragdoll to player," use this format:
MODIFY EXISTING: scripts/physics/ragdoll_controller.gd

PRESERVE:
- All signal connections
- Pentagon Architecture functions
- FloodGate integration

ADD ONLY:
- Visual feedback in _on_ragdoll_activated()
- New exported variable for effect intensity

FORBIDDEN:
- Creating new ragdoll scripts
- Rewriting existing logic
- Changing public interfaces
3. Component Registry System
Create a registry that tracks what exists:
gdscript# scripts/core/component_registry.gd
class_name ComponentRegistry
extends Node

const EXISTING_SYSTEMS = {
    "ragdoll": "scripts/physics/ragdoll_controller.gd",
    "movement": "scripts/player/movement_component.gd",
    "damage": "scripts/combat/damage_system.gd"
}

static func get_system_path(system_name: String) -> String:
    assert(EXISTING_SYSTEMS.has(system_name), 
           "System doesn't exist! Don't create new ones!")
    return EXISTING_SYSTEMS[system_name]
4. The Incremental Development Lock
Force Claude to work incrementally:
markdown# DEVELOPMENT PHASES (ENFORCE!)

Phase 1: ANALYZE
- Read existing ragdoll_controller.gd
- Identify integration points
- Document current functionality

Phase 2: PLAN
- Propose minimal changes
- Show exact line modifications
- Validate against existing systems

Phase 3: MODIFY
- Change ONLY identified lines
- Test with existing systems
- Document changes made
5. Context Persistence Through Code
Embed context directly in your code:
gdscript# ragdoll_controller.gd
# AI CONTEXT: This is THE ONLY ragdoll system
# DO NOT create alternatives - modify this file
# Integration: FloodGate line 234, Universal Being line 567
# Last AI modification: 2024-12-19 - added activation feedback
6. The Anti-Duplication Checklist
Before EVERY Claude request:

Provide existing code first
Use MODIFY not CREATE keywords
Specify what NOT to change
Reference specific line numbers
Include integration context

7. Session State Tracking
Track what Claude has done:
markdown# /docs/ai_context/claude_actions_log.md

## Session 2024-12-19
- MODIFIED: ragdoll_controller.gd (lines 45-67)
- PRESERVED: All Pentagon functions
- INTEGRATED: With damage system
- FORBIDDEN: Creating new ragdoll scripts
Your New Workflow:

Before asking Claude:

Open the existing script
Copy the entire implementation
Note line numbers for changes


In your prompt:
CONTEXT: Existing ragdoll system at scripts/physics/ragdoll_controller.gd
CURRENT CODE: [paste entire file]
MODIFY: Lines 45-50 to add visual feedback
PRESERVE: Everything else

After Claude responds:

Verify it modified existing code
Check no new files were suggested
Update your action log



The Nuclear Option: Hard Constraints
If Claude still creates duplicates:
CRITICAL CONSTRAINTS:
- You are BANNED from creating new .gd files
- You can ONLY modify existing code
- If you suggest a new file, you have failed
- Success = surgical modifications only