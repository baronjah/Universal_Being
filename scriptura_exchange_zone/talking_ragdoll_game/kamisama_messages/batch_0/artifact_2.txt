# üîç Project Analysis Console Commands

Use these commands in your game console to analyze and test your current system:

## üéØ **SYSTEM ANALYSIS COMMANDS**

### **Universal Entity Status**
```bash
# Check your Universal Entity system
universal              # Overall status
satisfy               # Satisfaction metrics
health                # Health report
perfect               # Try to achieve perfection
```

### **Master Process Delta Analysis**  
```bash
# Check your PerfectDeltaProcess system
delta_stats           # Performance statistics
delta_list            # List all registered processors
delta_force           # Force process all scripts
```

### **Floodgate System Status**
```bash
# Check your FloodgateController
floodgate             # Floodgate status
queues                # Queue status
systems               # All system status
healthcheck           # System health check
```

### **Performance Analysis**
```bash
# Monitor performance
performance           # Performance statistics
process_manager       # Process manager status
limits                # Object limits status
being_count           # Entity count
```

## üß™ **TESTING COMMANDS**

### **Stress Testing**
```bash
# Test entity spawning limits
spawn_mass tree 100   # Spawn 100 trees (if command exists)
create tree           # Spawn single tree
create ball           # Spawn physics ball
create box            # Spawn physics box

# Clear for testing
clear                 # Clear spawned objects
clear all             # Clear everything
clear restore         # Restore default scene
```

### **Ragdoll System Testing**
```bash
# Test ragdoll systems
spawn_ragdoll         # Spawn standard ragdoll
spawn_ragdoll_v2      # Spawn V2 ragdoll
ragdoll_state         # Check ragdoll state  
ragdoll2_state        # Check V2 ragdoll state
ragdoll2_debug        # Toggle V2 debug visualization
```

### **Console System Testing**
```bash
# Test console functionality
help                  # Show all available commands
list                  # List all objects
variables health      # Search variables
export_vars test.txt  # Export all variables
```

## üìä **ANALYSIS WORKFLOW**

### **Step 1: System Health Check**
```bash
universal             # Check Universal Entity
health                # System health
performance           # Performance metrics
systems               # All systems status
```

### **Step 2: Process Analysis**
```bash
delta_stats           # Process statistics
delta_list            # List processors
floodgate             # Floodgate status
queues                # Queue status
```

### **Step 3: Stress Testing**
```bash
# Start with small numbers
create tree
create tree  
create tree
# Check performance
performance

# Try larger numbers
# (Create 10-20 objects manually)
# Check if fps drops
```

### **Step 4: Memory Analysis**
```bash
variables memory      # Search memory-related variables
limits                # Check limits
being_count           # Count entities
healthcheck           # Health status
```

## üéÆ **GOD GAME TESTING**

### **Mass Creation Test**
```bash
# Test current mass creation capabilities
# (Try these if they exist, otherwise note missing features)
create tree
create rock  
create ball
create box
# Keep creating until you see performance impact
```

### **Entity Management Test**
```bash
list                  # See all entities
select tree_001       # Try selecting specific entity (if command exists)  
delete tree_001       # Try deleting specific entity
clear                 # Clear all
```

### **Console Capability Test**
```bash
help                  # See all 100+ commands you have!
# Try various creation commands:
astral                # Create astral being
ramp                  # Create ramp
pathway               # Create pathway
sun                   # Create sun/light
```

## üìà **PERFORMANCE MONITORING**

### **Frame Rate Monitoring**
```bash
# Monitor while spawning objects:
1. performance        # Check baseline
2. create tree        # Spawn object
3. performance        # Check impact
4. Repeat until fps drops
```

### **Memory Monitoring**
```bash
# Check memory usage:
health                # Overall health including memory
variables memory      # Search memory variables
optimize              # Force optimization
```

### **Process Load Monitoring**
```bash
# Check processing load:
delta_stats           # Process statistics
delta_list            # See what's being processed
floodgate             # Queue status
```

## üîß **TROUBLESHOOTING COMMANDS**

### **If System Seems Slow**
```bash
optimize              # Force optimization
health                # Check health issues
delta_stats           # Check process load
performance           # Check fps/timing
```

### **If Entities Not Spawning**
```bash
systems               # Check system status
floodgate             # Check floodgate status  
healthcheck           # Overall health
clear                 # Clear and try again
```

### **If Console Issues**
```bash
console_debug         # Toggle console debug (if exists)
help                  # Verify commands work
test                  # Run test suite (if exists)
```

## üìù **ANALYSIS RESULTS TO NOTE**

### **System Performance**
- [ ] Current FPS with no entities: ___
- [ ] FPS after spawning 10 entities: ___
- [ ] FPS after spawning 50 entities: ___
- [ ] Point where performance degrades: ___ entities

### **Memory Usage**
- [ ] Baseline memory usage: ___
- [ ] Memory after spawning entities: ___
- [ ] Memory cleanup working: Y/N

### **System Functionality**
- [ ] Universal Entity working: Y/N
- [ ] Perfect Delta Process working: Y/N  
- [ ] Floodgate system working: Y/N
- [ ] Console commands working: Y/N

### **Missing Features for God Game**
- [ ] Mass spawning (spawn 100+ at once): Y/N
- [ ] Terrain editing: Y/N
- [ ] Visual creation tools: Y/N
- [ ] Save/load world states: Y/N

## üéØ **NEXT STEPS BASED ON RESULTS**

### **If Everything Works Great:**
‚Üí Proceed with God Game enhancements
‚Üí Focus on mass entity spawning
‚Üí Add visual creation tools

### **If Performance Issues:**
‚Üí Optimize PerfectDeltaProcess priorities
‚Üí Enhance Floodgate queue limits  
‚Üí Improve entity pooling

### **If System Issues:**
‚Üí Consider Strategic Cleanup approach
‚Üí Consolidate autoloads
‚Üí Unify ragdoll systems

**Test these commands and let me know what you discover!** üöÄ