extends Node

class_name AkashicRecords

var records_map: Dictionary = {}

# Store a new record in Akashic Recordsunc store_record(key: String, data: Variant) -> void:
	if key not in records_map:
		records_map[key] = []
	records_map[key].append({
		"timestamp": Time.get_unix_time_from_system(),
		"data": data
	})

# Retrieve records by key
func get_records(key: String) -> Array:
	return records_map.get(key, [])

# Retrieve latest record by key
func get_latest_record(key: String) -> Variant:
	var records = records_map.get(key, [])
	return records[-1].data if records.size() > 0 else null

# Check if a record exists
func has_record(key: String) -> bool:
	return key in records_map and records_map[key].size() > 0

# Delete specific record by timestamp
func delete_record(key: String, timestamp: int) -> bool:
	if key not in records_map:
		return false
	for i in range(records_map[key].size()):
		if records_map[key][i].timestamp == timestamp:
			records_map[key].remove_at(i)
			return true
	return false

# Delete all records associated with a key
func clear_records(key: String) -> void:
	if key in records_map:
		records_map.erase(key)

# Retrieve entire Akashic Records
func get_all_records() -> Dictionary:
	return records_map

# Save Akashic Records to JSON file
func save_to_file(path: String) -> void:
	var file = FileAccess.open(path, FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(records_map, "\t"))
		file.close()

# Load Akashic Records from JSON file
func load_from_file(path: String) -> void:
	var file = FileAccess.open(path, FileAccess.READ)
	if file:
		var content = file.get_as_text()
		var json = JSON.parse_string(content)
		if typeof(json) == TYPE_DICTIONARY:
			records_map = json
		file.close()
