extends Node

class_name ASCIIFonts

# ASCII Font Library for LuminusOS
# Provides different stylized fonts for ASCII art rendering in the terminal

# Dictionary of all available fonts
var fonts = {
    "default": {
        "A": ["  █  ", " █ █ ", "█████", "█   █", "█   █"],
        "B": ["████ ", "█   █", "████ ", "█   █", "████ "],
        "C": [" ████", "█    ", "█    ", "█    ", " ████"],
        "D": ["████ ", "█   █", "█   █", "█   █", "████ "],
        "E": ["█████", "█    ", "████ ", "█    ", "█████"],
        "F": ["█████", "█    ", "████ ", "█    ", "█    "],
        "G": [" ████", "█    ", "█  ██", "█   █", " ████"],
        "H": ["█   █", "█   █", "█████", "█   █", "█   █"],
        "I": ["█████", "  █  ", "  █  ", "  █  ", "█████"],
        "J": ["    █", "    █", "    █", "█   █", " ███ "],
        "K": ["█   █", "█  █ ", "███  ", "█  █ ", "█   █"],
        "L": ["█    ", "█    ", "█    ", "█    ", "█████"],
        "M": ["█   █", "██ ██", "█ █ █", "█   █", "█   █"],
        "N": ["█   █", "██  █", "█ █ █", "█  ██", "█   █"],
        "O": [" ███ ", "█   █", "█   █", "█   █", " ███ "],
        "P": ["████ ", "█   █", "████ ", "█    ", "█    "],
        "Q": [" ███ ", "█   █", "█   █", "█  ██", " ████"],
        "R": ["████ ", "█   █", "████ ", "█  █ ", "█   █"],
        "S": [" ████", "█    ", " ███ ", "    █", "████ "],
        "T": ["█████", "  █  ", "  █  ", "  █  ", "  █  "],
        "U": ["█   █", "█   █", "█   █", "█   █", " ███ "],
        "V": ["█   █", "█   █", "█   █", " █ █ ", "  █  "],
        "W": ["█   █", "█   █", "█ █ █", "██ ██", "█   █"],
        "X": ["█   █", " █ █ ", "  █  ", " █ █ ", "█   █"],
        "Y": ["█   █", " █ █ ", "  █  ", "  █  ", "  █  "],
        "Z": ["█████", "   █ ", "  █  ", " █   ", "█████"],
        "0": [" ███ ", "█  ██", "█ █ █", "██  █", " ███ "],
        "1": ["  █  ", " ██  ", "  █  ", "  █  ", "█████"],
        "2": [" ███ ", "█   █", "   █ ", "  █  ", "█████"],
        "3": ["████ ", "    █", " ███ ", "    █", "████ "],
        "4": ["█  █ ", "█  █ ", "█████", "   █ ", "   █ "],
        "5": ["█████", "█    ", "████ ", "    █", "████ "],
        "6": [" ███ ", "█    ", "████ ", "█   █", " ███ "],
        "7": ["█████", "    █", "   █ ", "  █  ", " █   "],
        "8": [" ███ ", "█   █", " ███ ", "█   █", " ███ "],
        "9": [" ███ ", "█   █", " ████", "    █", " ███ "],
        " ": ["     ", "     ", "     ", "     ", "     "],
        ".": ["     ", "     ", "     ", "     ", "  █  "],
        ",": ["     ", "     ", "     ", "  █  ", " █   "],
        "!": ["  █  ", "  █  ", "  █  ", "     ", "  █  "],
        "?": [" ███ ", "█   █", "   █ ", "     ", "  █  "],
        ":": ["     ", "  █  ", "     ", "  █  ", "     "],
        ";": ["     ", "  █  ", "     ", "  █  ", " █   "],
        "-": ["     ", "     ", "█████", "     ", "     "],
        "_": ["     ", "     ", "     ", "     ", "█████"],
        "+": ["     ", "  █  ", "█████", "  █  ", "     "],
        "=": ["     ", "█████", "     ", "█████", "     "],
        "/": ["    █", "   █ ", "  █  ", " █   ", "█    "],
        "\\": ["█    ", " █   ", "  █  ", "   █ ", "    █"],
        "(": ["   █ ", "  █  ", "  █  ", "  █  ", "   █ "],
        ")": [" █   ", "  █  ", "  █  ", "  █  ", " █   "],
        "[": ["  ██ ", "  █  ", "  █  ", "  █  ", "  ██ "],
        "]": [" ██  ", "  █  ", "  █  ", "  █  ", " ██  "],
        "*": ["     ", " █ █ ", "  █  ", " █ █ ", "     "],
        "@": [" ███ ", "█   █", "█ ███", "█ █ █", " ████"],
        "#": [" █ █ ", "█████", " █ █ ", "█████", " █ █ "],
        "$": ["  █  ", " ████", "█ █  ", " ████", "  █  "],
        "%": ["██  █", "██ █ ", "  █  ", " █ ██", "█  ██"],
        "^": ["  █  ", " █ █ ", "█   █", "     ", "     "],
        "&": [" ██  ", "█  █ ", " ██  ", "█  █ ", " ██ █"]
    },
    
    "blocky": {
        "A": ["▄▄▄▄▄", "█   █", "█████", "█   █", "█   █"],
        "B": ["████▄", "█   █", "████▄", "█   █", "████▄"],
        "C": ["▄███▄", "█    ", "█    ", "█    ", "▀███▀"],
        "D": ["████▄", "█   █", "█   █", "█   █", "████▀"],
        "E": ["█████", "█    ", "████ ", "█    ", "█████"],
        "F": ["█████", "█    ", "████ ", "█    ", "█    "],
        "G": ["▄███▄", "█    ", "█  ██", "█   █", "▀███▀"],
        "H": ["█   █", "█   █", "█████", "█   █", "█   █"],
        "I": ["█████", "  █  ", "  █  ", "  █  ", "█████"],
        "J": ["    █", "    █", "    █", "█   █", "▀███▀"],
        "K": ["█   █", "█  █▀", "███▄ ", "█  █▀", "█   █"],
        "L": ["█    ", "█    ", "█    ", "█    ", "█████"],
        "M": ["█   █", "██ ██", "█ █ █", "█   █", "█   █"],
        "N": ["█   █", "██  █", "█ █ █", "█  ██", "█   █"],
        "O": ["▄███▄", "█   █", "█   █", "█   █", "▀███▀"],
        "P": ["████▄", "█   █", "████▀", "█    ", "█    "],
        "Q": ["▄███▄", "█   █", "█   █", "█  █▀", "▀███▄"],
        "R": ["████▄", "█   █", "████▀", "█  █▀", "█   █"],
        "S": ["▄███▄", "█    ", "▀███▄", "    █", "████▀"],
        "T": ["█████", "  █  ", "  █  ", "  █  ", "  █  "],
        "U": ["█   █", "█   █", "█   █", "█   █", "▀███▀"],
        "V": ["█   █", "█   █", "█   █", "▀█ █▀", " ▀█▀ "],
        "W": ["█   █", "█   █", "█ █ █", "██ ██", "█   █"],
        "X": ["█   █", "▀█ █▀", " ▀█▀ ", "▄█ █▄", "█   █"],
        "Y": ["█   █", "▀█ █▀", " ▀█▀ ", "  █  ", "  █  "],
        "Z": ["█████", "   █▀", "  █▀ ", "▄█   ", "█████"],
        "0": ["▄███▄", "█  ██", "█ █ █", "██  █", "▀███▀"],
        "1": ["  █  ", " ██  ", "  █  ", "  █  ", "█████"],
        "2": ["▄███▄", "█   █", "   █▀", " ▄█  ", "█████"],
        "3": ["████▄", "    █", "▄███▀", "    █", "████▀"],
        "4": ["█  █ ", "█  █ ", "█████", "   █ ", "   █ "],
        "5": ["█████", "█    ", "████▄", "    █", "████▀"],
        "6": ["▄███▄", "█    ", "████▄", "█   █", "▀███▀"],
        "7": ["█████", "    █", "   █▀", "  █  ", " █   "],
        "8": ["▄███▄", "█   █", "▄███▄", "█   █", "▀███▀"],
        "9": ["▄███▄", "█   █", "▀████", "    █", "▄███▀"],
        " ": ["     ", "     ", "     ", "     ", "     "],
        ".": ["     ", "     ", "     ", "     ", " ▀█▀ "],
        ",": ["     ", "     ", "     ", "  █  ", " ▄█  "],
        "!": ["  █  ", "  █  ", "  █  ", "     ", "  █  "],
        "?": ["▄███▄", "█   █", "   █▀", "     ", "  █  "],
        ":": ["     ", " ▀█▀ ", "     ", " ▀█▀ ", "     "],
        ";": ["     ", " ▀█▀ ", "     ", "  █  ", " ▄█  "],
        "-": ["     ", "     ", "█████", "     ", "     "],
        "_": ["     ", "     ", "     ", "     ", "█████"],
        "+": ["     ", "  █  ", "█████", "  █  ", "     "],
        "=": ["     ", "█████", "     ", "█████", "     "],
        "/": ["    █", "   █▀", "  █▀ ", " █▀  ", "█    "],
        "\\": ["█    ", " █   ", "  █  ", "   █▄", "    █"],
        "(": ["   █▄", "  █  ", "  █  ", "  █  ", "   █▀"],
        ")": ["▄█   ", "  █  ", "  █  ", "  █  ", "▀█   "],
        "[": ["  ██▄", "  █  ", "  █  ", "  █  ", "  ██▀"],
        "]": ["▄██  ", "  █  ", "  █  ", "  █  ", "▀██  "],
        "*": ["     ", "▄█ █▄", "  █  ", "▀█ █▀", "     "],
        "@": ["▄███▄", "█   █", "█ ███", "█ █ █", "▀████"],
        "#": ["▄█ █▄", "█████", "▄█ █▄", "█████", "▀█ █▀"],
        "$": ["  █  ", "▄████", "█ █  ", "▀████", "  █  "],
        "%": ["██  █", "██ █▀", "  █  ", "▄█ ██", "█  ██"],
        "^": ["  █  ", "▄█ █▄", "█   █", "     ", "     "],
        "&": ["▄██  ", "█  █▄", "▄██  ", "█  █▄", "▀██ █"]
    },
    
    "curved": {
        "A": [" ╭─╮ ", "│ │ ", "├─┤ ", "│ │ ", "╰ ╯ "],
        "B": ["╭──╮", "│  │", "├──┤", "│  │", "╰──╯"],
        "C": [" ╭──", "╭╯  ", "│   ", "╰╮  ", " ╰──"],
        "D": ["╭──╮", "│  ╰╮", "│  │", "│  ╭╯", "╰──╯"],
        "E": ["╭───", "│   ", "├─╮ ", "│   ", "╰───"],
        "F": ["╭───", "│   ", "├─╮ ", "│   ", "╰   "],
        "G": [" ╭──", "╭╯  ", "│ ╭─", "╰╮│ ", " ╰─╯"],
        "H": ["╭ ╭╮", "│ ││", "├─┼┤", "│ ││", "╰ ╰╯"],
        "I": ["─╭─╮", " │ │", " │ │", " │ │", "─╰─╯"],
        "J": ["   ╭╮", "   ││", "   ││", "╭╮││", "╰╯╰╯"],
        "K": ["╭╮╭╮", "│╰╯│", "│╭╮│", "│╰╯│", "╰╯╰╯"],
        "L": ["╭   ", "│   ", "│   ", "│   ", "╰───"],
        "M": ["╭╮ ╭╮", "││ ││", "│╰─╯│", "│   │", "╰   ╯"],
        "N": ["╭╮ ╭╮", "││\\││", "││ ││", "││/││", "╰╯ ╰╯"],
        "O": [" ╭─╮ ", "╭╯ ╰╮", "│   │", "╰╮ ╭╯", " ╰─╯ "],
        "P": ["╭──╮", "│  │", "├──╯", "│   ", "╰   "],
        "Q": [" ╭─╮ ", "╭╯ ╰╮", "│   │", "╰╮_╭╯", " ╰─╰╮"],
        "R": ["╭──╮", "│  │", "├──╯", "│\\  ", "╰ \\ "],
        "S": [" ╭──", "╭╯  ", "╰──╮", "   │", "───╯"],
        "T": ["─╭─╮─", " │ │ ", " │ │ ", " │ │ ", " ╰─╯ "],
        "U": ["╭ ╭╮", "│ ││", "│ ││", "╰╮╭╯", " ╰╯ "],
        "V": ["╭   ╮", "│   │", "\\   /", " \\ / ", "  V  "],
        "W": ["╭    ╮", "│    │", "│ /\\ │", "│/  \\│", "╰    ╯"],
        "X": ["╭╮ ╭╮", "╰╯╭╯╰╮", " ╭╯ ╭╯", "╭╯╭ ╰╮", "╰─╯ ╰─╯"],
        "Y": ["╭   ╮", "│   │", "╰╮ ╭╯", " │ │ ", " ╰─╯ "],
        "Z": ["────╮", "   ╭╯", "  ╭╯ ", " ╭╯  ", "╰────"],
        "0": [" ╭──╮ ", "╭╯  ╰╮", "│ ╭╮ │", "╰╮  ╭╯", " ╰──╯ "],
        "1": [" ╭╮ ", "╭╯│ ", " │ │", " │ │", "─╰─╯"],
        "2": [" ╭──╮", "╭╯  │", "╰──╮│", "╭──╯╰", "╰────"],
        "3": ["╭───╮", "╰╮  │", " ╰──┤", "╭╮  │", "╰╰──╯"],
        "4": ["╭ ╭╮ ", "│ ││ ", "╰─┼┤ ", "  ││ ", "  ╰╯ "],
        "5": ["╭───╮", "│    ", "├───╮", "╰╮  │", " ╰──╯"],
        "6": [" ╭──╮", "╭╯   ", "├──╮ ", "│  │ ", "╰──╯ "],
        "7": ["────╮", "   ╭╯", "  ╭╯ ", " ╭╯  ", "╭╯   "],
        "8": [" ╭─╮ ", "╭╯ ╰╮", "╰╮╭─╯", "╭╯╰╮ ", "╰──╯ "],
        "9": [" ╭─╮ ", "╭╯ ╰╮", "╰──┼╯", "   │ ", " ──╯ "],
        " ": ["    ", "    ", "    ", "    ", "    "],
        ".": ["    ", "    ", "    ", "    ", " ●  "],
        ",": ["    ", "    ", "    ", " ╭  ", " ╰  "],
        "!": [" ●  ", " │  ", " │  ", "    ", " ●  "],
        "?": [" ╭─╮", "╭╯ ╰╯", "  ╭╯ ", "    ", " ●  "],
        ":": ["    ", " ●  ", "    ", " ●  ", "    "],
        ";": ["    ", " ●  ", "    ", " ╭  ", " ╰  "],
        "-": ["    ", "    ", "────", "    ", "    "],
        "_": ["    ", "    ", "    ", "    ", "────"],
        "+": ["    ", " │  ", "─┼─ ", " │  ", "    "],
        "=": ["    ", "────", "    ", "────", "    "],
        "/": ["   ╭", "  ╭╯", " ╭╯ ", "╭╯  ", "╯   "],
        "\\": ["╮   ", "╰╮  ", " ╰╮ ", "  ╰╮", "   ╰"],
        "(": [" ╭  ", "╭╯  ", "│   ", "╰╮  ", " ╰  "],
        ")": ["  ╮ ", "  ╰╮", "   │", "  ╭╯", "  ╯ "],
        "[": [" ╭─ ", " │  ", " │  ", " │  ", " ╰─ "],
        "]": [" ─╮ ", "  │ ", "  │ ", "  │ ", " ─╯ "],
        "*": ["    ", "╭ ╮ ", "─┼─ ", "╰ ╯ ", "    "],
        "@": [" ╭─╮ ", "╭╯─┼╮", "│ ╭╯│", "╰─┼─╯", " ╰──╯"],
        "#": [" │ │ ", "─┼─┼─", " │ │ ", "─┼─┼─", " │ │ "],
        "$": [" ╭┼╮ ", "╭╯│  ", "╰─┼╮ ", "  │╰╮", " ╰┼╯ "],
        "%": ["╭╮  ╮", "╰╯ ╭╯", "  ╭╯ ", " ╭╯╭╮", "╭╯ ╰╯"],
        "^": [" ╭╮ ", "╭╯╰╮", "╯  ╰", "    ", "    "],
        "&": [" ╭╮ ", "╭╯╰╮", "├─╮│", "│ ╰┼", "╰──╯"]
    }
}

# Function to render text in a specific font
func render_text(text, font_name="default"):
    if not fonts.has(font_name):
        font_name = "default"
    
    var font = fonts[font_name]
    var result = []
    
    # Initialize lines for each row in the font (assuming all characters have 5 rows)
    for i in range(5):
        result.append("")
    
    # Process each character in the text
    for c in text.to_upper():
        if c == " ":
            # Handle space characters
            for i in range(5):
                result[i] += "     "
        elif font.has(c):
            # Add the character from the font
            for i in range(5):
                result[i] += font[c][i]
        else:
            # Unknown character, add blank space
            for i in range(5):
                result[i] += "     "
    
    return result

# Function to get the list of available fonts
func get_font_list():
    return fonts.keys()

# Function to get a random font
func get_random_font():
    var font_keys = fonts.keys()
    return font_keys[randi() % font_keys.size()]

# Function to create a custom font character
func create_custom_character(font_name, character, rows):
    if not fonts.has(font_name):
        return false
    
    if rows.size() != 5:
        return false
    
    fonts[font_name][character.to_upper()] = rows
    return true

# Function to create a new font
func create_new_font(font_name, base_font="default"):
    if fonts.has(font_name):
        return false
    
    if base_font != "" and fonts.has(base_font):
        fonts[font_name] = fonts[base_font].duplicate(true)
    else:
        fonts[font_name] = {}
    
    return true